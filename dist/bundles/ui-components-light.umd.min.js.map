{"version":3,"file":"ui-components-light.umd.min.js","sources":["~/ui-components-light/src/clarity-light/clarity.module.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/lang/is-array.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/lang/is-date.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/asserts/assert.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/lang/is-number.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/lang/is-string.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/asserts/asString.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/asserts/asType.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/common/global.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/lang/is-function.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/dom/has-class.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/dom/add-class.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/dom/toggle-class.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/dom/remove-class.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/dom/get-element.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/globalization/Localization.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/common/datetime/datetime.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/globalization/Globalize.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/asserts/asNumber.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/math/to-fixed.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/asserts/asDate.ts","~/ui-components-light/src/clarity-light/wigfrid-light/comp-light/Control.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/asserts/asBoolean.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/lang/is-boolean.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/dom/enable.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/dom/create-element.ts","~/ui-components-light/src/clarity-light/wigfrid-light/comp-light/DropDown/DropDown.ts"],"sourcesContent":["/*\n * Copyright (c) 2016 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport { ModuleWithProviders, NgModule } from \"@angular/core\";\n\n//import {ALERT_DIRECTIVES} from \"./alert/index\";\n//import {CHECKBOX_DIRECTIVES} from \"./checkboxes/index\";\n//import {CODE_HIGHLIGHT_DIRECTIVES} from \"./code/index\";\n//import {DATAGRID_DIRECTIVES} from \"./datagrid/index\";\n//import {DROPDOWN_DIRECTIVES} from \"./dropdown/index\";\n//import {LAYOUT_DIRECTIVES} from \"./layout/index\";\n//import {MODAL_DIRECTIVES} from \"./modal/index\";\n//import {NAVIGATION_DIRECTIVES} from \"./nav/index\";\n//import {STACK_VIEW_DIRECTIVES} from \"./stack-view/index\";\n//import {TABS_DIRECTIVES} from \"./tabs/index\";\n//import {TREE_VIEW_DIRECTIVES} from \"./tree-view/index\";\n//import {WIZARD_DIRECTIVES} from \"./wizard/index\";\n//import {ICON_DIRECTIVES} from \"./iconography/index\";\n\n//import {ClrResponsiveNavigationService} from \"./nav/clrResponsiveNavigationService\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    declarations: [\n        //ALERT_DIRECTIVES,\n        //CHECKBOX_DIRECTIVES,\n        //CODE_HIGHLIGHT_DIRECTIVES,\n       // DATAGRID_DIRECTIVES,\n       // DROPDOWN_DIRECTIVES,\n       // LAYOUT_DIRECTIVES,\n       // MODAL_DIRECTIVES,\n       // NAVIGATION_DIRECTIVES,\n       // STACK_VIEW_DIRECTIVES,\n       // TABS_DIRECTIVES,\n       // TREE_VIEW_DIRECTIVES,\n       // WIZARD_DIRECTIVES,\n       // ICON_DIRECTIVES\n    ],\n    exports: [\n        //ALERT_DIRECTIVES,\n        //CHECKBOX_DIRECTIVES,\n        //CODE_HIGHLIGHT_DIRECTIVES,\n        //DATAGRID_DIRECTIVES,\n       // DROPDOWN_DIRECTIVES,\n       // LAYOUT_DIRECTIVES,\n       // MODAL_DIRECTIVES,\n       // NAVIGATION_DIRECTIVES,\n       // STACK_VIEW_DIRECTIVES,\n       // TABS_DIRECTIVES,\n       // TREE_VIEW_DIRECTIVES,\n       // WIZARD_DIRECTIVES,\n       // ICON_DIRECTIVES\n    ]\n})\nexport class ClarityModule {\n   \n\n    static forChild(): ModuleWithProviders {\n        return {\n            ngModule: ClarityModule,\n            providers: []\n        };\n    }\n}\n","\nexport function isArray(value: any): boolean {\n    return value instanceof Array;\n}\n","\nexport function isDate(value: any): boolean {\n    return value instanceof Date && !isNaN(value.valueOf());\n}\n","/**\n * Throws an exception if a condition is false.\n *\n * @param condition Condition expected to be true.\n * @param msg Message of the exception if the condition is not true.\n */\nexport function assert(condition: boolean, msg: string) {\n    if (!condition) {\n        throw new Error('** Assertion failed in Wijmo: ' + msg);\n    }\n}\n","\nexport function isNumber(value: any): boolean {\n    return typeof (value) == 'number';\n}\n","\nexport function isString(value: any): boolean {\n    return typeof (value) == 'string';\n}\n","import {assert} from \"./assert\";\nimport {isString} from \"../lang/is-string\";\n/**\n * Asserts that a value is a string.\n *\n * @param value Value supposed to be a string.\n * @param nullOK Whether null values are acceptable.\n * @return The string passed in.\n */\nexport function asString(value: string, nullOK = true): string {\n    assert((nullOK && value == null) || isString(value), 'String expected.');\n    return value;\n}\n","import {tryCast} from \"../../common/Global\";\nimport {assert} from \"./assert\";\n/**\n * Asserts that a value is an instance of a given type.\n *\n * @param value Value to be checked.\n * @param type Type of value expected.\n * @param nullOK Whether null values are acceptable.\n * @return The value passed in.\n */\nexport function asType(value: any, type: any, nullOK = false): any {\n    value = tryCast(value, type);\n    assert(nullOK || value != null, type + ' expected.');\n    return value;\n}\n","import {Binding} from \"./Binding\";\nimport {Rectangle} from \"./ui/Rectangle\";\nimport {isFunction, isString, asType, contains, asNumber, isBoolean, isNumber} from \"../util/util\";\nimport {Aggregate} from \"../../../enum/Aggregate\";\n//import {ICollectionView} from \"../../../collections/interface/ICollectionView\";\n\n\n\n\n/**\n * Allows callers to verify whether an object implements an interface.\n */\nexport interface IQueryInterface {\n    /**\n     * Returns true if the object implements a given interface.\n     *\n     * @param interfaceName Name of the interface to look for.\n     */\n    implementsInterface(interfaceName: string): boolean;\n}\n/**\n * Casts a value to a type if possible.\n *\n * @param value Value to cast.\n * @param type Type or interface name to cast to.\n * @return The value passed in if the cast was successful, null otherwise.\n */\nexport function tryCast(value: any, type: any): any {\n\n    // null doesn't implement anything\n    if (value == null) {\n        return null;\n    }\n\n    // test for interface implementation (IQueryInterface)\n    if (isString(type)) {\n        return isFunction(value.implementsInterface) && value.implementsInterface(type) ? value : null;\n    }\n\n    // regular type test\n    return value instanceof type ? value : null;\n}\n\n\n\n/**\n * Checks whether an @see:ICollectionView is defined and not empty.\n *\n * @param value @see:ICollectionView to check.\n */\n /*\nexport function hasItems(value: ICollectionView) {\n    return value && value.items && value.items.length;\n}\n*/\n\n\n\n\n\n/**\n * Sets the start and end positions of a selection in a text field.\n *\n * This method is similar to the native @see:setSelectionRange method\n * in HTMLInputElement objects, except it checks for conditions that\n * may cause exceptions (element not in the DOM, disabled, or hidden).\n *\n * @param e\n * @param start Offset into the text field for the start of the selection.\n * @param end Offset into the text field for the end of the selection.\n */\nexport function setSelectionRange(e: HTMLInputElement, start: number, end = start) {\n    e = asType(e, HTMLInputElement);\n    if (contains(document.body, e) && !e.disabled && e.style.display != 'none') {\n        try {\n            e.setSelectionRange(asNumber(start), asNumber(end));\n            e.focus(); // needed in Chrome (TFS 124102)\n        } catch (x) { }\n    }\n}\n\n// ** jQuery replacement methods\n\n/**\n * Gets the bounding rectangle of an element in page coordinates.\n *\n * This is similar to the <b>getBoundingClientRect</b> function,\n * except that uses window coordinates, which change when the\n * document scrolls.\n */\nexport function getElementRect(e: Element): Rectangle {\n    const rc = e.getBoundingClientRect();\n    return new Rectangle(rc.left + window.pageXOffset, rc.top + window.pageYOffset, rc.width, rc.height);\n}\n\n\n\n\n\n/**\n * Calculates an aggregate value from the values in an array.\n *\n * @param aggType Type of aggregate to calculate.\n * @param items Array with the items to aggregate.\n * @param binding Name of the property to aggregate on (in case the items are not simple values).\n */\nexport function getAggregate(aggType: Aggregate, items: any[], binding?: string) {\n    let cnt   = 0,\n        cntn  = 0,\n        sum   = 0,\n        sum2  = 0,\n        min   = null,\n        max = null;\n    const bnd = binding ? new Binding(binding) : null;\n\n    // calculate aggregate\n    for (let i = 0; i < items.length; i++) {\n\n        // get item/value\n        let val = items[i];\n        if (bnd) {\n            val = bnd.getValue(val);\n            //assert(!isUndefined(val), 'item does not define property \"' + binding + '\".');\n        }\n\n        // aggregate\n        if (val != null) {\n            cnt++;\n            if (min == null || val < min) {\n                min = val;\n            }\n            if (max == null || val > max) {\n                max = val;\n            }\n            if (isNumber(val) && !isNaN(val)) {\n                cntn++;\n                sum += val;\n                sum2 += val * val;\n            } else if (isBoolean(val)) {\n                cntn++;\n                if (val == true) {\n                    sum++;\n                    sum2++;\n                }\n            }\n        }\n    }\n\n    // return result\n    const avg = cntn == 0 ? 0 : sum / cntn;\n    switch (aggType)\n    {\n        case Aggregate.Avg:\n            return avg;\n        case Aggregate.Cnt:\n            return cnt;\n        case Aggregate.Max:\n            return max;\n        case Aggregate.Min:\n            return min;\n        case Aggregate.Rng:\n            return max - min;\n        case Aggregate.Sum:\n            return sum;\n        case Aggregate.VarPop:\n            return cntn <= 1 ? 0 : sum2 / cntn - avg * avg;\n        case Aggregate.StdPop:\n            return cntn <= 1 ? 0 : Math.sqrt(sum2 / cntn - avg * avg);\n        case Aggregate.Var:\n            return cntn <= 1 ? 0 : (sum2 / cntn - avg * avg) * cntn / (cntn - 1);\n        case Aggregate.Std:\n            return cntn <= 1 ? 0 : Math.sqrt((sum2 / cntn - avg * avg) * cntn / (cntn - 1));\n    }\n\n    // should never get here...\n    throw 'Invalid aggregate type.';\n}\n","\nexport function isFunction(value: any): boolean {\n    return typeof (value) == 'function';\n}\n","/**\n * Checks whether an element has a class.\n *\n * @param e Element to check.\n * @param className Class to check for.\n */\nexport function hasClass(e: HTMLElement, className: string): boolean {\n    // note: using e.getAttribute('class') instead of e.classNames\n    // so this works with SVG as well as regular HTML elements.\n    if (e && e.getAttribute) {\n        const rx = new RegExp('\\\\b' + className + '\\\\b');\n        return e && rx.test(e.getAttribute('class'));\n    }\n    return false;\n}\n","import {hasClass} from \"./has-class\";\n\n\n/**\n * Adds a class to an element.\n *\n * @param e Element that will have the class added.\n * @param className Class to add to the element.\n */\nexport function addClass(e: HTMLElement, className: string) {\n    // note: using e.getAttribute('class') instead of e.classNames\n    // so this works with SVG as well as regular HTML elements.\n    if (e && e.setAttribute && !hasClass(e, className)) {\n        const cn = e.getAttribute('class');\n        e.setAttribute('class', cn ? cn + ' ' + className : className);\n    }\n}\n","import {removeClass} from \"./remove-class\";\nimport {addClass} from \"./add-class\";\n\n\n/**\n * Adds or removes a class to or from an element.\n *\n * @param e Element that will have the class added.\n * @param className Class to add or remove.\n * @param addOrRemove Whether to add or remove the class.\n * Use true to add class to element and false to remove class from element.\n */\nexport function toggleClass(e: HTMLElement, className: string, addOrRemove: boolean) {\n    if (addOrRemove) {\n        addClass(e, className);\n    } else {\n        removeClass(e, className);\n    }\n}\n","import {hasClass} from \"./has-class\";\n\n\n/**\n * Removes a class from an element.\n *\n * @param e Element that will have the class removed.\n * @param className Class to remove form the element.\n */\nexport function removeClass(e: HTMLElement, className: string) {\n    // note: using e.getAttribute('class') instead of e.classNames\n    // so this works with SVG as well as regular HTML elements.\n    if (e && e.setAttribute && hasClass(e, className)) {\n        const rx = new RegExp('\\\\s?\\\\b' + className + '\\\\b', 'g'),\n              cn = e.getAttribute('class');\n        e.setAttribute('class', cn.replace(rx, ''));\n    }\n}\n","import {isString} from \"../lang/is-string\";\n\n\n/**\n * Gets an element from a jQuery-style selector.\n *\n * @param selector An element, a query selector string, or a jQuery object.\n */\nexport function getElement(selector: any): HTMLElement {\n    if (selector instanceof HTMLElement) return selector;\n    if (isString(selector)) return <HTMLElement>document.querySelector(selector);\n    if (selector && selector.jquery) return <HTMLElement>selector[0];\n    return null;\n}\n","'use strict';\n\n/**\n * Gets or sets an object that contains all localizable strings in the Wijmo library.\n *\n * The culture selector is a two-letter string that represents an\n * <a href='http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes'>ISO 639 culture</a>.\n */\nexport let culture: any = {\n    Globalize: {\n        numberFormat: {\n            NumberDecimalSeparator: '.',\n            NumberGroupSeparator: ',',\n            CurrencySymbol: '$',\n            '.': '.',\n            ',': ',',\n            percent: {pattern: ['-n %', 'n %']},\n            currency: {decimals: 2, symbol: '$', pattern: ['($n)', '$n']}\n        },\n        dateTimeFormat: {\n            TimeSeparator: '/',\n            DateSeparator: ':',\n            '/': '/',\n            ':': ':',\n        },\n        calendar: {\n            '/': '/',\n            ':': ':',\n            firstDay: 0,\n            days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n            daysAbbr: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n            months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n            monthsAbbr: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n            am: ['AM', 'A'],\n            pm: ['PM', 'P'],\n            eras: ['A.D.', 'B.C.'],\n            patterns: {\n                d: 'M/d/yyyy', D: 'dddd, MMMM dd, yyyy',\n                f: 'dddd, MMMM dd, yyyy h:mm tt', F: 'dddd, MMMM dd, yyyy h:mm:ss tt',\n                t: 'h:mm tt', T: 'h:mm:ss tt',\n                M: 'MMMM d', m: 'MMMM d',\n                Y: 'MMMM, yyyy', y: 'MMMM, yyyy',\n                g: 'M/d/yyyy h:mm tt', G: 'M/d/yyyy h:mm:ss tt',\n                s: 'yyyy\"-\"MM\"-\"dd\"T\"HH\":\"mm\":\"ss',\n                o: 'yyyy\"-\"MM\"-\"dd\"T\"HH\":\"mm\":\"ss\".\"fffffffK',\n                O: 'yyyy\"-\"MM\"-\"dd\"T\"HH\":\"mm\":\"ss\".\"fffffffK',\n                U: 'dddd, MMMM dd, yyyy h:mm:ss tt'\n            },\n            fiscalYearOffsets: [-3, -3]\n        }\n    },\n    MultiSelect: {\n        itemsSelected: '{count:n0} items selected'\n    },\n    FlexGrid: {\n        groupHeaderFormat: '{name}: <b>{value} </b>({count:n0} items)'\n    },\n    FlexGridFilter: {\n\n        // filter\n        ascending: '\\u2191 Ascending',\n        descending: '\\u2193 Descending',\n        apply: 'Apply',\n        clear: 'Clear',\n        conditions: 'Filter by Condition',\n        values: 'Filter by Value',\n\n        // value filter\n        search: 'Search',\n        selectAll: 'Select All',\n        null: '(nothing)',\n\n        // condition filter\n        header: 'Show items where the value',\n        and: 'And',\n        or: 'Or',\n        stringOperators: [\n            {name: '(not set)', op: null},\n            {name: 'Equals', op: 0},\n            {name: 'Does not equal', op: 1},\n            {name: 'Begins with', op: 6},\n            {name: 'Ends with', op: 7},\n            {name: 'Contains', op: 8},\n            {name: 'Does not contain', op: 9}\n        ],\n        numberOperators: [\n            {name: '(not set)', op: null},\n            {name: 'Equals', op: 0},\n            {name: 'Does not equal', op: 1},\n            {name: 'Is Greater than', op: 2},\n            {name: 'Is Greater than or equal to', op: 3},\n            {name: 'Is Less than', op: 4},\n            {name: 'Is Less than or equal to', op: 5}\n        ],\n        dateOperators: [\n            {name: '(not set)', op: null},\n            {name: 'Equals', op: 0},\n            {name: 'Is Before', op: 4},\n            {name: 'Is After', op: 3}\n        ],\n        booleanOperators: [\n            {name: '(not set)', op: null},\n            {name: 'Equals', op: 0},\n            {name: 'Does not equal', op: 1}\n        ]\n    }\n};\n","import {isArray, isDate} from \"../../util/util\";\nimport {culture} from \"../../globalization/Localization\";\n/**\n * Provides date and time utilities.\n */\nexport class DateTime {\n\n    /**\n     * Gets a new Date that adds the specified number of days to a given Date.\n     *\n     * @param value Original date.\n     * @param days Number of days to add to the given date.\n     */\n    static addDays(value: Date, days: number): Date {\n        return new Date(value.getFullYear(), value.getMonth(), value.getDate() + days);\n    }\n    /**\n     * Gets a new Date that adds the specified number of months to a given Date.\n     *\n     * @param value Original date.\n     * @param months Number of months to add to the given date.\n     */\n    static addMonths(value: Date, months: number): Date {\n        return new Date(value.getFullYear(), value.getMonth() + months, value.getDate());\n    }\n    /**\n     * Gets a new Date that adds the specified number of years to a given Date.\n     *\n     * @param value Original date.\n     * @param years Number of years to add to the given date.\n     */\n    static addYears(value: Date, years: number): Date {\n        return new Date(value.getFullYear() + years, value.getMonth(), value.getDate());\n    }\n    /**\n     * Gets a new Date that adds the specified number of hours to a given Date.\n     *\n     * @param value Original date.\n     * @param hours Number of hours to add to the given date.\n     */\n    static addHours(value: Date, hours: number): Date {\n        return new Date(value.getFullYear(), value.getMonth(), value.getDate(), value.getHours() + hours);\n    }\n    /**\n     * Gets a new Date that adds the specified number of minutes to a given Date.\n     *\n     * @param value Original date.\n     * @param minutes Number of minutes to add to the given date.\n     */\n    static addMinutes(value: Date, minutes: number): Date {\n        return new Date(value.getFullYear(), value.getMonth(), value.getDate(), value.getHours(), value.getMinutes() + minutes);\n    }\n    /**\n     * Gets a new Date that adds the specified number of seconds to a given Date.\n     *\n     * @param value Original date.\n     * @param seconds Number of seconds to add to the given date.\n     */\n    static addSeconds(value: Date, seconds: number): Date {\n        return new Date(value.getFullYear(), value.getMonth(), value.getDate(), value.getHours(), value.getMinutes(), value.getSeconds() + seconds);\n    }\n    /**\n     * Returns true if two Date objects refer to the same date (ignoring time).\n     *\n     * @param d1 First date.\n     * @param d2 Second date.\n     */\n    static sameDate(d1: Date, d2: Date): boolean {\n        return isDate(d1) && isDate(d2) &&\n            d1.getFullYear() == d2.getFullYear() &&\n            d1.getMonth() == d2.getMonth() &&\n            d1.getDate() == d2.getDate();\n    }\n    /**\n     * Returns true if two Date objects refer to the same time (ignoring date).\n     *\n     * @param d1 First date.\n     * @param d2 Second date.\n     */\n    static sameTime(d1: Date, d2: Date): boolean {\n        return isDate(d1) && isDate(d2) &&\n            d1.getHours() == d2.getHours() &&\n            d1.getMinutes() == d2.getMinutes() &&\n            d1.getSeconds() == d2.getSeconds();\n    }\n    /**\n     * Returns true if two Date objects refer to the same date and time.\n     *\n     * @param d1 First date.\n     * @param d2 Second date.\n     */\n    static equals(d1: Date, d2: Date): boolean {\n        return isDate(d1) && isDate(d2) && d1.getTime() == d2.getTime();\n    }\n    /**\n     * Gets a Date object with the date and time set on two Date objects.\n     *\n     * @param date Date object that contains the date (day/month/year).\n     * @param time Date object that contains the time (hour:minute:second).\n     */\n    static fromDateTime(date: Date, time: Date): Date {\n        if (!date && !time) return null;\n        if (!date) date = time;\n        if (!time) time = date;\n        return new Date(\n            date.getFullYear(), date.getMonth(), date.getDate(),\n            time.getHours(), time.getMinutes(), time.getSeconds());\n    }\n    /**\n     * Converts a calendar date to a fiscal date using the current culture.\n     *\n     * @param date Calendar date.\n     * @param govt Whether to use the government or corporate fiscal year.\n     */\n    static toFiscal(date: Date, govt: boolean) {\n        const cal = culture.Globalize.calendar;\n        return isArray(cal.fiscalYearOffsets)\n            ? DateTime.addMonths(date, -cal.fiscalYearOffsets[govt ? 0 : 1])\n            : date;\n    }\n    /**\n     * Converts a fiscal year date to a calendar date using the current culture.\n     *\n     * @param date Fiscal year date.\n     * @param govt Whether to use the government or corporate fiscal year.\n     */\n    static fromFiscal(date: Date, govt: boolean) {\n        const cal = culture.Globalize.calendar;\n        return isArray(cal.fiscalYearOffsets)\n            ? DateTime.addMonths(date, +cal.fiscalYearOffsets[govt ? 0 : 1])\n            : date;\n    }\n    /**\n     * Creates a copy of a given Date object.\n     *\n     * @param date Date object to copy.\n     */\n    static clone(date: Date): Date {\n        return DateTime.fromDateTime(date, date);\n    }\n}\n","import {asDate, asNumber, asString, isDate, isString, isNumber, toFixed} from \"../util/util\";\nimport {culture} from \"./Localization\";\nimport {DateTime} from \"../common/datetime/datetime\";\n/**\n * Class that implements formatting and parsing of numbers and Dates.\n *\n * By default, @see:Globalize uses the American English culture.\n * To switch cultures, include the appropriate <b>wijmo.culture.*.js</b>\n * file after the wijmo files.\n */\nexport class Globalize {\n\n    /**\n     * Formats a number or a date.\n     *\n     * The format strings used with the @see:format function are similar to\n     * the ones used by <b>Globalize.js</b> and by the .NET Globalization\n     * library. The tables below contains links that describe the formats\n     * available:\n     *\n     * <ul>\n     * <li><a href=\"http://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx\">\n     *      Standard Numeric Format Strings</a></li>\n     * <li><a href=\"http://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx\">\n     *      Standard Date and Time Format Strings</a></li>\n     * <li><a href=\"http://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx\">\n     *      Custom Date and Time Format Strings</a></li>\n     * </ul>\n     *\n     * @param value Number or Date to format (all other types are converted to strings).\n     * @param format Format string to use when formatting numbers or dates.\n     * @param trim Whether to remove trailing zeros from numeric results.\n     * @param truncate Whether to truncate the numeric values rather than round them.\n     * @return A string representation of the given value.\n     */\n    static format(value: any, format: string, trim?: boolean, truncate?: boolean): string {\n\n        // if a format was not provided, create one\n        if (!format) {\n            if (isNumber(value)) {\n                format = value == Math.round(value) ? 'n0' : 'n2';\n            }\n            else if (isDate(value)) {\n                format = 'd';\n            }\n        }\n\n        // format numbers and dates, convert others to string\n        if (isNumber(value)) {\n            return Globalize.formatNumber(value, format, trim, truncate);\n        } else if (isDate(value)) {\n            return Globalize.formatDate(value, format);\n        } else {\n            return value != null ? value.toString() : '';\n        }\n    }\n    /**\n     * Formats a number using the current culture.\n     *\n     * The @see:formatNumber method accepts most .NET-style\n     * <a href=\"http://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx\">\n     * Standard Numeric Format Strings</a>, except for the 'e' and 'x' formats\n     * (scientific notation and hexadecimal) which are not supported.\n     *\n     * Numeric format strings takes the form <i>Axxccss</i>, where:\n     * <ul>\n     * <li>\n     *  <i>A</i> is a single case-insensitive alphabetic character called the\n     *  format specifier.</i>\n     * <li>\n     *  <i>xx</i> is an optional integer called the precision specifier.\n     *  The precision specifier affects the number of digits in the result.</li>\n     * <li>\n     *  <i>cc</i> is an optional string used to override the currency symbol\n     *  when formatting currency values. This is useful when formatting\n     *  currency values for cultures different than the current default\n     *  (for example, when formatting Euro or Yen values in applications\n     *  that use the English culture).</li>\n     * <li>\n     *  <i>ss</i> is an optional string used to scale the number. If provided,\n     *  it must consist of commas. The number is divided by 1000 for each comma\n     *  specified.</li>\n     * </ul>\n     *\n     * The following table describes the standard numeric format specifiers and\n     * displays sample output produced by each format specifier for the default\n     * culture.\n     *\n     * <b>n</b> Number: <code>formatNumber(1234.5, 'n2') => '1,234.50'</code><br/>\n     * <b>f</b> Fixed-point: <code>formatNumber(1234.5, 'f2') => '1234.50'</code><br/>\n     * <b>g</b> General (no trailing zeros): <code>formatNumber(1234.5, 'g2') => '1,234.5'</code><br/>\n     * <b>d</b> Decimal (integers): <code>formatNumber(-1234, 'd6') => '-001234'</code><br/>\n     * <b>x</b> Hexadecimal (integers): <code>formatNumber(1234, 'x6') => '0004d2'</code><br/>\n     * <b>c</b> Currency: <code>formatNumber(1234, 'c') => '$ 1,234.00'</code><br/>\n     * <b>p</b> Percent: <code>formatNumber(0.1234, 'p2') => '12.34 %'</code>\n     *\n     * The scaling specifier is especially useful when charting large values. For\n     * example, the markup below creates a chart that plots population versus GDP.\n     * The raw data expresses the population is units and the GDP in millions.\n     * The scaling specified in the axes formats causes the chart to show population\n     * in millions and GDP in trillions:\n     *\n     * <pre>&lt;wj-flex-chart\n     *   items-source=\"countriesGDP\" binding-x=\"pop\" chart-type=\"Scatter\"&gt;\n     *   &lt;wj-flex-chart-series\n     *     name=\"GDP\" binding=\"gdp\"&gt;&lt;/wj-flex-chart-series&gt;\n     *   &lt;wj-flex-chart-axis\n     *     wj-property=\"axisX\" title=\"Population (millions)\"\n     *     format=\"n0,,\"&gt;\n     *   &lt;/wj-flex-chart-axis&gt;\n     *   &lt;wj-flex-chart-axis\n     *     wj-property=\"axisY\" title=\"GDP (US$ trillions)\"\n     *     format=\"c0,,\"&gt;\n     *   &lt;/wj-flex-chart-axis&gt;\n     * &lt;/wj-flex-chart&gt;</pre>\n     *\n     * @param value Number to format.\n     * @param format .NET-style standard numeric format string (e.g. 'n2', 'c4', 'p0', 'g2', 'd2').\n     * @param trim Whether to remove trailing zeros from the result.\n     * @param truncate Whether to truncate the value rather than round it.\n     * @return A string representation of the given number.\n     */\n    static formatNumber(value: number, format: string, trim?: boolean, truncate?: boolean): string {\n        asNumber(value);\n        asString(format);\n\n        let result;\n        const m   = format ? format.match(/([a-z])(\\d*)(,*)(.*)/i) : null,\n            nf    = culture.Globalize.numberFormat,\n            f1    = m ? m[1].toLowerCase() : 'n',\n            prec  = (m && m[2]) ? parseInt(m[2]) : (f1 == 'c') ? nf.currency.decimals : value == Math.round(value) ? 0 : 2,\n            scale = (m && m[3]) ? 3 * m[3].length : 0,\n            curr  = (m && m[4]) ? m[4] : nf.currency.symbol,\n            dp    = nf['.'],\n            ts    = nf[','];\n\n        // scale (,:thousands ,,:millions ,,,:billions)\n        if (scale) {\n            value /= Math.pow(10, scale);\n        }\n\n        // d, x: integers/hexadecimal\n        if (f1 == 'd' || f1 == 'x') {\n            result = Math.round(Math.abs(value)).toString(f1 == 'd' ? 10 : 16);\n            while (result.length < prec) {\n                result = '0' + result;\n            }\n            if (value < 0) {\n                result = '-' + result;\n            }\n            if (format && format[0] == 'X') {\n                result = result.toUpperCase();\n            }\n            return result;\n        }\n\n        // p: percentage\n        if (f1 == 'p') {\n            value *= 100;\n        }\n\n        // truncate value\n        if (truncate) {\n            value = toFixed(value, prec, true);\n        }\n\n        // get result\n        result = (f1 == 'c' || f1 == 'p')\n            ? Math.abs(value).toFixed(prec)\n            : value.toFixed(prec);\n\n        // g: remove trailing zeros\n        if ((trim || f1 == 'g') && result.indexOf('.') > -1) {\n            result = result.replace(/(\\.[0-9]*?)0+$/g, '$1');\n            result = result.replace(/\\.$/, '');\n        }\n\n        // replace decimal point\n        if (dp != '.') {\n            result = result.replace('.', dp);\n        }\n\n        // n, c, p: thousand separators\n        if (ts && (f1 == 'n' || f1 == 'c' || f1 == 'p')) {\n            const idx = result.indexOf(dp),\n                  rx  = /\\B(?=(\\d\\d\\d)+(?!\\d))/g;\n            result    = idx > -1 ? result.substr(0, idx).replace(rx, ts) + result.substr(idx) : result.replace(rx, ts);\n        }\n\n        // c: currency pattern\n        if (f1 == 'c') {\n            var pat = nf.currency.pattern[value < 0 ? 0 : 1];\n            result = pat.replace('n', result).replace('$', curr);\n        }\n\n        // p: percentage pattern\n        if (f1 == 'p') {\n            var pat = nf.percent.pattern[value < 0 ? 0 : 1];\n            result = pat.replace('n', result);\n        }\n\n        // done\n        return result;\n    }\n    /**\n     * Formats a date using the current culture.\n     *\n     * The @see:format parameter contains a .NET-style\n     * <a href=\"http://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx\">Date format string</a>\n     * with the following additions:\n     * <ul>\n     * <li>\n     *  <i>Q, q</i> Calendar quarter.</li>\n     *  <i>U</i> Fiscal quarter (government).</li>\n     *  <i>u</i> Fiscal quarter (private sector).</li>\n     *  <i>EEEE, EEE, EE, E</i> Fiscal year (government).</li>\n     *  <i>eeee, eee, ee, e</i> Fiscal year (private sector).</li>\n     * </ul>\n     *\n     * For example:\n     * <code>\n     * var d = new Date(2015, 9, 1); // Oct 1, 2015\n     * console.log(wijmo.Globalize.format(d, '\"FY\"EEEE\"Q\"U') + ' (US culture)');\n     * &gt; <b>FY2016Q1 (US culture)</b>\n     * </code>\n     *\n     * @param value Number or Date to format.\n     * @param format .NET-style Date format string</a>.\n     * @return A string representation of the given date.\n     */\n    static formatDate(value: Date, format: string): string {\n        value = asDate(value);\n\n        // culture-invariant formats\n        switch (format) {\n            case 'r':\n            case 'R':\n                return value.toUTCString();\n            case 'u':\n                return value.toISOString().replace(/\\.\\d{3}/, '');\n        }\n\n        // expand pre-defined formats\n        format = Globalize._expandFormat(format);\n\n        // parse the format string and build return value\n        const parts = Globalize._parseDateFormat(format);\n        let str     = '';\n        for (let i = 0; i < parts.length; i++) {\n            str += Globalize._formatDatePart(value, format, parts[i]);\n        }\n\n        // all done\n        return str;\n    }\n    /**\n     * Parses a string into an integer.\n     *\n     * @param value String to convert to an integer.\n     * @param format Format to use when parsing the number.\n     * @return The integer represented by the given string,\n     * or <b>NaN</b> if the string cannot be parsed into an integer.\n     */\n    static parseInt(value: string, format?: string): number {\n        return Math.round(Globalize.parseFloat(value, format));\n    }\n    /**\n     * Parses a string into a floating point number.\n     *\n     * @param value String to convert to a number.\n     * @param format Format to use when parsing the number.\n     * @return The floating point number represented by the given string,\n     * or <b>NaN</b> if the string cannot be parsed into a floating point number.\n     */\n    static parseFloat(value: string, format?: string): number {\n        const neg   = value.indexOf('-') > -1 || (value.indexOf('(') > -1 && value.indexOf(')') > -1) ? -1 : +1,\n              pct   = value.indexOf('%') > -1 ? .01 : 1,\n              m     = format ? format.match(/,+/) : null,\n              scale = m ? m[0].length * 3 : 0;\n\n        // hex\n        if (format && (format[0] == 'x' || format[0] == 'X')) {\n            value = value.replace(/[^0-9a-f]+.*$/gi, ''); // truncate at first invalid char\n            return parseInt(value, 16) * neg * pct * Math.pow(10, scale);\n        }\n\n        // decimal\n        var dp = culture.Globalize.numberFormat['.'],\n            rx = new RegExp('[^\\\\d\\\\' + dp + ']', 'g'),\n            value = value.replace(rx, '').replace(dp, '.'); // remove non-digits, replace decimal point\n        return parseFloat(value) * neg * pct * Math.pow(10, scale);\n    }\n    /**\n     * Parses a string into a Date.\n     *\n     * @param value String to convert to a Date.\n     * @param format Format string used to parse the date.\n     * @return The date represented by the given string, or null if the string\n     * cannot be parsed into a Date.\n     */\n    static parseDate(value: string, format: string): Date {\n\n        // make sure we have a value\n        value = asString(value);\n        if (!value) {\n            return null;\n        }\n\n        // culture-invariant formats\n        if (format == 'u') {\n            return new Date(value);\n        }\n\n        // parse using RFC 3339 pattern ([yyyy-MM-dd] [hh:mm[:ss]])\n        var d: Date;\n        if (format == 'R' || format == 'r') {\n            const rx    = /(([0-9]+)\\-([0-9]+)\\-([0-9]+))?\\s?(([0-9]+):([0-9]+)(:([0-9]+))?)?/,\n                  match = value.match(rx);\n            if (match[1] || match[5]) {\n                var d = match[1] // parse date\n                    ? new Date(parseInt(match[2]), parseInt(match[3]) - 1, parseInt(match[4]))\n                    : new Date();\n                if (match[5]) { // parse time\n                    d.setHours(parseInt(match[6]));\n                    d.setMinutes(parseInt(match[7]));\n                    d.setSeconds(match[8] ? parseInt(match[9]) : 0);\n                }\n            } else {\n                d = new Date(value);\n            }\n            return !isNaN(d.getTime()) ? d : null;\n        }\n\n        // expand the format\n        format = Globalize._expandFormat(format ? format : 'd');\n\n        // get format parts and data parts\n        //\n        // cjk: chars, http://www.rikai.com/library/kanjitables/kanji_codes.unicode.shtml\n        // rxf: format (no dots in strings: 'mm.dd.yyyy' => ['mm', 'dd', 'yyyy']).\n        // rxv: value (dots OK in strings: 'A.D' => 'A.D', but not by themselves)\n        const cal                                                 = culture.Globalize.calendar,\n              cjk                                                 = Globalize._CJK,\n              rxv                                                 = new RegExp('(\\\\' + cal['/'] + ')|(\\\\' + cal[':'] + ')|' + // date/time separators\n                  '(\\\\d+)|' + // digits\n                  '([' + cjk + '\\\\.]{2,})|' + // strings with dots\n                  '([' + cjk + ']+)', // strings with no dots\n                  'gi'\n              );\n        let vparts                                                = value.match(rxv),\n              fparts = Globalize._parseDateFormat(format), offset = 0,\n              year                                                = -1, month = 0, day = 1, hour = 0, min = 0;\n        const tzm                                                 = 0;\n        let sec                                                   = 0, ms                                           = 0, era = -1,\n              hasDayName, hasDay, hasQuarter, hasMonth, fiscalFmt;\n\n        // basic validation (TFS 81465, 128359)\n        if (!vparts || !vparts.length || !fparts || !fparts.length) {\n            return null;\n        }\n\n        // parse each element\n        for (let i = 0; i < fparts.length && vparts; i++) {\n            const vpi  = i - offset;\n            let pval   = (vpi > -1 && vpi < vparts.length) ? vparts[vpi] : '';\n            const plen = fparts[i].length;\n            switch (fparts[i]) {\n\n                // ** year\n                case 'EEEE': case 'EEE': case 'EE': case 'E': // fiscal (govt)\n                case 'eeee': case 'eee': case 'ee': case 'e': // fiscal (corp)\n                fiscalFmt = fparts[i];\n                // ** fall through **\n                case 'yyyy': case 'yyy': case 'yy': case 'y': // calendar\n                if (plen > 1 && pval.length > plen) {\n                    vparts[vpi] = pval.substr(plen);\n                    pval = pval.substr(0, plen);\n                    offset++;\n                }\n                year = parseInt(pval);\n                break;\n\n                // ** month\n                case 'MMMM': case 'MMM':\n                hasMonth = true;\n                const monthName = pval.toLowerCase();\n                month = -1;\n                for (let j = 0; j < 12; j++) {\n                    if (cal.months[j].toLowerCase().indexOf(monthName) == 0) {\n                        month = j;\n                        break;\n                    }\n                }\n                break;\n                case 'MM': case 'M':\n                if (plen > 1 && pval.length > plen) {\n                    vparts[vpi] = pval.substr(plen);\n                    pval = pval.substr(0, plen);\n                    offset++;\n                }\n                month = parseInt(pval) - 1;\n                hasMonth = true;\n                break;\n\n                // ** day\n                case 'dddd':\n                case 'ddd':\n                    hasDayName = true;\n                    break; // skip day names\n                case 'dd': case 'd':\n                if (plen > 1 && pval.length > plen) {\n                    vparts[vpi] = pval.substr(plen);\n                    pval = pval.substr(0, plen);\n                    offset++;\n                }\n                day = parseInt(pval);\n                hasDay = true;\n                break;\n\n                // ** hour\n                case 'hh': case 'h':\n                if (plen > 1 && pval.length > plen) {\n                    vparts[vpi] = pval.substr(plen);\n                    pval = pval.substr(0, plen);\n                    offset++;\n                }\n                hour = parseInt(pval);\n                hour = hour == 12 ? 0 : hour; // 0-12, 12 == midnight\n                break;\n                case 'HH':\n                    if (plen > 1 && pval.length > plen) {\n                        vparts[vpi] = pval.substr(plen);\n                        pval = pval.substr(0, plen);\n                        offset++;\n                    }\n                    hour = parseInt(pval); // 0-24\n                    break;\n                case 'H':\n                    hour = parseInt(pval); // 0-24\n                    break;\n\n                // ** minute\n                case 'mm': case 'm':\n                if (plen > 1 && pval.length > plen) {\n                    vparts[vpi] = pval.substr(plen);\n                    pval = pval.substr(0, plen);\n                    offset++;\n                }\n                min = parseInt(pval);\n                break;\n\n                // ** second\n                case 'ss': case 's':\n                if (plen > 1 && pval.length > plen) {\n                    vparts[vpi] = pval.substr(plen);\n                    pval = pval.substr(0, plen);\n                    offset++;\n                }\n                sec = parseInt(pval);\n                break;\n\n                // ** millisecond\n                case 'fffffff': case 'FFFFFFF':\n                case 'ffffff': case 'FFFFFF':\n                case 'fffff': case 'FFFFF':\n                case 'ffff': case 'FFFF':\n                case 'fff': case 'FFF':\n                case 'ff': case 'FF':\n                case 'f': case 'F':\n                ms = parseInt(pval) / Math.pow(10, plen - 3);\n                break;\n\n                // ** am/pm\n                case 'tt': case 't':\n                pval = pval.toUpperCase();\n                if ((cal.pm[0] && pval == cal.pm[0] && hour < 12) ||\n                    (cal.pm[1] && pval == cal.pm[1] && hour < 12)) {\n                    hour += 12;\n                }\n                break;\n\n                // ** quarter\n                case 'q': case 'Q': case 'u': case 'U':\n                hasQuarter = true;\n                break;\n\n                // ** era\n                case 'ggg': case 'gg': case 'g':\n                era = cal.eras.length > 1 ? Globalize._getEra(pval, cal) : -1;\n                break;\n\n                // ** localized separators (TFS 131320)\n                case cal['/']:\n                case cal[':']:\n                    if (pval && pval != fparts[i]) {\n                        return null; // present and wrong separator\n                    }\n                    break;\n\n                // ** time zone (skip )\n                case 'K':\n                    break;\n\n                // ** all else: if not a match, keep using the same pval\n                default:\n                    if (Globalize._unquote(fparts[i]) != pval) {\n                        offset++;\n                    }\n                    break;\n            }\n        }\n\n        // allow dates with no times even if the format requires times\n        if (hasMonth && hasDay) {\n            if (isNaN(hour)) hour = 0;\n            if (isNaN(min)) min = 0;\n            if (isNaN(sec)) sec = 0;\n        }\n\n        // basic validation\n        if (month < 0 || month > 11 || isNaN(month) ||\n            day < 0 || day > 31 || isNaN(day) ||\n            hour < 0 || hour > 24 || isNaN(hour) ||\n            min < 0 || min > 60 || isNaN(min) ||\n            sec < 0 || sec > 60 || isNaN(sec)) {\n            return null;\n        }\n\n        // convert fiscal year/month to calendar\n        if (fiscalFmt) {\n            if (!hasMonth) { // need year and month to convert fiscal to calendar\n                return null;\n            }\n            d = new Date(year, month);\n            d = DateTime.fromFiscal(d, fiscalFmt[0] == 'E');\n            year = d.getFullYear();\n            month = d.getMonth();\n        }\n\n        // if the day name was specified but the day wasn't, the result is meaningless\n        if (hasDayName && !hasDay) {\n            return null;\n        }\n\n        // if the quarter was specified but the month wasn't, the result is meaningless\n        if (hasQuarter && !hasMonth) {\n            return null;\n        }\n\n        // if year not found, use current (as Globalize.js)\n        if (year < 0) {\n            year = new Date().getFullYear();\n        }\n\n        // apply era offset if any, or adjust for two-digit years (see Calendar.TwoDigitYearMax)\n        if (era > -1) {\n            year = year + cal.eras[era].start.getFullYear() - 1;\n        } else if (year < 100) {\n            year += year >= 30 ? 1900 : 2000;\n        }\n\n        // return result\n        d = new Date(year, month, day, hour, min + tzm, sec, ms);\n        return isNaN(d.getTime()) ? null : d;\n    }\n\n    // Chinese/Japanese/Korean characters\n    // http://www.rikai.com/library/kanjitables/kanji_codes.unicode.shtml\n    // NOTE: using 'replace' to keep minifier from switching the escaped Unicode chars into real Unicode.\n    static _CJK = 'a-zu00C0-u017Fu3000-u30ffu4e00-u9faf'.replace(/u/g, '\\\\u');\n\n    /**\n     * Gets the first day of the week according to the current culture.\n     *\n     * The value returned is between zero (Sunday) and six (Saturday).\n     */\n    static getFirstDayOfWeek(): number {\n        const fdw = culture.Globalize.calendar.firstDay;\n        return fdw ? fdw : 0;\n    }\n    /**\n     * Gets the symbol used as a decimal separator in numbers.\n     */\n    static getNumberDecimalSeparator(): string {\n        const ndc = culture.Globalize.numberFormat['.'];\n        return ndc ? ndc : '.';\n    }\n\n    // ** implementation\n\n    // unquotes a string\n    private static _unquote(s: string): string {\n        if (s.length > 1 && s[0] == s[s.length - 1]) {\n            if (s[0] == '\\'' || s[0] == '\\\"') {\n                return s.substr(1, s.length - 2);\n            }\n        }\n        return s;\n    }\n\n    // parse a date format string into its parts\n    private static _dateFomatParts = {};\n    private static _parseDateFormat(format: string): string[] {\n\n        // use cache whenever possible\n        if (format in Globalize._dateFomatParts) {\n            return Globalize._dateFomatParts[format];\n        }\n\n        // parse the format\n        const parts = [],\n              str   = '';\n        let start, end;\n        for (start = 0; start > -1 && start < format.length; start++) {\n            const c = format[start];\n            if (c == '\\'' || c == '\"') { // handle quoted parts\n                end = format.indexOf(c, start + 1); // keep quotes to distinguish from regular date parts\n                if (end > -1) {\n                    parts.push(format.substring(start, end + 1));\n                    start = end;\n                    continue;\n                }\n            }\n            end = start + 1;\n            for (; end < format.length; end++) {\n                if (format[end] != c) break;\n            }\n            parts.push(format.substring(start, end));\n            start = end - 1;\n        }\n\n        // cache and return\n        Globalize._dateFomatParts[format] = parts;\n        return parts;\n    }\n\n    // format a date part into a string\n    private static _formatDatePart(d: Date, format: string, part: string): string {\n        const cal  = culture.Globalize.calendar;\n        let era    = 0, year = 0, ff = 0, fd;\n        const plen = part.length;\n        switch (part) {\n\n            // ** year\n            case 'yyyy': case 'yyy': case 'yy': case 'y': // calendar year\n            case 'EEEE': case 'EEE': case 'EE': case 'E': // fiscal year (govt)\n            case 'eeee': case 'eee': case 'ee': case 'e': // fiscal year (corporate)\n\n            // get the year (calendar or fiscal)\n            fd = part[0] == 'E' ? DateTime.toFiscal(d, true) :\n                part[0] == 'e' ? DateTime.toFiscal(d, false) :\n                    d;\n            year = fd.getFullYear();\n\n            // if the calendar has multiple eras and the format specifies an era,\n            // then adjust the year to count from the start of the era.\n            // if the format has no era, then use the regular (Western) year.\n            if (cal.eras.length > 1 && format.indexOf('g') > -1) {\n                era = Globalize._getEra(d, cal);\n                if (era > -1) {\n                    year = year - cal.eras[era].start.getFullYear() + 1;\n                }\n            }\n\n            // adjust number of digits\n            return Globalize._zeroPad(year, 4).substr(4 - part.length);\n\n            // ** month\n            case 'MMMM':\n                return cal.months[d.getMonth()];\n            case 'MMM':\n                return cal.monthsAbbr[d.getMonth()];\n            case 'MM': case 'M':\n            return Globalize._zeroPad(d.getMonth() + 1, plen);\n\n            // ** day\n            case 'dddd':\n                return cal.days[d.getDay()];\n            case 'ddd':\n                return cal.daysAbbr[d.getDay()];\n            case 'dd':\n                return Globalize._zeroPad(d.getDate(), 2);\n            case 'd':\n                return d.getDate().toString();\n\n            // ** hour\n            case 'hh': case 'h':\n            return Globalize._zeroPad(Globalize._h12(d), plen);\n            case 'HH': case 'H':\n            return Globalize._zeroPad(d.getHours(), plen);\n\n            // ** minute\n            case 'mm': case 'm':\n            return Globalize._zeroPad(d.getMinutes(), plen);\n\n            // ** second\n            case 'ss': case 's':\n            return Globalize._zeroPad(d.getSeconds(), plen);\n\n            // ** millisecond\n            case 'fffffff': case 'FFFFFFF':\n            case 'ffffff': case 'FFFFFF':\n            case 'fffff': case 'FFFFF':\n            case 'ffff': case 'FFFF':\n            case 'fff': case 'FFF':\n            case 'ff': case 'FF':\n            case 'f': case 'F':\n            ff = d.getMilliseconds() * Math.pow(10, plen - 3);\n            return part[0] == 'f' ? Globalize._zeroPad(ff, plen) : ff.toFixed(0);\n\n            // ** am/pm\n            case 'tt':\n                return d.getHours() < 12 ? cal.am[0] : cal.pm[0];\n            case 't':\n                return d.getHours() < 12 ? cal.am[1] : cal.pm[1];\n\n            // ** quarter\n            case 'q': case 'Q': // calendar\n            return (Math.floor(d.getMonth() / 3) + 1).toString();\n            case 'u': case 'U': // quarter (U: govt; u: corp)\n            fd = DateTime.toFiscal(d, part == 'U');\n            return (Math.floor(fd.getMonth() / 3) + 1).toString();\n\n            // ** era\n            case 'ggg': case 'gg': case 'g':\n            if (cal.eras.length > 1) {\n                era = Globalize._getEra(d, cal);\n                if (era > -1) {\n                    return part == 'ggg' ? cal.eras[era].name : part == 'gg' ? cal.eras[era].name[0] : cal.eras[era].symbol;\n                }\n            }\n            return cal.eras[0];\n\n            // ** localized separators\n            case ':':\n            case '/':\n                return cal[part];\n\n            // ** time zone\n            case 'K':\n                const tz = d.toString().match(/(\\+|\\-)(\\d{2})(\\d{2})/);\n                return tz ? tz[1] + tz[2] + tz[3] : '';\n        }\n\n        // unquote part\n        if (plen > 1 && part[0] == part[plen - 1]) {\n            if (part[0] == '\\\"' || part[0] == '\\'') {\n                return part.substr(1, plen - 2);\n            }\n        }\n\n        // return part\n        return part;\n    }\n\n    // get a date's era (used only in Japanese locales)\n    private static _getEra(d: any, cal: any): number {\n        if (isDate(d)) { // find era by start date\n            for (var i = 0; i < cal.eras.length; i++) {\n                if (d >= cal.eras[i].start) {\n                    return i;\n                }\n            }\n        } else if (isString(d)) { // find era by name or symbol\n            for (var i = 0; i < cal.eras.length; i++) {\n                if (cal.eras[i].name) {\n                    if (cal.eras[i].name.indexOf(d) == 0 || cal.eras[i].symbol.indexOf(d) == 0) {\n                        return i;\n                    }\n                }\n            }\n        }\n        return -1; // not found\n    }\n\n    // expand date pattern into full date format\n    private static _expandFormat(format: string): string {\n        const fmt = culture.Globalize.calendar.patterns[format];\n        return fmt ? fmt : format;\n    }\n\n    // format a number with leading zeros\n    private static _zeroPad(num: number, places: number) {\n        const n    = num.toFixed(0),\n              zero = places - n.length + 1;\n        return zero > 0 ? Array(zero).join('0') + n : n;\n    }\n\n    // format an hour to 12 or 24 hour base depending on the calendar\n    private static _h12(d: Date) {\n        const cal = culture.Globalize.calendar;\n        let h     = d.getHours();\n        if (cal.am && cal.am[0]) {\n            h = h % 12;\n            if (h == 0) h = 12;\n        }\n        return h;\n    }\n}\n","import {assert} from \"./assert\";\nimport {isNumber} from \"../lang/is-number\";\n/**\n * Asserts that a value is a number.\n *\n * @param value Value supposed to be numeric.\n * @param nullOK Whether null values are acceptable.\n * @param positive Whether to accept only positive numeric values.\n * @return The number passed in.\n */\nexport function asNumber(value: number, nullOK: boolean = false, positive: boolean = false): number {\n    assert((nullOK && value == null) || isNumber(value), 'Number expected.');\n    if (positive && value && value < 0) {\n        debugger;\n        throw new Error('Positive number expected.');\n    }\n    return value;\n}\n","/**\n * Rounds or truncates a number to a specified precision.\n *\n * @param value Value to round or truncate.\n * @param prec Number of decimal digits for the result.\n * @param truncate Whether to truncate or round the original value.\n */\nexport function toFixed(value: number, prec: number, truncate: boolean): number {\n    if (truncate) {\n        var s = value.toString(),\n            decPos = s.indexOf('.');\n        if (decPos > -1) {\n            s = s.substr(0, decPos + 1 + prec);\n            value = parseFloat(s);\n        }\n    } else {\n        var s = value.toFixed(prec);\n        value = parseFloat(s);\n    }\n    return value;\n}","import {assert} from \"./assert\";\nimport {isDate} from \"../lang/is-date\";\n/**\n * Asserts that a value is a Date.\n *\n * @param value Value supposed to be a Date.\n * @param nullOK Whether null values are acceptable.\n * @return The Date passed in.\n */\nexport function asDate(value: Date, nullOK = false): Date {\n    assert((nullOK && value == null) || isDate(value), 'Date expected.');\n    return value;\n}\n","import {Size} from \"./../core/index\";\n//import {EventArgs} from \"../eventArgs/EventArgs\";\n//import {Event} from \"../event/Event\";\nimport {CollectionView} from \"../collections-light/CollectionView\";\nimport {\n    assert,\n    getElement,\n    addClass,\n    createElement,\n    asType,\n    contains,\n    asBoolean,\n    enable,\n    copy,\n    toggleClass\n} from \"../core\";\nimport {isPresent} from  '../core';\n\n\n/**\n * Base class for all Wijmo controls.\n *\n * The @see:Control class handles the association between DOM elements and the\n * actual control. Use the @see:hostElement property to get the DOM element\n * that is hosting a control, or the @see:getControl method to get the control\n * hosted in a given DOM element.\n *\n * The @see:Control class also provides a common pattern for invalidating and\n * refreshing controls, for updating the control layout when its size changes,\n * and for handling the HTML templates that define the control structure.\n */\nexport class Control {\n    private static _DATA_KEY = 'wj-Control';    // key used to store control reference in host element\n    private static _REFRESH_INTERVAL = 10;      // interval between invalidation and refresh\n    private static _wme: HTMLElement;           // watermark element\n    static _touching: boolean;                  // the current event is a touch event\n\n    private _focus = false;                     // whether the control currently contains the focus\n    private _updating = 0;                      // update count (no refreshes while > 0)\n    private _fullUpdate = false;                // in case there are multiple calls to invalidate(x)\n    private _toInv: number;                     // invalidation timeOut\n    private _szCtl: Size;                       // current control size\n    private _e: HTMLElement;                    // host element\n    private _orgOuter: string;                  // host element's original outerHTML\n    private _orgInner: string;                  // host element's original innerHTML\n    private _listeners;                         // list of event listeners attached to this control\n    _orgTag: string;                            // host element's original tag (if not DIV)\n    _orgAtts: NamedNodeMap;                     // host element's original attributes\n\n    /**\n     * Initializes a new instance of a @see:Control and attaches it to a DOM element.\n     *\n     * @param element The DOM element that will host the control, or a selector for the host element (e.g. '#theCtrl').\n     * @param options JavaScript object containing initialization data for the control.\n     * @param invalidateOnResize Whether the control should be invalidated when it is resized.\n     */\n    constructor(element: any, options = null, invalidateOnResize = false) {\n\tconsole.log(\"control_constructor\");\n        // get the host element\n        let host = getElement(element);\n\t\t  this._e = host;\n        host[Control._DATA_KEY] = this;\n\t\t const hd = this._handleDisabled.bind(this);\n this.addEventListener(host, 'click', hd, true);\n    }\n\n      // suppress mouse and keyboard events if the control is disabled\n    private _handleDisabled(e: any) {\n        if (this.disabled) {\n            e.preventDefault();\n            e.stopPropagation();\n            e.stopImmediatePropagation();\n        }\n    }\n\t /**\n     * Gets or sets whether the control is disabled.\n     *\n     * Disabled controls cannot get mouse or keyboard events.\n     */\n    get disabled(): boolean {\n        return this._e && this._e.getAttribute('disabled') != null;\n    }\n    set disabled(value: boolean) {\n        value = asBoolean(value, true);\n        if (value != this.disabled) {\n            enable(this._e, !value);\n        }\n    }\n\t\n\t addEventListener(target: EventTarget, type: string, fn: any, capture = false) {\n            if (target) {\n                target.addEventListener(type, fn, capture);\n                if (this._listeners == null) {\n                    this._listeners = [];\n                }\n                this._listeners.push({ target: target, type: type, fn: fn, capture: capture });\n            }\n        }\n    /**\n     * Applies the template to a new instance of a control, and returns the root element.\n     *\n     * This method should be called by constructors of templated controls.\n     * It is responsible for binding the template parts to the\n     * corresponding control members.\n     *\n     * For example, the code below applies a template to an instance\n     * of an @see:InputNumber control. The template must contain elements\n     * with the 'wj-part' attribute set to 'input', 'btn-inc', and 'btn-dec'.\n     * The control members '_tbx', '_btnUp', and '_btnDn' will be assigned\n     * references to these elements.\n     *\n     * <pre>this.applyTemplate('wj-control wj-inputnumber', template, {\n         *   _tbx: 'input',\n         *   _btnUp: 'btn-inc',\n         *   _btnDn: 'btn-dec'\n         * }, 'input');</pre>\n     *\n     * @param classNames Names of classes to add to the control's host element.\n     * @param template An HTML string that defines the control template.\n     * @param parts A dictionary of part variables and their names.\n     * @param namePart Name of the part to be named after the host element. This\n     * determines how the control submits data when used in forms.\n     */\n    applyTemplate(classNames: string, template: string, parts: Object, namePart?: string): HTMLElement {\n\t\tconsole.log(\"apply_template_start\");\n        const host = this._e;\n\n        // apply standard classes to host element\n        if (classNames) {\n            addClass(host, classNames);\n        }\n\n        // convert string into HTML template and append to host\n        let tpl = null;\n        if (template) {\n            tpl = createElement(template);\n            tpl = host.appendChild(tpl);\n        }\n\n        // make sure the control can get the focus\n        // this is a little tricky:\n        // - Chrome won't give divs the focus unless we set tabIndex to something > -1\n        // - But if we do set it and the control contains input elements, the back-tab key won't work\n        // so we set the tabIndex to -1 or zero depending on whether the control contains input elements.\n        // http://wijmo.com/topic/shift-tab-not-working-for-input-controls-in-ff-and-chrome/, TFS 123457\n        if (host && !host.getAttribute('tabindex')) {\n            host.tabIndex = host.querySelector('input') ? -1 : 0;\n        }\n\n        // bind control variables to template parts\n        if (parts) {\n            for (let part in parts) {\n                const wjPart = parts[part];\n                this[part]   = tpl.querySelector('[wj-part=\"' + wjPart + '\"]');\n\n                // look in the root as well (querySelector doesn't...)\n                if (this[part] == null && tpl.getAttribute('wj-part') == wjPart) {\n                    this[part] = tpl;\n                }\n\n                // make sure we found the part\n                if (this[part] == null) {\n                    throw 'Missing template part: \"' + wjPart + '\"';\n                }\n\n                // copy/move attributes from host to input element\n                if (wjPart == namePart) {\n\n                    // copy parent element's name attribute to the namePart element\n                    // (to send data when submitting forms).\n                    let att = host.attributes['name'];\n                    if (att && att.value) {\n                        this[part].setAttribute('name', att.value);\n                    }\n\n                    // transfer access key\n                    att = host.attributes['accesskey'];\n                    if (att && att.value) {\n                        this[part].setAttribute('accesskey', att.value);\n                        host.removeAttribute('accesskey');\n                    }\n                }\n            }\n        }\n\n        // return template\n\t\tconsole.log(\"apply_template_finish\");\n        return tpl;\n    }\n    /**\n     * Gets the HTML template used to create instances of the control.\n     *\n     * This method traverses up the class hierarchy to find the nearest ancestor that\n     * specifies a control template. For example, if you specify a prototype for the\n     * @see:ComboBox control, it will override the template defined by the @see:DropDown\n     * base class.\n     */\n    getTemplate(): string {\n        for (let p = Object.getPrototypeOf(this); p; p = Object.getPrototypeOf(p)) {\n\n            const tpl = \"sssss\";\n\n        }\n\n        return null;\n    }\n\t  static getControl(element: any): Control {\n        const e = getElement(element);\n        return e ? asType(e[Control._DATA_KEY], Control, true) : null;\n    }\n}\n","import {assert} from \"./assert\";\nimport {isBoolean} from \"../lang/is-boolean\";\n/**\n * Asserts that a value is a Boolean.\n *\n * @param value Value supposed to be Boolean.\n * @param nullOK Whether null values are acceptable.\n * @return The Boolean passed in.\n */\nexport function asBoolean(value: boolean, nullOK = false): boolean {\n    assert((nullOK && value == null) || isBoolean(value), 'Boolean expected.');\n    return value;\n}\n","\nexport function isBoolean(value: any): boolean {\n    return typeof (value) == 'boolean';\n}\n","import {toggleClass} from \"./toggle-class\";\n\n/**\n * Enables or disables an element.\n *\n * @param e Element to enable or disable.\n * @param enable Whether to enable or disable the element.\n */\nexport function enable(e: HTMLElement, enable: boolean) {\n    if (enable) {\n        e.removeAttribute('disabled');\n    } else {\n        e.setAttribute('disabled', 'true');\n    }\n    toggleClass(e, 'wj-state-disabled', !enable);\n}\n","/**\n * Creates an element from an HTML string.\n *\n * @param html HTML fragment to convert into an HTMLElement.\n * @return The new element.\n */\nexport function createElement(html: string) : HTMLElement {\n    const div     = document.createElement('div');\n    div.innerHTML = html;\n    return <HTMLElement>div.removeChild(div.firstChild);\n}\n","//import {Color} from '../../core';\nimport {Control} from '../Control'\n//import {showPopup, hidePopup} from '../../core/popup'\n//import {setSelectionRange} from  '../../core';\n//import {CancelEventArgs} from \"../../eventArgs/CancelEventArgs\";\n//import {asBoolean} from  '../../core';\n//import {EventArgs} from \"../../eventArgs/EventArgs\";\n//import {contains} from '../../core';\n//import {Key} from \"../../enum/Key\";\n//import {Event} from \"../../event/Event\"\n\n\n/**\n * DropDown control (abstract).\n *\n * Contains an input element and a button used to show or hide the drop-down.\n *\n * Derived classes must override the _createDropDown method to create whatever\n * editor they want to show in the drop down area (a list of items, a calendar,\n * a color editor, etc).\n */\nexport class DropDown extends Control {\n\n    // child elements\n    _tbx: HTMLInputElement;\n    _elRef: HTMLElement;\n    _btn: HTMLElement;\n    _dropDown: HTMLElement;\n\n    // property storage\n    _showBtn    = true;\n    _autoExpand = true;\n\n    // private stuff\n    _oldText: string;\n\n    /**\n     * Gets or sets the template used to instantiate @see:DropDown controls.\n     */\n    static controlTemplate = '<div style=\"position:relative\" class=\"wj-template\">' +\n        '<div class=\"wj-input\">' +\n        '<div class=\"wj-input-group wj-input-btn-visible\">' +\n        '<input wj-part=\"input\" type=\"text\" class=\"wj-form-control\" />' +\n        '<span wj-part=\"btn\" class=\"wj-input-group-btn\" tabindex=\"-1\">' +\n        '<button class=\"wj-btn wj-btn-default\" type=\"button\" tabindex=\"-1\">' +\n        '<span class=\"wj-glyph-down\"></span>' +\n        '</button>' +\n        '</span>' +\n        '</div>' +\n        '</div>' +\n        '<div wj-part=\"dropdown\" class=\"wj-content wj-dropdown-panel\" ' +\n        'style=\"display:none;position:absolute;z-index:100;width:auto\">' +\n        '</div>' +\n        '</div>';\n\n    /**\n     * Initializes a new instance of a @see:DropDown control.\n     *\n     * @param element The DOM element that hosts the control, or a selector for the host element (e.g. '#theCtrl').\n     * @param options The JavaScript object containing initialization data for the control.\n     */\n    constructor(element: any, options?) {\n        super(element,  true);\n\t\tconsole.log(\"drop_down_constructor_start\");\n        // instantiate and apply template\n        const tpl =  '<div style=\"position:relative\" class=\"wj-template\">' +\n        '<div class=\"wj-input\">' +\n        '<div class=\"wj-input-group wj-input-btn-visible\">' +\n        '<input wj-part=\"input\" type=\"text\" class=\"wj-form-control\" />' +\n        '<span wj-part=\"btn\" class=\"wj-input-group-btn\" tabindex=\"-1\">' +\n        '<button class=\"wj-btn wj-btn-default\" type=\"button\" tabindex=\"-1\">' +\n        '<span class=\"wj-glyph-down\"></span>' +\n        '</button>' +\n        '</span>' +\n        '</div>' +\n        '</div>' +\n        '<div wj-part=\"dropdown\" class=\"wj-content wj-dropdown-panel\" ' +\n        'style=\"display:none;position:absolute;z-index:100;width:auto\">' +\n        '</div>' +\n        '</div>';\n        this.applyTemplate(\n            'wj-control wj-dropdown wj-content', tpl, {\n                _tbx     : 'input',\n                _btn     : 'btn',\n                _dropDown: 'dropdown'\n            }, 'input'\n        );\n\n        // set reference element (used for positioning the drop-down)\n        this._elRef = this._tbx;\n\n        // disable autocomplete (important for mobile browsers including Chrome/Android)\n        this._tbx.autocomplete = 'off';\n\n        // create drop-down element, update button display\n        //this._createDropDown();\n        //this._updateBtn();\n\n        // update focus state when the drop-down loses focus\n        \n\n       console.log(\"drop_down_constructor_finish\");\n    }\n\n   \n}\n"],"names":["ClarityModule","forChild","ngModule","providers","isArray","value","Array","isDate","Date","isNaN","valueOf","assert","condition","msg","Error","isNumber","isString","asString","nullOK","asType","type","tryCast$1","isFunction","implementsInterface","tryCast","hasClass","e","className","getAttribute","rx","RegExp","test","addClass","setAttribute","cn","toggleClass","addOrRemove","removeClass","replace","getElement","selector","HTMLElement","document","querySelector","jquery","decorators","NgModule","args","imports","CommonModule","FormsModule","declarations","exports","ctorParameters","culture","Globalize","numberFormat","NumberDecimalSeparator","NumberGroupSeparator","CurrencySymbol",".",",","percent","pattern","currency","decimals","symbol","dateTimeFormat","TimeSeparator","DateSeparator","/",":","calendar","firstDay","days","daysAbbr","months","monthsAbbr","am","pm","eras","patterns","d","D","f","F","t","T","M","m","Y","y","g","G","s","o","O","U","fiscalYearOffsets","MultiSelect","itemsSelected","FlexGrid","groupHeaderFormat","FlexGridFilter","ascending","descending","apply","clear","conditions","values","search","selectAll","null","header","and","or","stringOperators","name","op","numberOperators","dateOperators","booleanOperators","DateTime","addDays","getFullYear","getMonth","getDate","addMonths","addYears","years","addHours","hours","getHours","addMinutes","minutes","getMinutes","addSeconds","seconds","getSeconds","sameDate","d1","d2","sameTime","equals","getTime","fromDateTime","date","time","toFiscal","govt","cal","fromFiscal","clone","format","trim","truncate","Math","round","formatNumber","formatDate","toString","result","asNumber","positive","match","nf","f1","toLowerCase","prec","parseInt","scale","length","curr","dp","ts","pow","abs","toUpperCase","toFixed","decPos","indexOf","substr","parseFloat","idx","asDate","toUTCString","toISOString","_expandFormat","parts","_parseDateFormat","str","i","_formatDatePart","neg","pct","parseDate","setHours","setMinutes","setSeconds","hasDayName","hasDay","hasQuarter","hasMonth","fiscalFmt","cjk","_CJK","rxv","vparts","fparts","offset","year","month","day","hour","min","sec","ms","era","vpi","pval","plen","monthName","j","_getEra","_unquote","start","getFirstDayOfWeek","fdw","getNumberDecimalSeparator","ndc","_dateFomatParts","end","c","push","substring","part","fd","ff","_zeroPad","getDay","_h12","getMilliseconds","floor","tz","fmt","num","places","n","zero","join","h","Control","element","options","invalidateOnResize","this","_focus","_updating","_fullUpdate","console","log","host","hd","_e","_DATA_KEY","_handleDisabled","bind","addEventListener","prototype","disabled","preventDefault","stopPropagation","stopImmediatePropagation","Object","defineProperty","get","set","asBoolean","isBoolean","enable","removeAttribute","target","fn","capture","_listeners","applyTemplate","classNames","template","namePart","tpl","createElement","html","div","innerHTML","removeChild","firstChild","appendChild","tabIndex","wjPart","att","attributes","getTemplate","getControl","_REFRESH_INTERVAL","DropDown","_super","_this","call","_showBtn","_autoExpand","_tbx","_btn","_dropDown","_elRef","autocomplete","__extends","controlTemplate"],"mappings":"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"}
