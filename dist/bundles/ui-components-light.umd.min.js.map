{"version":3,"file":"ui-components-light.umd.min.js","sources":["~/ui-components-light/src/clarity-light/clarity.module.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/lang/is-array.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/lang/is-date.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/lang/is-function.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/asserts/assert.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/lang/is-number.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/asserts/asFunction.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/asserts/asNumber.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/asserts/asBoolean.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/lang/is-boolean.ts","~/ui-components-light/src/clarity-light/wigfrid-light/collections-light/CollectionView.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/lang/is-string.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/asserts/asString.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/asserts/asType.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/common/global.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/dom/has-class.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/dom/add-class.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/dom/contains.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/dom/toggle-class.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/dom/remove-class.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/dom/get-element.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/globalization/Localization.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/common/datetime/datetime.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/globalization/Globalize.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/math/to-fixed.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/asserts/asDate.ts","~/ui-components-light/src/clarity-light/wigfrid-light/event/EventHandler.ts","~/ui-components-light/src/clarity-light/wigfrid-light/eventArgs/EventArgs.ts","~/ui-components-light/src/clarity-light/wigfrid-light/event/Event.ts","~/ui-components-light/src/clarity-light/wigfrid-light/comp-light/Control.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/dom/enable.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/dom/create-element.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/copy.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/lang/is-object.ts","~/ui-components-light/src/clarity-light/wigfrid-light/eventArgs/CancelEventArgs.ts","~/ui-components-light/src/clarity-light/wigfrid-light/comp-light/DropDown/DropDown.ts","~/ui-components-light/src/clarity-light/wigfrid-light/comp-light/ListBox/ListBox.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/asserts/asCollectionView.ts","~/ui-components-light/src/clarity-light/wigfrid-light/comp-light/ComboBox/ComboBox.ts"],"sourcesContent":["/*\n * Copyright (c) 2016 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport { ModuleWithProviders, NgModule } from \"@angular/core\";\n\n//import {ALERT_DIRECTIVES} from \"./alert/index\";\n//import {CHECKBOX_DIRECTIVES} from \"./checkboxes/index\";\n//import {CODE_HIGHLIGHT_DIRECTIVES} from \"./code/index\";\n//import {DATAGRID_DIRECTIVES} from \"./datagrid/index\";\n//import {DROPDOWN_DIRECTIVES} from \"./dropdown/index\";\n//import {LAYOUT_DIRECTIVES} from \"./layout/index\";\n//import {MODAL_DIRECTIVES} from \"./modal/index\";\n//import {NAVIGATION_DIRECTIVES} from \"./nav/index\";\n//import {STACK_VIEW_DIRECTIVES} from \"./stack-view/index\";\n//import {TABS_DIRECTIVES} from \"./tabs/index\";\n//import {TREE_VIEW_DIRECTIVES} from \"./tree-view/index\";\n//import {WIZARD_DIRECTIVES} from \"./wizard/index\";\n//import {ICON_DIRECTIVES} from \"./iconography/index\";\n\n//import {ClrResponsiveNavigationService} from \"./nav/clrResponsiveNavigationService\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    declarations: [\n        //ALERT_DIRECTIVES,\n        //CHECKBOX_DIRECTIVES,\n        //CODE_HIGHLIGHT_DIRECTIVES,\n       // DATAGRID_DIRECTIVES,\n       // DROPDOWN_DIRECTIVES,\n       // LAYOUT_DIRECTIVES,\n       // MODAL_DIRECTIVES,\n       // NAVIGATION_DIRECTIVES,\n       // STACK_VIEW_DIRECTIVES,\n       // TABS_DIRECTIVES,\n       // TREE_VIEW_DIRECTIVES,\n       // WIZARD_DIRECTIVES,\n       // ICON_DIRECTIVES\n    ],\n    exports: [\n        //ALERT_DIRECTIVES,\n        //CHECKBOX_DIRECTIVES,\n        //CODE_HIGHLIGHT_DIRECTIVES,\n        //DATAGRID_DIRECTIVES,\n       // DROPDOWN_DIRECTIVES,\n       // LAYOUT_DIRECTIVES,\n       // MODAL_DIRECTIVES,\n       // NAVIGATION_DIRECTIVES,\n       // STACK_VIEW_DIRECTIVES,\n       // TABS_DIRECTIVES,\n       // TREE_VIEW_DIRECTIVES,\n       // WIZARD_DIRECTIVES,\n       // ICON_DIRECTIVES\n    ]\n})\nexport class ClarityModule {\n   \n\n    static forChild(): ModuleWithProviders {\n        return {\n            ngModule: ClarityModule,\n            providers: []\n        };\n    }\n}\n","\nexport function isArray(value: any): boolean {\n    return value instanceof Array;\n}\n","\nexport function isDate(value: any): boolean {\n    return value instanceof Date && !isNaN(value.valueOf());\n}\n","\nexport function isFunction(value: any): boolean {\n    return typeof (value) == 'function';\n}\n","/**\n * Throws an exception if a condition is false.\n *\n * @param condition Condition expected to be true.\n * @param msg Message of the exception if the condition is not true.\n */\nexport function assert(condition: boolean, msg: string) {\n    if (!condition) {\n        throw new Error('** Assertion failed in Wijmo: ' + msg);\n    }\n}\n","\nexport function isNumber(value: any): boolean {\n    return typeof (value) == 'number';\n}\n","import {assert} from \"./assert\";\nimport {isFunction} from \"../lang/is-function\";\n/**\n * Asserts that a value is a function.\n *\n * @param value Value supposed to be a function.\n * @param nullOK Whether null values are acceptable.\n * @return The function passed in.\n */\nexport function asFunction(value: any, nullOK = true): Function {\n    assert((nullOK && value == null) || isFunction(value), 'Function expected.');\n    return value;\n}\n","import {assert} from \"./assert\";\nimport {isNumber} from \"../lang/is-number\";\n/**\n * Asserts that a value is a number.\n *\n * @param value Value supposed to be numeric.\n * @param nullOK Whether null values are acceptable.\n * @param positive Whether to accept only positive numeric values.\n * @return The number passed in.\n */\nexport function asNumber(value: number, nullOK: boolean = false, positive: boolean = false): number {\n    assert((nullOK && value == null) || isNumber(value), 'Number expected.');\n    if (positive && value && value < 0) {\n        debugger;\n        throw new Error('Positive number expected.');\n    }\n    return value;\n}\n","import {assert} from \"./assert\";\nimport {isBoolean} from \"../lang/is-boolean\";\n/**\n * Asserts that a value is a Boolean.\n *\n * @param value Value supposed to be Boolean.\n * @param nullOK Whether null values are acceptable.\n * @return The Boolean passed in.\n */\nexport function asBoolean(value: boolean, nullOK = false): boolean {\n    assert((nullOK && value == null) || isBoolean(value), 'Boolean expected.');\n    return value;\n}\n","\nexport function isBoolean(value: any): boolean {\n    return typeof (value) == 'boolean';\n}\n","//import {DateTime} from \"../core/index\";\n//import {Event} from \"../event/Event\";\n//import {EventArgs} from \"../eventArgs/EventArgs\";\n//import {CancelEventArgs} from \"../eventArgs/CancelEventArgs\";\n//import {assert, asFunction, asBoolean, clamp, isPrimitive, tryCast, asArray, asInt} from \"../core\";\n//import {ObservableArray} from \"./ObservableArray\";\n//import {IEditableCollectionView} from \"../collections/interface/IEditableCollectionView\";\n//import {IPagedCollectionView} from \"../collections/interface/IPagedCollectionView\";\n//import {INotifyCollectionChanged} from \"../collections/interface/INotifyCollectionChanged\";\n//import {IPredicate} from \"../collections/interface/IPredicate\";\n//import {ICollectionView} from \"./interface/ICollectionView\";\n//import {GroupDescription} from \"./GroupDescription\";\n//import {NotifyCollectionChangedEventArgs} from \"./eventArgs/NotifyCollectionChangedEventArgs\";\n//import {PageChangingEventArgs} from \"./eventArgs/PageChangingEventArgs\";\n//import {SortDescription} from \"./SortDescription\";\n//import {NotifyCollectionChangedAction} from \"../enum/collections/NotifyCollectionChangedAction\";\n//import {CollectionViewGroup} from \"./CollectionViewGroup\";\n//import {EventEmitter} from \"@angular/core\";\n//import {$$observable} from \"rxjs/symbol/observable\";\nimport { of } from 'rxjs/observable/of';\n\n\n//import {Observable, Subscriber} from \"rxjs/Rx\";\n\n/**\n * Class that implements the @see:ICollectionView interface to expose data in\n * regular JavaScript arrays.\n *\n * The @see:CollectionView class implements the following interfaces:\n * <ul>\n *   <li>@see:ICollectionView: provides current record management,\n *       custom sorting, filtering, and grouping.</li>\n *   <li>@see:IEditableCollectionView: provides methods for editing,\n *       adding, and removing items.</li>\n *   <li>@see:IPagedCollectionView: provides paging.</li>\n * </ul>\n *\n * To use the @see:CollectionView class, start by declaring it and passing a\n * regular array as a data source. Then configure the view using the\n * @see:filter, @see:sortDescriptions, @see:groupDescriptions, and\n * @see:pageSize properties. Finally, access the view using the @see:items\n * property. For example:\n *\n * <pre>\n *   // create a new CollectionView\n *   var cv = new wijmo.collections.CollectionView(myArray);\n *   // sort items by amount in descending order\n *   var sd = new wijmo.collections.SortDescription('amount', false);\n *   cv.sortDescriptions.push(sd);\n *   // show only items with amounts greater than 100\n *   cv.filter = function(item) { return item.amount > 100 };\n *   // show the sorted, filtered result on the console\n *   for (var i = 0; i &lt; cv.items.length; i++) {\n     *     var item = cv.items[i];\n     *     console.log(i + ': ' + item.name + ' ' + item.amount);\n     *   }\n * </pre>\n * @deprecated\n */\nexport class CollectionView  {\n    _src: any[];\n   // _ncc: INotifyCollectionChanged;\n    _view: any[];\n    _pgView: any[];\n  //  _groups: CollectionViewGroup[];\n  //  _fullGroups: CollectionViewGroup[];\n    _digest: string;\n    _idx           = -1;\n   // _filter: IPredicate;\n   // _srtDsc        = new ObservableArray();\n   // _grpDesc       = new ObservableArray();\n    _newItem       = null;\n    _edtItem       = null;\n    _edtClone: any;\n    _pgSz          = 0;\n    _pgIdx         = 0;\n    _updating      = 0;\n    _itemCreator: Function;\n    _canFilter     = true;\n    _canGroup      = true;\n    _canSort       = true;\n    _canAddNew     = true;\n    _canCancelEdit = true;\n    _canRemove     = true;\n    _canChangePage = true;\n    _trackChanges  = false;\n   // _chgAdded      = new ObservableArray();\n   // _chgRemoved    = new ObservableArray();\n    //_chgEdited     = new ObservableArray();\n    _srtCvt: Function;\n\n    /**\n     * Initializes a new instance of a @see:CollectionView.\n     *\n     * @param sourceCollection Array that serves as a source for this\n     * @see:CollectionView.\n     */\n    constructor(sourceCollection?: any) {\n\n        // check that sortDescriptions contains SortDescriptions\n       \nthis._pgView = sourceCollection;\n        // initialize the source collection\n       // this.sourceCollection = sourceCollection ? sourceCollection : new ObservableArray();\n    }\n\n    /**\n     * Gets or sets a function that creates new items for the collection.\n     *\n     * If the creator function is not supplied, the @see:CollectionView\n     * will try to create an uninitilized item of the appropriate type.\n     *\n     * If the creator function is supplied, it should be a function that\n     * takes no parameters and returns an initialized object of the proper\n     * type for the collection.\n     */\n    get newItemCreator(): Function {\n        return this._itemCreator;\n    }\n/*\n    set newItemCreator(value: Function) {\n        this._itemCreator = asFunction(value);\n    }\n*/\n    /**\n     * Gets or sets a function used to convert values when sorting.\n     *\n     * If provided, the function should take as parameters a\n     * @see:SortDescription, a data item, and a value to convert,\n     * and should return the converted value.\n     *\n     * This property provides a way to customize sorting. For example,\n     * the @see:FlexGrid control uses it to sort mapped columns by\n     * display value instead of by raw value.\n     *\n     * For example, the code below causes a @see:CollectionView to\n     * sort the 'country' property, which contains country code integers,\n     * using the corresponding country names:\n     *\n     * <pre>var countries = 'US,Germany,UK,Japan,Italy,Greece'.split(',');\n     * collectionView.sortConverter = function (sd, item, value) {\n         *   if (sd.property == 'countryMapped') {\n         *     value = countries[value]; // convert country id into name\n         *   }\n         *   return value;\n         * }</pre>\n     */\n    get sortConverter(): Function {\n        return this._srtCvt;\n    }\n\n    set sortConverter(value: Function) {\n        if (value != this._srtCvt) {\n           // this._srtCvt = asFunction(value, true);\n        }\n    }\n\n    // ** IQueryInterface\n\n    /**\n     * Returns true if the caller queries for a supported interface.\n     *\n     * @param interfaceName Name of the interface to look for.\n     */\n    implementsInterface(interfaceName: string): boolean {\n        switch (interfaceName) {\n            case 'ICollectionView':\n            case 'IEditableCollectionView':\n            case 'IPagedCollectionView':\n            case 'INotifyCollectionChanged':\n                return true;\n        }\n        return false;\n    }\nget items(): any[] {\n        return this._pgView;\n    }\n    /**\n     * Gets or sets a value that determines whether the control should\n     * track changes to the data.\n     *\n     * If @see:trackChanges is set to true, the @see:CollectionView keeps\n     * track of changes to the data and exposes them through the\n     * @see:itemsAdded, @see:itemsRemoved, and @see:itemsEdited collections.\n     *\n     * Tracking changes is useful in situations where you need to to update\n     * the server after the user has confirmed that the modifications are\n     * valid.\n     *\n     * After committing or cancelling changes, use the @see:clearChanges method\n     * to clear the @see:itemsAdded, @see:itemsRemoved, and @see:itemsEdited\n     * collections.\n     *\n     * The @see:CollectionView only tracks changes made when the proper\n     * @see:CollectionView methods are used (@see:editItem/@see:commitEdit,\n     * @see:addNew/@see:commitNew, and @see:remove).\n     * Changes made directly to the data are not tracked.\n     */\n    get trackChanges(): boolean {\n        return this._trackChanges;\n    }\n\n    set trackChanges(value: boolean) {\n       // this._trackChanges = asBoolean(value);\n    }\n\n   \n}\n","\nexport function isString(value: any): boolean {\n    return typeof (value) == 'string';\n}\n","import {assert} from \"./assert\";\nimport {isString} from \"../lang/is-string\";\n/**\n * Asserts that a value is a string.\n *\n * @param value Value supposed to be a string.\n * @param nullOK Whether null values are acceptable.\n * @return The string passed in.\n */\nexport function asString(value: string, nullOK = true): string {\n    assert((nullOK && value == null) || isString(value), 'String expected.');\n    return value;\n}\n","import {tryCast} from \"../../common/Global\";\nimport {assert} from \"./assert\";\n/**\n * Asserts that a value is an instance of a given type.\n *\n * @param value Value to be checked.\n * @param type Type of value expected.\n * @param nullOK Whether null values are acceptable.\n * @return The value passed in.\n */\nexport function asType(value: any, type: any, nullOK = false): any {\n    value = tryCast(value, type);\n    assert(nullOK || value != null, type + ' expected.');\n    return value;\n}\n","import {Binding} from \"./Binding\";\nimport {Rectangle} from \"./ui/Rectangle\";\nimport {isFunction, isString, asType, contains, asNumber, isBoolean, isNumber} from \"../util/util\";\nimport {Aggregate} from \"../../../enum/Aggregate\";\n//import {ICollectionView} from \"../../../collections/interface/ICollectionView\";\n\n\n\n\n/**\n * Allows callers to verify whether an object implements an interface.\n */\nexport interface IQueryInterface {\n    /**\n     * Returns true if the object implements a given interface.\n     *\n     * @param interfaceName Name of the interface to look for.\n     */\n    implementsInterface(interfaceName: string): boolean;\n}\n/**\n * Casts a value to a type if possible.\n *\n * @param value Value to cast.\n * @param type Type or interface name to cast to.\n * @return The value passed in if the cast was successful, null otherwise.\n */\nexport function tryCast(value: any, type: any): any {\n\n    // null doesn't implement anything\n    if (value == null) {\n        return null;\n    }\n\n    // test for interface implementation (IQueryInterface)\n    if (isString(type)) {\n        return isFunction(value.implementsInterface) && value.implementsInterface(type) ? value : null;\n    }\n\n    // regular type test\n    return value instanceof type ? value : null;\n}\n\n\n\n/**\n * Checks whether an @see:ICollectionView is defined and not empty.\n *\n * @param value @see:ICollectionView to check.\n */\n /*\nexport function hasItems(value: ICollectionView) {\n    return value && value.items && value.items.length;\n}\n*/\n\n\n\n\n\n/**\n * Sets the start and end positions of a selection in a text field.\n *\n * This method is similar to the native @see:setSelectionRange method\n * in HTMLInputElement objects, except it checks for conditions that\n * may cause exceptions (element not in the DOM, disabled, or hidden).\n *\n * @param e\n * @param start Offset into the text field for the start of the selection.\n * @param end Offset into the text field for the end of the selection.\n */\nexport function setSelectionRange(e: HTMLInputElement, start: number, end = start) {\n    e = asType(e, HTMLInputElement);\n    if (contains(document.body, e) && !e.disabled && e.style.display != 'none') {\n        try {\n            e.setSelectionRange(asNumber(start), asNumber(end));\n            e.focus(); // needed in Chrome (TFS 124102)\n        } catch (x) { }\n    }\n}\n\n// ** jQuery replacement methods\n\n/**\n * Gets the bounding rectangle of an element in page coordinates.\n *\n * This is similar to the <b>getBoundingClientRect</b> function,\n * except that uses window coordinates, which change when the\n * document scrolls.\n */\nexport function getElementRect(e: Element): Rectangle {\n    const rc = e.getBoundingClientRect();\n    return new Rectangle(rc.left + window.pageXOffset, rc.top + window.pageYOffset, rc.width, rc.height);\n}\n\n\n\n\n\n/**\n * Calculates an aggregate value from the values in an array.\n *\n * @param aggType Type of aggregate to calculate.\n * @param items Array with the items to aggregate.\n * @param binding Name of the property to aggregate on (in case the items are not simple values).\n */\nexport function getAggregate(aggType: Aggregate, items: any[], binding?: string) {\n    let cnt   = 0,\n        cntn  = 0,\n        sum   = 0,\n        sum2  = 0,\n        min   = null,\n        max = null;\n    const bnd = binding ? new Binding(binding) : null;\n\n    // calculate aggregate\n    for (let i = 0; i < items.length; i++) {\n\n        // get item/value\n        let val = items[i];\n        if (bnd) {\n            val = bnd.getValue(val);\n            //assert(!isUndefined(val), 'item does not define property \"' + binding + '\".');\n        }\n\n        // aggregate\n        if (val != null) {\n            cnt++;\n            if (min == null || val < min) {\n                min = val;\n            }\n            if (max == null || val > max) {\n                max = val;\n            }\n            if (isNumber(val) && !isNaN(val)) {\n                cntn++;\n                sum += val;\n                sum2 += val * val;\n            } else if (isBoolean(val)) {\n                cntn++;\n                if (val == true) {\n                    sum++;\n                    sum2++;\n                }\n            }\n        }\n    }\n\n    // return result\n    const avg = cntn == 0 ? 0 : sum / cntn;\n    switch (aggType)\n    {\n        case Aggregate.Avg:\n            return avg;\n        case Aggregate.Cnt:\n            return cnt;\n        case Aggregate.Max:\n            return max;\n        case Aggregate.Min:\n            return min;\n        case Aggregate.Rng:\n            return max - min;\n        case Aggregate.Sum:\n            return sum;\n        case Aggregate.VarPop:\n            return cntn <= 1 ? 0 : sum2 / cntn - avg * avg;\n        case Aggregate.StdPop:\n            return cntn <= 1 ? 0 : Math.sqrt(sum2 / cntn - avg * avg);\n        case Aggregate.Var:\n            return cntn <= 1 ? 0 : (sum2 / cntn - avg * avg) * cntn / (cntn - 1);\n        case Aggregate.Std:\n            return cntn <= 1 ? 0 : Math.sqrt((sum2 / cntn - avg * avg) * cntn / (cntn - 1));\n    }\n\n    // should never get here...\n    throw 'Invalid aggregate type.';\n}\n","/**\n * Checks whether an element has a class.\n *\n * @param e Element to check.\n * @param className Class to check for.\n */\nexport function hasClass(e: HTMLElement, className: string): boolean {\n    // note: using e.getAttribute('class') instead of e.classNames\n    // so this works with SVG as well as regular HTML elements.\n    if (e && e.getAttribute) {\n        const rx = new RegExp('\\\\b' + className + '\\\\b');\n        return e && rx.test(e.getAttribute('class'));\n    }\n    return false;\n}\n","import {hasClass} from \"./has-class\";\n\n\n/**\n * Adds a class to an element.\n *\n * @param e Element that will have the class added.\n * @param className Class to add to the element.\n */\nexport function addClass(e: HTMLElement, className: string) {\n    // note: using e.getAttribute('class') instead of e.classNames\n    // so this works with SVG as well as regular HTML elements.\n    if (e && e.setAttribute && !hasClass(e, className)) {\n        const cn = e.getAttribute('class');\n        e.setAttribute('class', cn ? cn + ' ' + className : className);\n    }\n}\n","/**\n * Checks whether an HTML element contains another.\n *\n * @param parent Parent element.\n * @param child Child element.\n * @return True if the parent element contains the child element.\n */\nexport function contains(parent: any, child: any): boolean {\n    for (let e = <Node>child; e; e = e.parentNode) {\n        if (e === parent) return true;\n    }\n    return false;\n}\n\nexport function containsFocus(e:HTMLElement):boolean{\n  return contains(e, document.activeElement);\n}\n","import {removeClass} from \"./remove-class\";\nimport {addClass} from \"./add-class\";\n\n\n/**\n * Adds or removes a class to or from an element.\n *\n * @param e Element that will have the class added.\n * @param className Class to add or remove.\n * @param addOrRemove Whether to add or remove the class.\n * Use true to add class to element and false to remove class from element.\n */\nexport function toggleClass(e: HTMLElement, className: string, addOrRemove: boolean) {\n    if (addOrRemove) {\n        addClass(e, className);\n    } else {\n        removeClass(e, className);\n    }\n}\n","import {hasClass} from \"./has-class\";\n\n\n/**\n * Removes a class from an element.\n *\n * @param e Element that will have the class removed.\n * @param className Class to remove form the element.\n */\nexport function removeClass(e: HTMLElement, className: string) {\n    // note: using e.getAttribute('class') instead of e.classNames\n    // so this works with SVG as well as regular HTML elements.\n    if (e && e.setAttribute && hasClass(e, className)) {\n        const rx = new RegExp('\\\\s?\\\\b' + className + '\\\\b', 'g'),\n              cn = e.getAttribute('class');\n        e.setAttribute('class', cn.replace(rx, ''));\n    }\n}\n","import {isString} from \"../lang/is-string\";\n\n\n/**\n * Gets an element from a jQuery-style selector.\n *\n * @param selector An element, a query selector string, or a jQuery object.\n */\nexport function getElement(selector: any): HTMLElement {\n    if (selector instanceof HTMLElement) return selector;\n    if (isString(selector)) return <HTMLElement>document.querySelector(selector);\n    if (selector && selector.jquery) return <HTMLElement>selector[0];\n    return null;\n}\n","'use strict';\n\n/**\n * Gets or sets an object that contains all localizable strings in the Wijmo library.\n *\n * The culture selector is a two-letter string that represents an\n * <a href='http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes'>ISO 639 culture</a>.\n */\nexport let culture: any = {\n    Globalize: {\n        numberFormat: {\n            NumberDecimalSeparator: '.',\n            NumberGroupSeparator: ',',\n            CurrencySymbol: '$',\n            '.': '.',\n            ',': ',',\n            percent: {pattern: ['-n %', 'n %']},\n            currency: {decimals: 2, symbol: '$', pattern: ['($n)', '$n']}\n        },\n        dateTimeFormat: {\n            TimeSeparator: '/',\n            DateSeparator: ':',\n            '/': '/',\n            ':': ':',\n        },\n        calendar: {\n            '/': '/',\n            ':': ':',\n            firstDay: 0,\n            days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n            daysAbbr: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n            months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n            monthsAbbr: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n            am: ['AM', 'A'],\n            pm: ['PM', 'P'],\n            eras: ['A.D.', 'B.C.'],\n            patterns: {\n                d: 'M/d/yyyy', D: 'dddd, MMMM dd, yyyy',\n                f: 'dddd, MMMM dd, yyyy h:mm tt', F: 'dddd, MMMM dd, yyyy h:mm:ss tt',\n                t: 'h:mm tt', T: 'h:mm:ss tt',\n                M: 'MMMM d', m: 'MMMM d',\n                Y: 'MMMM, yyyy', y: 'MMMM, yyyy',\n                g: 'M/d/yyyy h:mm tt', G: 'M/d/yyyy h:mm:ss tt',\n                s: 'yyyy\"-\"MM\"-\"dd\"T\"HH\":\"mm\":\"ss',\n                o: 'yyyy\"-\"MM\"-\"dd\"T\"HH\":\"mm\":\"ss\".\"fffffffK',\n                O: 'yyyy\"-\"MM\"-\"dd\"T\"HH\":\"mm\":\"ss\".\"fffffffK',\n                U: 'dddd, MMMM dd, yyyy h:mm:ss tt'\n            },\n            fiscalYearOffsets: [-3, -3]\n        }\n    },\n    MultiSelect: {\n        itemsSelected: '{count:n0} items selected'\n    },\n    FlexGrid: {\n        groupHeaderFormat: '{name}: <b>{value} </b>({count:n0} items)'\n    },\n    FlexGridFilter: {\n\n        // filter\n        ascending: '\\u2191 Ascending',\n        descending: '\\u2193 Descending',\n        apply: 'Apply',\n        clear: 'Clear',\n        conditions: 'Filter by Condition',\n        values: 'Filter by Value',\n\n        // value filter\n        search: 'Search',\n        selectAll: 'Select All',\n        null: '(nothing)',\n\n        // condition filter\n        header: 'Show items where the value',\n        and: 'And',\n        or: 'Or',\n        stringOperators: [\n            {name: '(not set)', op: null},\n            {name: 'Equals', op: 0},\n            {name: 'Does not equal', op: 1},\n            {name: 'Begins with', op: 6},\n            {name: 'Ends with', op: 7},\n            {name: 'Contains', op: 8},\n            {name: 'Does not contain', op: 9}\n        ],\n        numberOperators: [\n            {name: '(not set)', op: null},\n            {name: 'Equals', op: 0},\n            {name: 'Does not equal', op: 1},\n            {name: 'Is Greater than', op: 2},\n            {name: 'Is Greater than or equal to', op: 3},\n            {name: 'Is Less than', op: 4},\n            {name: 'Is Less than or equal to', op: 5}\n        ],\n        dateOperators: [\n            {name: '(not set)', op: null},\n            {name: 'Equals', op: 0},\n            {name: 'Is Before', op: 4},\n            {name: 'Is After', op: 3}\n        ],\n        booleanOperators: [\n            {name: '(not set)', op: null},\n            {name: 'Equals', op: 0},\n            {name: 'Does not equal', op: 1}\n        ]\n    }\n};\n","import {isArray, isDate} from \"../../util/util\";\nimport {culture} from \"../../globalization/Localization\";\n/**\n * Provides date and time utilities.\n */\nexport class DateTime {\n\n    /**\n     * Gets a new Date that adds the specified number of days to a given Date.\n     *\n     * @param value Original date.\n     * @param days Number of days to add to the given date.\n     */\n    static addDays(value: Date, days: number): Date {\n        return new Date(value.getFullYear(), value.getMonth(), value.getDate() + days);\n    }\n    /**\n     * Gets a new Date that adds the specified number of months to a given Date.\n     *\n     * @param value Original date.\n     * @param months Number of months to add to the given date.\n     */\n    static addMonths(value: Date, months: number): Date {\n        return new Date(value.getFullYear(), value.getMonth() + months, value.getDate());\n    }\n    /**\n     * Gets a new Date that adds the specified number of years to a given Date.\n     *\n     * @param value Original date.\n     * @param years Number of years to add to the given date.\n     */\n    static addYears(value: Date, years: number): Date {\n        return new Date(value.getFullYear() + years, value.getMonth(), value.getDate());\n    }\n    /**\n     * Gets a new Date that adds the specified number of hours to a given Date.\n     *\n     * @param value Original date.\n     * @param hours Number of hours to add to the given date.\n     */\n    static addHours(value: Date, hours: number): Date {\n        return new Date(value.getFullYear(), value.getMonth(), value.getDate(), value.getHours() + hours);\n    }\n    /**\n     * Gets a new Date that adds the specified number of minutes to a given Date.\n     *\n     * @param value Original date.\n     * @param minutes Number of minutes to add to the given date.\n     */\n    static addMinutes(value: Date, minutes: number): Date {\n        return new Date(value.getFullYear(), value.getMonth(), value.getDate(), value.getHours(), value.getMinutes() + minutes);\n    }\n    /**\n     * Gets a new Date that adds the specified number of seconds to a given Date.\n     *\n     * @param value Original date.\n     * @param seconds Number of seconds to add to the given date.\n     */\n    static addSeconds(value: Date, seconds: number): Date {\n        return new Date(value.getFullYear(), value.getMonth(), value.getDate(), value.getHours(), value.getMinutes(), value.getSeconds() + seconds);\n    }\n    /**\n     * Returns true if two Date objects refer to the same date (ignoring time).\n     *\n     * @param d1 First date.\n     * @param d2 Second date.\n     */\n    static sameDate(d1: Date, d2: Date): boolean {\n        return isDate(d1) && isDate(d2) &&\n            d1.getFullYear() == d2.getFullYear() &&\n            d1.getMonth() == d2.getMonth() &&\n            d1.getDate() == d2.getDate();\n    }\n    /**\n     * Returns true if two Date objects refer to the same time (ignoring date).\n     *\n     * @param d1 First date.\n     * @param d2 Second date.\n     */\n    static sameTime(d1: Date, d2: Date): boolean {\n        return isDate(d1) && isDate(d2) &&\n            d1.getHours() == d2.getHours() &&\n            d1.getMinutes() == d2.getMinutes() &&\n            d1.getSeconds() == d2.getSeconds();\n    }\n    /**\n     * Returns true if two Date objects refer to the same date and time.\n     *\n     * @param d1 First date.\n     * @param d2 Second date.\n     */\n    static equals(d1: Date, d2: Date): boolean {\n        return isDate(d1) && isDate(d2) && d1.getTime() == d2.getTime();\n    }\n    /**\n     * Gets a Date object with the date and time set on two Date objects.\n     *\n     * @param date Date object that contains the date (day/month/year).\n     * @param time Date object that contains the time (hour:minute:second).\n     */\n    static fromDateTime(date: Date, time: Date): Date {\n        if (!date && !time) return null;\n        if (!date) date = time;\n        if (!time) time = date;\n        return new Date(\n            date.getFullYear(), date.getMonth(), date.getDate(),\n            time.getHours(), time.getMinutes(), time.getSeconds());\n    }\n    /**\n     * Converts a calendar date to a fiscal date using the current culture.\n     *\n     * @param date Calendar date.\n     * @param govt Whether to use the government or corporate fiscal year.\n     */\n    static toFiscal(date: Date, govt: boolean) {\n        const cal = culture.Globalize.calendar;\n        return isArray(cal.fiscalYearOffsets)\n            ? DateTime.addMonths(date, -cal.fiscalYearOffsets[govt ? 0 : 1])\n            : date;\n    }\n    /**\n     * Converts a fiscal year date to a calendar date using the current culture.\n     *\n     * @param date Fiscal year date.\n     * @param govt Whether to use the government or corporate fiscal year.\n     */\n    static fromFiscal(date: Date, govt: boolean) {\n        const cal = culture.Globalize.calendar;\n        return isArray(cal.fiscalYearOffsets)\n            ? DateTime.addMonths(date, +cal.fiscalYearOffsets[govt ? 0 : 1])\n            : date;\n    }\n    /**\n     * Creates a copy of a given Date object.\n     *\n     * @param date Date object to copy.\n     */\n    static clone(date: Date): Date {\n        return DateTime.fromDateTime(date, date);\n    }\n}\n","import {asDate, asNumber, asString, isDate, isString, isNumber, toFixed} from \"../util/util\";\nimport {culture} from \"./Localization\";\nimport {DateTime} from \"../common/datetime/datetime\";\n/**\n * Class that implements formatting and parsing of numbers and Dates.\n *\n * By default, @see:Globalize uses the American English culture.\n * To switch cultures, include the appropriate <b>wijmo.culture.*.js</b>\n * file after the wijmo files.\n */\nexport class Globalize {\n\n    /**\n     * Formats a number or a date.\n     *\n     * The format strings used with the @see:format function are similar to\n     * the ones used by <b>Globalize.js</b> and by the .NET Globalization\n     * library. The tables below contains links that describe the formats\n     * available:\n     *\n     * <ul>\n     * <li><a href=\"http://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx\">\n     *      Standard Numeric Format Strings</a></li>\n     * <li><a href=\"http://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx\">\n     *      Standard Date and Time Format Strings</a></li>\n     * <li><a href=\"http://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx\">\n     *      Custom Date and Time Format Strings</a></li>\n     * </ul>\n     *\n     * @param value Number or Date to format (all other types are converted to strings).\n     * @param format Format string to use when formatting numbers or dates.\n     * @param trim Whether to remove trailing zeros from numeric results.\n     * @param truncate Whether to truncate the numeric values rather than round them.\n     * @return A string representation of the given value.\n     */\n    static format(value: any, format: string, trim?: boolean, truncate?: boolean): string {\n\n        // if a format was not provided, create one\n        if (!format) {\n            if (isNumber(value)) {\n                format = value == Math.round(value) ? 'n0' : 'n2';\n            }\n            else if (isDate(value)) {\n                format = 'd';\n            }\n        }\n\n        // format numbers and dates, convert others to string\n        if (isNumber(value)) {\n            return Globalize.formatNumber(value, format, trim, truncate);\n        } else if (isDate(value)) {\n            return Globalize.formatDate(value, format);\n        } else {\n            return value != null ? value.toString() : '';\n        }\n    }\n    /**\n     * Formats a number using the current culture.\n     *\n     * The @see:formatNumber method accepts most .NET-style\n     * <a href=\"http://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx\">\n     * Standard Numeric Format Strings</a>, except for the 'e' and 'x' formats\n     * (scientific notation and hexadecimal) which are not supported.\n     *\n     * Numeric format strings takes the form <i>Axxccss</i>, where:\n     * <ul>\n     * <li>\n     *  <i>A</i> is a single case-insensitive alphabetic character called the\n     *  format specifier.</i>\n     * <li>\n     *  <i>xx</i> is an optional integer called the precision specifier.\n     *  The precision specifier affects the number of digits in the result.</li>\n     * <li>\n     *  <i>cc</i> is an optional string used to override the currency symbol\n     *  when formatting currency values. This is useful when formatting\n     *  currency values for cultures different than the current default\n     *  (for example, when formatting Euro or Yen values in applications\n     *  that use the English culture).</li>\n     * <li>\n     *  <i>ss</i> is an optional string used to scale the number. If provided,\n     *  it must consist of commas. The number is divided by 1000 for each comma\n     *  specified.</li>\n     * </ul>\n     *\n     * The following table describes the standard numeric format specifiers and\n     * displays sample output produced by each format specifier for the default\n     * culture.\n     *\n     * <b>n</b> Number: <code>formatNumber(1234.5, 'n2') => '1,234.50'</code><br/>\n     * <b>f</b> Fixed-point: <code>formatNumber(1234.5, 'f2') => '1234.50'</code><br/>\n     * <b>g</b> General (no trailing zeros): <code>formatNumber(1234.5, 'g2') => '1,234.5'</code><br/>\n     * <b>d</b> Decimal (integers): <code>formatNumber(-1234, 'd6') => '-001234'</code><br/>\n     * <b>x</b> Hexadecimal (integers): <code>formatNumber(1234, 'x6') => '0004d2'</code><br/>\n     * <b>c</b> Currency: <code>formatNumber(1234, 'c') => '$ 1,234.00'</code><br/>\n     * <b>p</b> Percent: <code>formatNumber(0.1234, 'p2') => '12.34 %'</code>\n     *\n     * The scaling specifier is especially useful when charting large values. For\n     * example, the markup below creates a chart that plots population versus GDP.\n     * The raw data expresses the population is units and the GDP in millions.\n     * The scaling specified in the axes formats causes the chart to show population\n     * in millions and GDP in trillions:\n     *\n     * <pre>&lt;wj-flex-chart\n     *   items-source=\"countriesGDP\" binding-x=\"pop\" chart-type=\"Scatter\"&gt;\n     *   &lt;wj-flex-chart-series\n     *     name=\"GDP\" binding=\"gdp\"&gt;&lt;/wj-flex-chart-series&gt;\n     *   &lt;wj-flex-chart-axis\n     *     wj-property=\"axisX\" title=\"Population (millions)\"\n     *     format=\"n0,,\"&gt;\n     *   &lt;/wj-flex-chart-axis&gt;\n     *   &lt;wj-flex-chart-axis\n     *     wj-property=\"axisY\" title=\"GDP (US$ trillions)\"\n     *     format=\"c0,,\"&gt;\n     *   &lt;/wj-flex-chart-axis&gt;\n     * &lt;/wj-flex-chart&gt;</pre>\n     *\n     * @param value Number to format.\n     * @param format .NET-style standard numeric format string (e.g. 'n2', 'c4', 'p0', 'g2', 'd2').\n     * @param trim Whether to remove trailing zeros from the result.\n     * @param truncate Whether to truncate the value rather than round it.\n     * @return A string representation of the given number.\n     */\n    static formatNumber(value: number, format: string, trim?: boolean, truncate?: boolean): string {\n        asNumber(value);\n        asString(format);\n\n        let result;\n        const m   = format ? format.match(/([a-z])(\\d*)(,*)(.*)/i) : null,\n            nf    = culture.Globalize.numberFormat,\n            f1    = m ? m[1].toLowerCase() : 'n',\n            prec  = (m && m[2]) ? parseInt(m[2]) : (f1 == 'c') ? nf.currency.decimals : value == Math.round(value) ? 0 : 2,\n            scale = (m && m[3]) ? 3 * m[3].length : 0,\n            curr  = (m && m[4]) ? m[4] : nf.currency.symbol,\n            dp    = nf['.'],\n            ts    = nf[','];\n\n        // scale (,:thousands ,,:millions ,,,:billions)\n        if (scale) {\n            value /= Math.pow(10, scale);\n        }\n\n        // d, x: integers/hexadecimal\n        if (f1 == 'd' || f1 == 'x') {\n            result = Math.round(Math.abs(value)).toString(f1 == 'd' ? 10 : 16);\n            while (result.length < prec) {\n                result = '0' + result;\n            }\n            if (value < 0) {\n                result = '-' + result;\n            }\n            if (format && format[0] == 'X') {\n                result = result.toUpperCase();\n            }\n            return result;\n        }\n\n        // p: percentage\n        if (f1 == 'p') {\n            value *= 100;\n        }\n\n        // truncate value\n        if (truncate) {\n            value = toFixed(value, prec, true);\n        }\n\n        // get result\n        result = (f1 == 'c' || f1 == 'p')\n            ? Math.abs(value).toFixed(prec)\n            : value.toFixed(prec);\n\n        // g: remove trailing zeros\n        if ((trim || f1 == 'g') && result.indexOf('.') > -1) {\n            result = result.replace(/(\\.[0-9]*?)0+$/g, '$1');\n            result = result.replace(/\\.$/, '');\n        }\n\n        // replace decimal point\n        if (dp != '.') {\n            result = result.replace('.', dp);\n        }\n\n        // n, c, p: thousand separators\n        if (ts && (f1 == 'n' || f1 == 'c' || f1 == 'p')) {\n            const idx = result.indexOf(dp),\n                  rx  = /\\B(?=(\\d\\d\\d)+(?!\\d))/g;\n            result    = idx > -1 ? result.substr(0, idx).replace(rx, ts) + result.substr(idx) : result.replace(rx, ts);\n        }\n\n        // c: currency pattern\n        if (f1 == 'c') {\n            var pat = nf.currency.pattern[value < 0 ? 0 : 1];\n            result = pat.replace('n', result).replace('$', curr);\n        }\n\n        // p: percentage pattern\n        if (f1 == 'p') {\n            var pat = nf.percent.pattern[value < 0 ? 0 : 1];\n            result = pat.replace('n', result);\n        }\n\n        // done\n        return result;\n    }\n    /**\n     * Formats a date using the current culture.\n     *\n     * The @see:format parameter contains a .NET-style\n     * <a href=\"http://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx\">Date format string</a>\n     * with the following additions:\n     * <ul>\n     * <li>\n     *  <i>Q, q</i> Calendar quarter.</li>\n     *  <i>U</i> Fiscal quarter (government).</li>\n     *  <i>u</i> Fiscal quarter (private sector).</li>\n     *  <i>EEEE, EEE, EE, E</i> Fiscal year (government).</li>\n     *  <i>eeee, eee, ee, e</i> Fiscal year (private sector).</li>\n     * </ul>\n     *\n     * For example:\n     * <code>\n     * var d = new Date(2015, 9, 1); // Oct 1, 2015\n     * console.log(wijmo.Globalize.format(d, '\"FY\"EEEE\"Q\"U') + ' (US culture)');\n     * &gt; <b>FY2016Q1 (US culture)</b>\n     * </code>\n     *\n     * @param value Number or Date to format.\n     * @param format .NET-style Date format string</a>.\n     * @return A string representation of the given date.\n     */\n    static formatDate(value: Date, format: string): string {\n        value = asDate(value);\n\n        // culture-invariant formats\n        switch (format) {\n            case 'r':\n            case 'R':\n                return value.toUTCString();\n            case 'u':\n                return value.toISOString().replace(/\\.\\d{3}/, '');\n        }\n\n        // expand pre-defined formats\n        format = Globalize._expandFormat(format);\n\n        // parse the format string and build return value\n        const parts = Globalize._parseDateFormat(format);\n        let str     = '';\n        for (let i = 0; i < parts.length; i++) {\n            str += Globalize._formatDatePart(value, format, parts[i]);\n        }\n\n        // all done\n        return str;\n    }\n    /**\n     * Parses a string into an integer.\n     *\n     * @param value String to convert to an integer.\n     * @param format Format to use when parsing the number.\n     * @return The integer represented by the given string,\n     * or <b>NaN</b> if the string cannot be parsed into an integer.\n     */\n    static parseInt(value: string, format?: string): number {\n        return Math.round(Globalize.parseFloat(value, format));\n    }\n    /**\n     * Parses a string into a floating point number.\n     *\n     * @param value String to convert to a number.\n     * @param format Format to use when parsing the number.\n     * @return The floating point number represented by the given string,\n     * or <b>NaN</b> if the string cannot be parsed into a floating point number.\n     */\n    static parseFloat(value: string, format?: string): number {\n        const neg   = value.indexOf('-') > -1 || (value.indexOf('(') > -1 && value.indexOf(')') > -1) ? -1 : +1,\n              pct   = value.indexOf('%') > -1 ? .01 : 1,\n              m     = format ? format.match(/,+/) : null,\n              scale = m ? m[0].length * 3 : 0;\n\n        // hex\n        if (format && (format[0] == 'x' || format[0] == 'X')) {\n            value = value.replace(/[^0-9a-f]+.*$/gi, ''); // truncate at first invalid char\n            return parseInt(value, 16) * neg * pct * Math.pow(10, scale);\n        }\n\n        // decimal\n        var dp = culture.Globalize.numberFormat['.'],\n            rx = new RegExp('[^\\\\d\\\\' + dp + ']', 'g'),\n            value = value.replace(rx, '').replace(dp, '.'); // remove non-digits, replace decimal point\n        return parseFloat(value) * neg * pct * Math.pow(10, scale);\n    }\n    /**\n     * Parses a string into a Date.\n     *\n     * @param value String to convert to a Date.\n     * @param format Format string used to parse the date.\n     * @return The date represented by the given string, or null if the string\n     * cannot be parsed into a Date.\n     */\n    static parseDate(value: string, format: string): Date {\n\n        // make sure we have a value\n        value = asString(value);\n        if (!value) {\n            return null;\n        }\n\n        // culture-invariant formats\n        if (format == 'u') {\n            return new Date(value);\n        }\n\n        // parse using RFC 3339 pattern ([yyyy-MM-dd] [hh:mm[:ss]])\n        var d: Date;\n        if (format == 'R' || format == 'r') {\n            const rx    = /(([0-9]+)\\-([0-9]+)\\-([0-9]+))?\\s?(([0-9]+):([0-9]+)(:([0-9]+))?)?/,\n                  match = value.match(rx);\n            if (match[1] || match[5]) {\n                var d = match[1] // parse date\n                    ? new Date(parseInt(match[2]), parseInt(match[3]) - 1, parseInt(match[4]))\n                    : new Date();\n                if (match[5]) { // parse time\n                    d.setHours(parseInt(match[6]));\n                    d.setMinutes(parseInt(match[7]));\n                    d.setSeconds(match[8] ? parseInt(match[9]) : 0);\n                }\n            } else {\n                d = new Date(value);\n            }\n            return !isNaN(d.getTime()) ? d : null;\n        }\n\n        // expand the format\n        format = Globalize._expandFormat(format ? format : 'd');\n\n        // get format parts and data parts\n        //\n        // cjk: chars, http://www.rikai.com/library/kanjitables/kanji_codes.unicode.shtml\n        // rxf: format (no dots in strings: 'mm.dd.yyyy' => ['mm', 'dd', 'yyyy']).\n        // rxv: value (dots OK in strings: 'A.D' => 'A.D', but not by themselves)\n        const cal                                                 = culture.Globalize.calendar,\n              cjk                                                 = Globalize._CJK,\n              rxv                                                 = new RegExp('(\\\\' + cal['/'] + ')|(\\\\' + cal[':'] + ')|' + // date/time separators\n                  '(\\\\d+)|' + // digits\n                  '([' + cjk + '\\\\.]{2,})|' + // strings with dots\n                  '([' + cjk + ']+)', // strings with no dots\n                  'gi'\n              );\n        let vparts                                                = value.match(rxv),\n              fparts = Globalize._parseDateFormat(format), offset = 0,\n              year                                                = -1, month = 0, day = 1, hour = 0, min = 0;\n        const tzm                                                 = 0;\n        let sec                                                   = 0, ms                                           = 0, era = -1,\n              hasDayName, hasDay, hasQuarter, hasMonth, fiscalFmt;\n\n        // basic validation (TFS 81465, 128359)\n        if (!vparts || !vparts.length || !fparts || !fparts.length) {\n            return null;\n        }\n\n        // parse each element\n        for (let i = 0; i < fparts.length && vparts; i++) {\n            const vpi  = i - offset;\n            let pval   = (vpi > -1 && vpi < vparts.length) ? vparts[vpi] : '';\n            const plen = fparts[i].length;\n            switch (fparts[i]) {\n\n                // ** year\n                case 'EEEE': case 'EEE': case 'EE': case 'E': // fiscal (govt)\n                case 'eeee': case 'eee': case 'ee': case 'e': // fiscal (corp)\n                fiscalFmt = fparts[i];\n                // ** fall through **\n                case 'yyyy': case 'yyy': case 'yy': case 'y': // calendar\n                if (plen > 1 && pval.length > plen) {\n                    vparts[vpi] = pval.substr(plen);\n                    pval = pval.substr(0, plen);\n                    offset++;\n                }\n                year = parseInt(pval);\n                break;\n\n                // ** month\n                case 'MMMM': case 'MMM':\n                hasMonth = true;\n                const monthName = pval.toLowerCase();\n                month = -1;\n                for (let j = 0; j < 12; j++) {\n                    if (cal.months[j].toLowerCase().indexOf(monthName) == 0) {\n                        month = j;\n                        break;\n                    }\n                }\n                break;\n                case 'MM': case 'M':\n                if (plen > 1 && pval.length > plen) {\n                    vparts[vpi] = pval.substr(plen);\n                    pval = pval.substr(0, plen);\n                    offset++;\n                }\n                month = parseInt(pval) - 1;\n                hasMonth = true;\n                break;\n\n                // ** day\n                case 'dddd':\n                case 'ddd':\n                    hasDayName = true;\n                    break; // skip day names\n                case 'dd': case 'd':\n                if (plen > 1 && pval.length > plen) {\n                    vparts[vpi] = pval.substr(plen);\n                    pval = pval.substr(0, plen);\n                    offset++;\n                }\n                day = parseInt(pval);\n                hasDay = true;\n                break;\n\n                // ** hour\n                case 'hh': case 'h':\n                if (plen > 1 && pval.length > plen) {\n                    vparts[vpi] = pval.substr(plen);\n                    pval = pval.substr(0, plen);\n                    offset++;\n                }\n                hour = parseInt(pval);\n                hour = hour == 12 ? 0 : hour; // 0-12, 12 == midnight\n                break;\n                case 'HH':\n                    if (plen > 1 && pval.length > plen) {\n                        vparts[vpi] = pval.substr(plen);\n                        pval = pval.substr(0, plen);\n                        offset++;\n                    }\n                    hour = parseInt(pval); // 0-24\n                    break;\n                case 'H':\n                    hour = parseInt(pval); // 0-24\n                    break;\n\n                // ** minute\n                case 'mm': case 'm':\n                if (plen > 1 && pval.length > plen) {\n                    vparts[vpi] = pval.substr(plen);\n                    pval = pval.substr(0, plen);\n                    offset++;\n                }\n                min = parseInt(pval);\n                break;\n\n                // ** second\n                case 'ss': case 's':\n                if (plen > 1 && pval.length > plen) {\n                    vparts[vpi] = pval.substr(plen);\n                    pval = pval.substr(0, plen);\n                    offset++;\n                }\n                sec = parseInt(pval);\n                break;\n\n                // ** millisecond\n                case 'fffffff': case 'FFFFFFF':\n                case 'ffffff': case 'FFFFFF':\n                case 'fffff': case 'FFFFF':\n                case 'ffff': case 'FFFF':\n                case 'fff': case 'FFF':\n                case 'ff': case 'FF':\n                case 'f': case 'F':\n                ms = parseInt(pval) / Math.pow(10, plen - 3);\n                break;\n\n                // ** am/pm\n                case 'tt': case 't':\n                pval = pval.toUpperCase();\n                if ((cal.pm[0] && pval == cal.pm[0] && hour < 12) ||\n                    (cal.pm[1] && pval == cal.pm[1] && hour < 12)) {\n                    hour += 12;\n                }\n                break;\n\n                // ** quarter\n                case 'q': case 'Q': case 'u': case 'U':\n                hasQuarter = true;\n                break;\n\n                // ** era\n                case 'ggg': case 'gg': case 'g':\n                era = cal.eras.length > 1 ? Globalize._getEra(pval, cal) : -1;\n                break;\n\n                // ** localized separators (TFS 131320)\n                case cal['/']:\n                case cal[':']:\n                    if (pval && pval != fparts[i]) {\n                        return null; // present and wrong separator\n                    }\n                    break;\n\n                // ** time zone (skip )\n                case 'K':\n                    break;\n\n                // ** all else: if not a match, keep using the same pval\n                default:\n                    if (Globalize._unquote(fparts[i]) != pval) {\n                        offset++;\n                    }\n                    break;\n            }\n        }\n\n        // allow dates with no times even if the format requires times\n        if (hasMonth && hasDay) {\n            if (isNaN(hour)) hour = 0;\n            if (isNaN(min)) min = 0;\n            if (isNaN(sec)) sec = 0;\n        }\n\n        // basic validation\n        if (month < 0 || month > 11 || isNaN(month) ||\n            day < 0 || day > 31 || isNaN(day) ||\n            hour < 0 || hour > 24 || isNaN(hour) ||\n            min < 0 || min > 60 || isNaN(min) ||\n            sec < 0 || sec > 60 || isNaN(sec)) {\n            return null;\n        }\n\n        // convert fiscal year/month to calendar\n        if (fiscalFmt) {\n            if (!hasMonth) { // need year and month to convert fiscal to calendar\n                return null;\n            }\n            d = new Date(year, month);\n            d = DateTime.fromFiscal(d, fiscalFmt[0] == 'E');\n            year = d.getFullYear();\n            month = d.getMonth();\n        }\n\n        // if the day name was specified but the day wasn't, the result is meaningless\n        if (hasDayName && !hasDay) {\n            return null;\n        }\n\n        // if the quarter was specified but the month wasn't, the result is meaningless\n        if (hasQuarter && !hasMonth) {\n            return null;\n        }\n\n        // if year not found, use current (as Globalize.js)\n        if (year < 0) {\n            year = new Date().getFullYear();\n        }\n\n        // apply era offset if any, or adjust for two-digit years (see Calendar.TwoDigitYearMax)\n        if (era > -1) {\n            year = year + cal.eras[era].start.getFullYear() - 1;\n        } else if (year < 100) {\n            year += year >= 30 ? 1900 : 2000;\n        }\n\n        // return result\n        d = new Date(year, month, day, hour, min + tzm, sec, ms);\n        return isNaN(d.getTime()) ? null : d;\n    }\n\n    // Chinese/Japanese/Korean characters\n    // http://www.rikai.com/library/kanjitables/kanji_codes.unicode.shtml\n    // NOTE: using 'replace' to keep minifier from switching the escaped Unicode chars into real Unicode.\n    static _CJK = 'a-zu00C0-u017Fu3000-u30ffu4e00-u9faf'.replace(/u/g, '\\\\u');\n\n    /**\n     * Gets the first day of the week according to the current culture.\n     *\n     * The value returned is between zero (Sunday) and six (Saturday).\n     */\n    static getFirstDayOfWeek(): number {\n        const fdw = culture.Globalize.calendar.firstDay;\n        return fdw ? fdw : 0;\n    }\n    /**\n     * Gets the symbol used as a decimal separator in numbers.\n     */\n    static getNumberDecimalSeparator(): string {\n        const ndc = culture.Globalize.numberFormat['.'];\n        return ndc ? ndc : '.';\n    }\n\n    // ** implementation\n\n    // unquotes a string\n    private static _unquote(s: string): string {\n        if (s.length > 1 && s[0] == s[s.length - 1]) {\n            if (s[0] == '\\'' || s[0] == '\\\"') {\n                return s.substr(1, s.length - 2);\n            }\n        }\n        return s;\n    }\n\n    // parse a date format string into its parts\n    private static _dateFomatParts = {};\n    private static _parseDateFormat(format: string): string[] {\n\n        // use cache whenever possible\n        if (format in Globalize._dateFomatParts) {\n            return Globalize._dateFomatParts[format];\n        }\n\n        // parse the format\n        const parts = [],\n              str   = '';\n        let start, end;\n        for (start = 0; start > -1 && start < format.length; start++) {\n            const c = format[start];\n            if (c == '\\'' || c == '\"') { // handle quoted parts\n                end = format.indexOf(c, start + 1); // keep quotes to distinguish from regular date parts\n                if (end > -1) {\n                    parts.push(format.substring(start, end + 1));\n                    start = end;\n                    continue;\n                }\n            }\n            end = start + 1;\n            for (; end < format.length; end++) {\n                if (format[end] != c) break;\n            }\n            parts.push(format.substring(start, end));\n            start = end - 1;\n        }\n\n        // cache and return\n        Globalize._dateFomatParts[format] = parts;\n        return parts;\n    }\n\n    // format a date part into a string\n    private static _formatDatePart(d: Date, format: string, part: string): string {\n        const cal  = culture.Globalize.calendar;\n        let era    = 0, year = 0, ff = 0, fd;\n        const plen = part.length;\n        switch (part) {\n\n            // ** year\n            case 'yyyy': case 'yyy': case 'yy': case 'y': // calendar year\n            case 'EEEE': case 'EEE': case 'EE': case 'E': // fiscal year (govt)\n            case 'eeee': case 'eee': case 'ee': case 'e': // fiscal year (corporate)\n\n            // get the year (calendar or fiscal)\n            fd = part[0] == 'E' ? DateTime.toFiscal(d, true) :\n                part[0] == 'e' ? DateTime.toFiscal(d, false) :\n                    d;\n            year = fd.getFullYear();\n\n            // if the calendar has multiple eras and the format specifies an era,\n            // then adjust the year to count from the start of the era.\n            // if the format has no era, then use the regular (Western) year.\n            if (cal.eras.length > 1 && format.indexOf('g') > -1) {\n                era = Globalize._getEra(d, cal);\n                if (era > -1) {\n                    year = year - cal.eras[era].start.getFullYear() + 1;\n                }\n            }\n\n            // adjust number of digits\n            return Globalize._zeroPad(year, 4).substr(4 - part.length);\n\n            // ** month\n            case 'MMMM':\n                return cal.months[d.getMonth()];\n            case 'MMM':\n                return cal.monthsAbbr[d.getMonth()];\n            case 'MM': case 'M':\n            return Globalize._zeroPad(d.getMonth() + 1, plen);\n\n            // ** day\n            case 'dddd':\n                return cal.days[d.getDay()];\n            case 'ddd':\n                return cal.daysAbbr[d.getDay()];\n            case 'dd':\n                return Globalize._zeroPad(d.getDate(), 2);\n            case 'd':\n                return d.getDate().toString();\n\n            // ** hour\n            case 'hh': case 'h':\n            return Globalize._zeroPad(Globalize._h12(d), plen);\n            case 'HH': case 'H':\n            return Globalize._zeroPad(d.getHours(), plen);\n\n            // ** minute\n            case 'mm': case 'm':\n            return Globalize._zeroPad(d.getMinutes(), plen);\n\n            // ** second\n            case 'ss': case 's':\n            return Globalize._zeroPad(d.getSeconds(), plen);\n\n            // ** millisecond\n            case 'fffffff': case 'FFFFFFF':\n            case 'ffffff': case 'FFFFFF':\n            case 'fffff': case 'FFFFF':\n            case 'ffff': case 'FFFF':\n            case 'fff': case 'FFF':\n            case 'ff': case 'FF':\n            case 'f': case 'F':\n            ff = d.getMilliseconds() * Math.pow(10, plen - 3);\n            return part[0] == 'f' ? Globalize._zeroPad(ff, plen) : ff.toFixed(0);\n\n            // ** am/pm\n            case 'tt':\n                return d.getHours() < 12 ? cal.am[0] : cal.pm[0];\n            case 't':\n                return d.getHours() < 12 ? cal.am[1] : cal.pm[1];\n\n            // ** quarter\n            case 'q': case 'Q': // calendar\n            return (Math.floor(d.getMonth() / 3) + 1).toString();\n            case 'u': case 'U': // quarter (U: govt; u: corp)\n            fd = DateTime.toFiscal(d, part == 'U');\n            return (Math.floor(fd.getMonth() / 3) + 1).toString();\n\n            // ** era\n            case 'ggg': case 'gg': case 'g':\n            if (cal.eras.length > 1) {\n                era = Globalize._getEra(d, cal);\n                if (era > -1) {\n                    return part == 'ggg' ? cal.eras[era].name : part == 'gg' ? cal.eras[era].name[0] : cal.eras[era].symbol;\n                }\n            }\n            return cal.eras[0];\n\n            // ** localized separators\n            case ':':\n            case '/':\n                return cal[part];\n\n            // ** time zone\n            case 'K':\n                const tz = d.toString().match(/(\\+|\\-)(\\d{2})(\\d{2})/);\n                return tz ? tz[1] + tz[2] + tz[3] : '';\n        }\n\n        // unquote part\n        if (plen > 1 && part[0] == part[plen - 1]) {\n            if (part[0] == '\\\"' || part[0] == '\\'') {\n                return part.substr(1, plen - 2);\n            }\n        }\n\n        // return part\n        return part;\n    }\n\n    // get a date's era (used only in Japanese locales)\n    private static _getEra(d: any, cal: any): number {\n        if (isDate(d)) { // find era by start date\n            for (var i = 0; i < cal.eras.length; i++) {\n                if (d >= cal.eras[i].start) {\n                    return i;\n                }\n            }\n        } else if (isString(d)) { // find era by name or symbol\n            for (var i = 0; i < cal.eras.length; i++) {\n                if (cal.eras[i].name) {\n                    if (cal.eras[i].name.indexOf(d) == 0 || cal.eras[i].symbol.indexOf(d) == 0) {\n                        return i;\n                    }\n                }\n            }\n        }\n        return -1; // not found\n    }\n\n    // expand date pattern into full date format\n    private static _expandFormat(format: string): string {\n        const fmt = culture.Globalize.calendar.patterns[format];\n        return fmt ? fmt : format;\n    }\n\n    // format a number with leading zeros\n    private static _zeroPad(num: number, places: number) {\n        const n    = num.toFixed(0),\n              zero = places - n.length + 1;\n        return zero > 0 ? Array(zero).join('0') + n : n;\n    }\n\n    // format an hour to 12 or 24 hour base depending on the calendar\n    private static _h12(d: Date) {\n        const cal = culture.Globalize.calendar;\n        let h     = d.getHours();\n        if (cal.am && cal.am[0]) {\n            h = h % 12;\n            if (h == 0) h = 12;\n        }\n        return h;\n    }\n}\n","/**\n * Rounds or truncates a number to a specified precision.\n *\n * @param value Value to round or truncate.\n * @param prec Number of decimal digits for the result.\n * @param truncate Whether to truncate or round the original value.\n */\nexport function toFixed(value: number, prec: number, truncate: boolean): number {\n    if (truncate) {\n        var s = value.toString(),\n            decPos = s.indexOf('.');\n        if (decPos > -1) {\n            s = s.substr(0, decPos + 1 + prec);\n            value = parseFloat(s);\n        }\n    } else {\n        var s = value.toFixed(prec);\n        value = parseFloat(s);\n    }\n    return value;\n}","import {assert} from \"./assert\";\nimport {isDate} from \"../lang/is-date\";\n/**\n * Asserts that a value is a Date.\n *\n * @param value Value supposed to be a Date.\n * @param nullOK Whether null values are acceptable.\n * @return The Date passed in.\n */\nexport function asDate(value: Date, nullOK = false): Date {\n    assert((nullOK && value == null) || isDate(value), 'Date expected.');\n    return value;\n}\n","/*\n * Represents an event handler (private class)\n */\nimport {IEventHandler} from \"./IEventHandler\";\nexport class EventHandler {\n    handler: IEventHandler;\n    self: any;\n    constructor(handler: IEventHandler, self: any) {\n        this.handler = handler;\n        this.self = self;\n    }\n}","/**\n * Base class for event arguments.\n */\nexport class EventArgs {\n    /**\n     * Provides a value to use with events that do not have event data.\n     */\n    static empty = new EventArgs();\n}","\nimport {asFunction} from \"../core/index\";\nimport {EventHandler} from \"./EventHandler\";\nimport {IEventHandler} from \"./IEventHandler\";\nimport {EventArgs} from \"../eventArgs/EventArgs\";\n/**\n * Represents an event.\n *\n * Wijmo events are similar to .NET events. Any class may define events by\n * declaring them as fields. Any class may subscribe to events using the\n * event's @see:addHandler method and unsubscribe using the @see:removeHandler\n * method.\n *\n * Wijmo event handlers take two parameters: <i>sender</i> and <i>args</i>.\n * The first is the object that raised the event, and the second is an object\n * that contains the event parameters.\n *\n * Classes that define events follow the .NET pattern where for every event\n * there is an <i>on[EVENTNAME]</i> method that raises the event. This pattern\n * allows derived classes to override the <i>on[EVENTNAME]</i> method and\n * handle the event before and/or after the base class raises the event.\n * Derived classes may even suppress the event by not calling the base class\n * implementation.\n *\n * For example, the TypeScript code below overrides the <b>onValueChanged</b>\n * event for a control to perform some processing before and after the\n * <b>valueChanged</b> event fires:\n * <pre>\n *   // override base class\n *   onValueChanged(e: EventArgs) {\n     *   // execute some code before the event fires\n     *   console.log('about to fire valueChanged');\n     *   // optionally, call base class to fire the event\n     *   super.onValueChanged(e);\n     *   // execute some code after the event fired\n     *   console.log('valueChanged event just fired');\n     * }\n * </pre>\n * @deprecated\n */\nexport class Event {\n    private _handlers: EventHandler[] = [];\n\n    /**\n     * @deprecated\n     */\n    constructor(){\n\n    }\n\n    /**\n     * Adds a handler to this event.\n     *\n     * @param handler Function invoked when the event is raised.\n     * @param self Object that defines the event handler\n     * (accessible as 'this' from the handler code).\n     * @deprecated\n     */\n    addHandler(handler: IEventHandler, self?: any) {\n        asFunction(handler);\n        this._handlers.push(new EventHandler(handler, self));\n    }\n    /**\n     * Removes a handler from this event.\n     *\n     * @param handler Function invoked when the event is raised.\n     * @param self Object that defines the event handler (accessible as 'this' from the handler code).\n     * @deprecated\n     */\n    removeHandler(handler: IEventHandler, self?: any) {\n        asFunction(handler);\n        for (let i = 0; i < this._handlers.length; i++) {\n            const l = this._handlers[i];\n            if (l.handler == handler || handler == null) {\n                if (l.self == self || self == null) {\n                    this._handlers.splice(i, 1);\n                    if (handler && self) {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Removes all handlers associated with this event.\n     * @deprecated\n     */\n    removeAllHandlers() {\n        this._handlers.length = 0;\n    }\n    /**\n     * Raises this event, causing all associated handlers to be invoked.\n     *\n     * @param sender Source object.\n     * @param args Event parameters.\n     * @deprecated use EventEmitter.emit() instead\n     */\n    raise(sender: any, args = EventArgs.empty) {\n        for (let i = 0; i < this._handlers.length; i++) {\n            const l = this._handlers[i];\n            l.handler.call(l.self, sender, args);\n        }\n    }\n    /**\n     * Gets a value that indicates whether this event has any handlers.\n     * @deprecated\n     */\n    get hasHandlers(): boolean {\n        return this._handlers.length > 0;\n    }\n}\n","import {Size} from \"./../core/index\";\nimport {EventArgs} from \"../eventArgs/EventArgs\";\nimport {Event} from \"../event/Event\";\nimport {CollectionView} from \"../collections-light/CollectionView\";\nimport {\n    assert,\n    getElement,\n    addClass,\n    createElement,\n    asType,\n    contains,\n    asBoolean,\n    enable,\n    copy,\n    toggleClass\n} from \"../core\";\nimport {isPresent} from  '../core';\n\n\n/**\n * Base class for all Wijmo controls.\n *\n * The @see:Control class handles the association between DOM elements and the\n * actual control. Use the @see:hostElement property to get the DOM element\n * that is hosting a control, or the @see:getControl method to get the control\n * hosted in a given DOM element.\n *\n * The @see:Control class also provides a common pattern for invalidating and\n * refreshing controls, for updating the control layout when its size changes,\n * and for handling the HTML templates that define the control structure.\n */\nexport class Control {\n    private static _DATA_KEY = 'wj-Control';    // key used to store control reference in host element\n    private static _REFRESH_INTERVAL = 10;      // interval between invalidation and refresh\n    private static _wme: HTMLElement;           // watermark element\n    static _touching: boolean;                  // the current event is a touch event\n\n    private _focus = false;                     // whether the control currently contains the focus\n    private _updating = 0;                      // update count (no refreshes while > 0)\n    private _fullUpdate = false;                // in case there are multiple calls to invalidate(x)\n    private _toInv: number;                     // invalidation timeOut\n    private _szCtl: Size;                       // current control size\n    private _e: HTMLElement;                    // host element\n    private _orgOuter: string;                  // host element's original outerHTML\n    private _orgInner: string;                  // host element's original innerHTML\n    private _listeners;                         // list of event listeners attached to this control\n    _orgTag: string;                            // host element's original tag (if not DIV)\n    _orgAtts: NamedNodeMap;                     // host element's original attributes\n\n    /**\n     * Initializes a new instance of a @see:Control and attaches it to a DOM element.\n     *\n     * @param element The DOM element that will host the control, or a selector for the host element (e.g. '#theCtrl').\n     * @param options JavaScript object containing initialization data for the control.\n     * @param invalidateOnResize Whether the control should be invalidated when it is resized.\n     */\n    constructor(element: any, options = null, invalidateOnResize = false) {\n\tconsole.log(\"control_constructor\");\n        // get the host element\n        let host = getElement(element);\n\t\t  this._e = host;\n        host[Control._DATA_KEY] = this;\n\t\t const hd = this._handleDisabled.bind(this);\n this.addEventListener(host, 'click', hd, true);\n    }\n\n      // suppress mouse and keyboard events if the control is disabled\n    private _handleDisabled(e: any) {\n        if (this.disabled) {\n            e.preventDefault();\n            e.stopPropagation();\n            e.stopImmediatePropagation();\n        }\n    }\n\t /**\n     * Gets or sets whether the control is disabled.\n     *\n     * Disabled controls cannot get mouse or keyboard events.\n     */\n    get disabled(): boolean {\n        return this._e && this._e.getAttribute('disabled') != null;\n    }\n    set disabled(value: boolean) {\n        value = asBoolean(value, true);\n        if (value != this.disabled) {\n            enable(this._e, !value);\n        }\n    }\n\t\n\t addEventListener(target: EventTarget, type: string, fn: any, capture = false) {\n            if (target) {\n                target.addEventListener(type, fn, capture);\n                if (this._listeners == null) {\n                    this._listeners = [];\n                }\n                this._listeners.push({ target: target, type: type, fn: fn, capture: capture });\n            }\n        }\n    /**\n     * Applies the template to a new instance of a control, and returns the root element.\n     *\n     * This method should be called by constructors of templated controls.\n     * It is responsible for binding the template parts to the\n     * corresponding control members.\n     *\n     * For example, the code below applies a template to an instance\n     * of an @see:InputNumber control. The template must contain elements\n     * with the 'wj-part' attribute set to 'input', 'btn-inc', and 'btn-dec'.\n     * The control members '_tbx', '_btnUp', and '_btnDn' will be assigned\n     * references to these elements.\n     *\n     * <pre>this.applyTemplate('wj-control wj-inputnumber', template, {\n         *   _tbx: 'input',\n         *   _btnUp: 'btn-inc',\n         *   _btnDn: 'btn-dec'\n         * }, 'input');</pre>\n     *\n     * @param classNames Names of classes to add to the control's host element.\n     * @param template An HTML string that defines the control template.\n     * @param parts A dictionary of part variables and their names.\n     * @param namePart Name of the part to be named after the host element. This\n     * determines how the control submits data when used in forms.\n     */\n    applyTemplate(classNames: string, template: string, parts: Object, namePart?: string): HTMLElement {\n\t\tconsole.log(\"apply_template_start\");\n        const host = this._e;\n\n        // apply standard classes to host element\n        if (classNames) {\n            addClass(host, classNames);\n        }\n\n        // convert string into HTML template and append to host\n        let tpl = null;\n        if (template) {\n            tpl = createElement(template);\n            tpl = host.appendChild(tpl);\n        }\n\n        // make sure the control can get the focus\n        // this is a little tricky:\n        // - Chrome won't give divs the focus unless we set tabIndex to something > -1\n        // - But if we do set it and the control contains input elements, the back-tab key won't work\n        // so we set the tabIndex to -1 or zero depending on whether the control contains input elements.\n        // http://wijmo.com/topic/shift-tab-not-working-for-input-controls-in-ff-and-chrome/, TFS 123457\n        if (host && !host.getAttribute('tabindex')) {\n            host.tabIndex = host.querySelector('input') ? -1 : 0;\n        }\n\n        // bind control variables to template parts\n        if (parts) {\n            for (let part in parts) {\n                const wjPart = parts[part];\n                this[part]   = tpl.querySelector('[wj-part=\"' + wjPart + '\"]');\n\n                // look in the root as well (querySelector doesn't...)\n                if (this[part] == null && tpl.getAttribute('wj-part') == wjPart) {\n                    this[part] = tpl;\n                }\n\n                // make sure we found the part\n                if (this[part] == null) {\n                    throw 'Missing template part: \"' + wjPart + '\"';\n                }\n\n                // copy/move attributes from host to input element\n                if (wjPart == namePart) {\n\n                    // copy parent element's name attribute to the namePart element\n                    // (to send data when submitting forms).\n                    let att = host.attributes['name'];\n                    if (att && att.value) {\n                        this[part].setAttribute('name', att.value);\n                    }\n\n                    // transfer access key\n                    att = host.attributes['accesskey'];\n                    if (att && att.value) {\n                        this[part].setAttribute('accesskey', att.value);\n                        host.removeAttribute('accesskey');\n                    }\n                }\n            }\n        }\n\n        // return template\n\t\tconsole.log(\"apply_template_finish\");\n        return tpl;\n    }\n    /**\n     * Gets the HTML template used to create instances of the control.\n     *\n     * This method traverses up the class hierarchy to find the nearest ancestor that\n     * specifies a control template. For example, if you specify a prototype for the\n     * @see:ComboBox control, it will override the template defined by the @see:DropDown\n     * base class.\n     */\n    getTemplate(): string {\n        for (let p = Object.getPrototypeOf(this); p; p = Object.getPrototypeOf(p)) {\n\n            const tpl = \"sssss\";\n\n        }\n\n        return null;\n    }\n\t  static getControl(element: any): Control {\n        const e = getElement(element);\n        return e ? asType(e[Control._DATA_KEY], Control, true) : null;\n    }\n\t\n\t initialize(options: any) {\n        if (options) {\n         //   this.beginUpdate();\n            copy(this, options);\n          //  this.endUpdate();\n        }\n    }\n\t get hostElement(): HTMLElement {\n        return this._e;\n    }\n\t   get isTouching(): boolean {\n        return Control._touching;\n    }\n\t\n\t  // update focus state and raise got/lost focus events\n    _updateFocusState() {\n\n        // use a timeOut since Chrome and FF sometimes move the focus to the body\n        // before moving it to the new focused element\n        setTimeout(() => {\n\n            // update state for this control\n            const focus = this.containsFocus();\n            if (focus != this._focus) {\n                this._focus = focus;\n                if (focus) {\n                    this.onGotFocus();\n                } else {\n                    this.onLostFocus();\n                }\n                toggleClass(this._e, 'wj-state-focused', focus);\n            }\n\n            // update state for any parent controls as well\n            if (this._e) {\n                for (let e = this._e.parentElement; e; e = e.parentElement) {\n                    const ctl = Control.getControl(e);\n                    if (ctl) {\n                        ctl._updateFocusState();\n                        break;\n                    }\n                }\n            }\n        });\n    }\n\t\n\t containsFocus(): boolean {\n\n        // test for disposed controls\n        if (!this._e) {\n            return false;\n        }\n\n        // scan child controls (they may have popups, TFS 112676)\n        const c = this._e.getElementsByClassName('wj-control');\n        for (let i = 0; i < c.length; i++) {\n            const ctl = Control.getControl(c[i]);\n            if (ctl && ctl != this && ctl.containsFocus()) {\n                return true;\n            }\n        }\n\n        // check for actual HTML containment\n        return contains(this._e, <HTMLElement>document.activeElement);\n    }\n\t\n\t /**\n     * Occurs when the control gets the focus.\n     */\n    gotFocus = new Event();\n    /**\n     * Raises the @see:gotFocus event.\n     */\n    onGotFocus(e?: EventArgs) {\n        this.gotFocus.raise(this, e);\n    }\n    /**\n     * Occurs when the control loses the focus.\n     */\n    lostFocus = new Event();\n    /**\n     * Raises the @see:lostFocus event.\n     */\n    onLostFocus(e?: EventArgs) {\n        this.lostFocus.raise(this, e);\n    }\n}\n","import {toggleClass} from \"./toggle-class\";\n\n/**\n * Enables or disables an element.\n *\n * @param e Element to enable or disable.\n * @param enable Whether to enable or disable the element.\n */\nexport function enable(e: HTMLElement, enable: boolean) {\n    if (enable) {\n        e.removeAttribute('disabled');\n    } else {\n        e.setAttribute('disabled', 'true');\n    }\n    toggleClass(e, 'wj-state-disabled', !enable);\n}\n","/**\n * Creates an element from an HTML string.\n *\n * @param html HTML fragment to convert into an HTMLElement.\n * @return The new element.\n */\nexport function createElement(html: string) : HTMLElement {\n    const div     = document.createElement('div');\n    div.innerHTML = html;\n    return <HTMLElement>div.removeChild(div.firstChild);\n}\n","import {isObject} from \"./lang/is-object\";\nimport {isFunction} from \"./lang/is-function\";\nimport {assert} from \"./asserts/assert\";\n\n\n/**\n * Copies properties from an object to another.\n *\n * This method is typically used to initialize controls and other Wijmo objects\n * by setting their properties and assigning event handlers.\n *\n * The destination object must define all the properties defined in the source,\n * or an error will be thrown.\n *\n * @param dst The destination object.\n * @param src The source object.\n */\nexport function copy(dst: any, src: any) {\n    for (let key in src) {\n        assert(key in dst, 'Unknown key \"' + key + '\".');\n        const value = src[key];\n        if (!dst._copy || !dst._copy(key, value)) { // allow overrides\n            if (dst[key] instanceof Event && isFunction(value)) {\n                dst[key].addHandler(value); // add event handler\n            } else if (isObject(value) && dst[key]) {\n                copy(dst[key], value); // copy sub-objects\n            } else {\n                dst[key] = value; // assign values\n            }\n        }\n    }\n}\n","import {isArray} from \"./is-array\";\nimport {isDate} from \"./is-date\";\n\nexport function isObject(value: any): boolean {\n    return value != null && typeof value == 'object' && !isDate(value) && !isArray(value);\n}\n","import {EventArgs} from \"./EventArgs\";\n\n/**\n * Provides arguments for cancellable events.\n */\nexport class CancelEventArgs extends EventArgs {\n    /**\n     * Gets or sets a value that indicates whether the event should be canceled.\n     */\n    cancel = false;\n}\n","//import {Color} from '../../core';\nimport {Control} from '../Control'\n//import {showPopup, hidePopup} from '../../core/popup'\nimport {setSelectionRange} from  '../../core';\nimport {CancelEventArgs} from \"../../eventArgs/CancelEventArgs\";\nimport {asBoolean} from  '../../core';\nimport {EventArgs} from \"../../eventArgs/EventArgs\";\nimport {contains} from '../../core';\n//import {Key} from \"../../enum/Key\";\nimport {Event} from \"../../event/Event\"\n\n\n/**\n * DropDown control (abstract).\n *\n * Contains an input element and a button used to show or hide the drop-down.\n *\n * Derived classes must override the _createDropDown method to create whatever\n * editor they want to show in the drop down area (a list of items, a calendar,\n * a color editor, etc).\n */\nexport class DropDown extends Control {\n\n    // child elements\n    _tbx: HTMLInputElement;\n    _elRef: HTMLElement;\n    _btn: HTMLElement;\n    _dropDown: HTMLElement;\n\n    // property storage\n    _showBtn    = true;\n    _autoExpand = true;\n\n    // private stuff\n    _oldText: string;\n\n    /**\n     * Gets or sets the template used to instantiate @see:DropDown controls.\n     */\n    static controlTemplate = '<div style=\"position:relative\" class=\"wj-template\">' +\n        '<div class=\"wj-input\">' +\n        '<div class=\"wj-input-group wj-input-btn-visible\">' +\n        '<input wj-part=\"input\" type=\"text\" class=\"wj-form-control\" />' +\n        '<span wj-part=\"btn\" class=\"wj-input-group-btn\" tabindex=\"-1\">' +\n        '<button class=\"wj-btn wj-btn-default\" type=\"button\" tabindex=\"-1\">' +\n        '<span class=\"wj-glyph-down\"></span>' +\n        '</button>' +\n        '</span>' +\n        '</div>' +\n        '</div>' +\n        '<div wj-part=\"dropdown\" class=\"wj-content wj-dropdown-panel\" ' +\n        'style=\"display:none;position:absolute;z-index:100;width:auto\">' +\n        '</div>' +\n        '</div>';\n\n    /**\n     * Initializes a new instance of a @see:DropDown control.\n     *\n     * @param element The DOM element that hosts the control, or a selector for the host element (e.g. '#theCtrl').\n     * @param options The JavaScript object containing initialization data for the control.\n     */\n    constructor(element: any, options?) {\n        super(element,  true);\n\t\tconsole.log(\"drop_down_constructor_start\");\n        // instantiate and apply template\n        const tpl =  '<div style=\"position:relative\" class=\"wj-template\">' +\n        '<div class=\"wj-input\">' +\n        '<div class=\"wj-input-group wj-input-btn-visible\">' +\n        '<input wj-part=\"input\" type=\"text\" class=\"wj-form-control\" />' +\n        '<span wj-part=\"btn\" class=\"wj-input-group-btn\" tabindex=\"-1\">' +\n        '<button class=\"wj-btn wj-btn-default\" type=\"button\" tabindex=\"-1\">' +\n        '<span class=\"wj-glyph-down\"></span>' +\n        '</button>' +\n        '</span>' +\n        '</div>' +\n        '</div>' +\n        '<div wj-part=\"dropdown\" class=\"wj-content wj-dropdown-panel\" ' +\n        'style=\"display:none;position:absolute;z-index:100;width:auto\">' +\n        '</div>' +\n        '</div>';\n        this.applyTemplate(\n            'wj-control wj-dropdown wj-content', tpl, {\n                _tbx     : 'input',\n                _btn     : 'btn',\n                _dropDown: 'dropdown'\n            }, 'input'\n        );\n\n        // set reference element (used for positioning the drop-down)\n        this._elRef = this._tbx;\n\n        // disable autocomplete (important for mobile browsers including Chrome/Android)\n        this._tbx.autocomplete = 'off';\n\n        // create drop-down element, update button display\n        //this._createDropDown();\n        this._updateBtn();\n\n        // update focus state when the drop-down loses focus\n          this.addEventListener(\n            this._dropDown, 'blur', () => {\n                this._updateFocusState();\n            }, true\n        );\n  // textbox events\n        this.addEventListener(\n            this._tbx, 'input', () => {\n                this._setText(this.text, false);\n            }\n        );\n\t\t this.addEventListener(\n            this._tbx, 'click', () => {\n                if (this._autoExpand) {\n                    this._expandSelection(); // expand the selection to the whole number/word that was clicked\n                }\n            }\n        );\n\t\t // in case the drop-down is shown but the control is not (e.g. context menu)\n        this.addEventListener(\n            this.dropDown, 'focus', () => {\n                this._updateFocusState();\n            }\n        );\n // handle clicks on the drop-down button\n        this.addEventListener(this._btn, 'click', this._btnclick.bind(this));\n\n        // stop propagation of clicks on the drop-down element\n        // (since they are not children of the hostElement, which can confuse\n        // elements such as Bootstrap menus)\n        this.addEventListener(\n            this._dropDown, 'click', (e) => {\n                e.stopPropagation();\n            }\n        );\n       console.log(\"drop_down_constructor_finish\");\n    }\n\t /**\n     * Gets the drop down element shown when the @see:isDroppedDown\n     * property is set to true.\n     */\n    get dropDown(): HTMLElement {\n        return this._dropDown;\n    }\n  // update drop-down button visibility\n    _updateBtn() {\n        this._btn.tabIndex      = -1;\n        this._btn.style.display = this._showBtn ? '' : 'none';\n    }\n\t\n\t  _getCharType(text: string, pos: number) {\n        const chr = text[pos];\n        if (chr >= '0' && chr <= '9') return 0;\n        if ((chr >= 'a' && chr <= 'z') || (chr >= 'A' && chr <= 'Z')) return 1;\n        return -1;\n    }\n\n\t\t // expand the current selection to the entire number/string that was clicked\n    _expandSelection() {\n        const tbx = this._tbx,\n              val = tbx.value;\n        let start = tbx.selectionStart,\n              end = tbx.selectionEnd;\n        if (val && start == end) {\n            const ct = this._getCharType(val, start);\n            if (ct > -1) {\n                for (; end < val.length; end++) {\n                    if (this._getCharType(val, end) != ct) {\n                        break;\n                    }\n                }\n                for (; start > 0; start--) {\n                    if (this._getCharType(val, start - 1) != ct) {\n                        break;\n                    }\n                }\n                if (start != end) {\n                    tbx.setSelectionRange(start, end);\n                }\n            }\n        }\n    }\n\t\t\n    // handle clicks on the drop-down button\n    _btnclick(e: MouseEvent) {\n        this.isDroppedDown = !this.isDroppedDown;\n    }\n get isDroppedDown(): boolean {\n        return this._dropDown.style.display != 'none';\n    }\n\t\n\t\n    set isDroppedDown(value: boolean) {\n        value = asBoolean(value) && !this.disabled;\n        if (value != this.isDroppedDown && this.onIsDroppedDownChanging(new CancelEventArgs())) {\n            const dd = this._dropDown;\n            if (value) {\n                if (!dd.style.minWidth) {\n                    dd.style.minWidth = this.hostElement.getBoundingClientRect().width + 'px';\n                }\n                dd.style.display = 'block';\n                this._updateDropDown();\n            } else {\n                if (this.containsFocus()) {\n                    if (!this.isTouching || !this.showDropDownButton) {\n                       this.selectAll();\n\t\t\t\t\t  console.log(\"select_all\");\n                    }\n                }\n               // hidePopup(dd);\n\t\t\t   dd.style.display='none';\n            }\n            this._updateFocusState();\n            this.onIsDroppedDownChanged();\n        }\n    }\n\t /**\n     * Occurs after the drop down is shown or hidden.\n     */\n    isDroppedDownChanged = new Event();\n\n    /**\n     * Raises the @see:isDroppedDownChanged event.\n     */\n    onIsDroppedDownChanged(e?: EventArgs) {\n        this.isDroppedDownChanged.raise(this, e);\n    }\n\n\t _updateDropDown() {\n        if (this.isDroppedDown) {\n          //  this._commitText();\n\t\t  console.log(\"update_drop_down\");\n          //  showPopup(this._dropDown, this.hostElement);\n        }\n    }\n\t get showDropDownButton(): boolean {\n        return this._showBtn;\n    }\n\n    set showDropDownButton(value: boolean) {\n        this._showBtn = asBoolean(value);\n        this._updateBtn();\n    }\n\t // check whether this control or its drop-down contain the focused element.\n    containsFocus(): boolean {\n        return super.containsFocus() || contains(this._dropDown, document.activeElement);\n    }\n  /**\n     * Occurs before the drop down is shown or hidden.\n     */\n    isDroppedDownChanging = new Event();\n\n    /**\n     * Raises the @see:isDroppedDownChanging event.\n     */\n    onIsDroppedDownChanging(e: CancelEventArgs): boolean {\n        this.isDroppedDownChanging.raise(this, e);\n\t\tconsole.log(\"changing\");\n        return !e.cancel;\n    }\n\t// close the drop-down when losing focus\n    onLostFocus(e?: EventArgs) {\n        this._commitText();\n        if (!this.containsFocus()) {\n            this.isDroppedDown = false;\n        }\n\t\tconsole.log(\"on_lost_focus\");\n        super.onLostFocus(e);\n    }\n\t _commitText() {\n        // override in derived classes\n    }\n\t// transfer focus from control to textbox\n    // (but don't show the soft keyboard when the user touches the drop-down button)\n    onGotFocus(e?: EventArgs) {\n        if (!this.isTouching) {\n            this.selectAll();\n        }\n\t\tconsole.log(\"on_got_focus\");\n        super.onGotFocus(e);\n    }\n\t /**\n     * Sets the focus to the control and selects all its content.\n     */\n    selectAll() {\n        if (this._elRef == this._tbx) {\n            setSelectionRange(this._tbx, 0, this.text.length);\n        }\n    }\n /**\n     * Gets or sets the text shown on the control.\n     */\n    get text(): string {\n        return this._tbx.value;\n    }\n\n    set text(value: string) {\n        if (value != this.text) {\n            this._setText(value, true);\n        }\n    }\n\t // update text in textbox\n    _setText(text: string, fullMatch: boolean) {\n\n        // make sure we have a string\n        if (text == null) text = '';\n        text = text.toString();\n\n        // update element\n        if (text != this._tbx.value) {\n            this._tbx.value = text;\n        }\n\n        // fire change event\n        if (text != this._oldText) {\n            this._oldText = text;\n            this.onTextChanged();\n        }\n    }\n  /**\n     * Occurs when the value of the @see:text property changes.\n     */\n    textChanged = new Event();\n\n    /**\n     * Raises the @see:textChanged event.\n     */\n    onTextChanged(e?: EventArgs) {\n        this.textChanged.raise(this, e);\n    }\n}\n","\n//import {Color} from '../../core';\nimport {Control} from '../Control';\n//import {FormatItemEventArgs} from './../FormatItemEventArgs';\nimport {asCollectionView} from '../../core';\n//import {asFunction} from '../../core';\n//import {asString} from '../../core';\n//import {hasItems} from '../../core';\n//import {asNumber} from '../../core';\nimport {toggleClass} from '../../core';\nimport {contains} from '../../core';\n//import {isObject} from '../../core';\n//import {asArray} from '../../core';\n//import {EventArgs} from \"../../eventArgs/EventArgs\";\n//import {escapeHtml} from '../../core';\nimport {hasClass} from '../../core';\n//import {Key} from \"../../enum/Key\";\n//import {tryCast} from '../../core';\n//import {Event} from \"../../event/Event\";\n//import {asBoolean} from '../../core';\n//import { Subscription } from 'rxjs';\n//import {ICollectionView} from \"../../collections-light/interface/ICollectionView\";\nimport {CollectionView} from \"../../collections-light/CollectionView\";\n//import {IEditableCollectionView} from \"../../collections/interface/IEditableCollectionView\";\n//import {NotifyCollectionChangedEventArgs}  from \"../../collections/eventArgs/NotifyCollectionChangedEventArgs\";\n\n\n/**\n * The @see:ListBox control displays a list of items which may contain\n * plain text or HTML, and allows users to select items with the mouse or\n * the keyboard.\n *\n * Use the @see:selectedIndex property to determine which item is currently\n * selected.\n *\n * You can populate a @see:ListBox using an array of strings or you can use\n * an array of objects, in which case the @see:displayPath property determines\n * which object property is displayed on the list.\n *\n * To display HTML rather than plain text, set the @see:isContentHtml property\n * to true.\n *\n * The example below creates a @see:ListBox control and populates it using\n * a 'countries' array. The control updates its @see:selectedIndex and\n * @see:selectedItem properties as the user moves the selection.\n *\n * @fiddle:8HnLx\n */\nexport class ListBox extends Control {\n\n\t// property storage\n\t_items: any; // any[] or ICollectionView\n\t_cv: CollectionView;\n\t_itemFormatter: Function;\n\t_pathDisplay: string;\n\t_pathValue: string;\n\t_pathChecked: string;\n\t_html = false;\n\n\t// work variables\n\t_checking: boolean;\n\t_search = '';\n\t_toSearch: number;\n//private subscription : Subscription;\n\t/**\n\t * Initializes a new instance of a @see:ListBox.\n\t *\n\t * @param element The DOM element that hosts the control, or a selector for the host element (e.g. '#theCtrl').\n\t * @param options The JavaScript object containing initialization data for the control.\n\t */\n\tconstructor(element: any, options?) {\n\t\tsuper(element);\n\n\t\t// instantiate and apply template\n\t\tthis.applyTemplate('wj-control wj-listbox wj-content', null, null);\n\n\t\t// initializing from <select> tag\n\t\tif (this._orgTag == 'SELECT') {\n\t\t\t//this._copyOriginalAttributes(this.hostElement);\n\t\t\t//this._populateSelectElement(this.hostElement);\n\t\t}\n\n\t\t// handle mouse and keyboard\n\t\tconst host = this.hostElement;\n\t\tthis.addEventListener(host, 'click', this._click.bind(this));\n\t\t//this.addEventListener(host, 'keydown', this._keydown.bind(this));\n\t\t//this.addEventListener(host, 'keypress', this._keypress.bind(this));\n\n\t\t// prevent wheel from propagating to parent elements\n\t\t/*this.addEventListener(host, 'onmousewheel' in document ? 'mousewheel' : 'DOMMouseScroll', (e: MouseWheelEvent) => {\n\t\t\tif (host.scrollHeight > host.clientHeight) {\n\t\t\t\tif ((e.wheelDelta > 0 && host.scrollTop == 0) ||\n\t\t\t\t\t(e.wheelDelta < 0 && host.scrollTop + host.clientHeight >= host.scrollHeight)) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t*/\n\n\t\t// initialize control options\n\t\t//this.initialize(options);\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//#region ** overrides\nprivate _click(e: MouseEvent) {\n\t\tconsole.log(\"click on list box\");\n\t\t// select the item that was clicked\n\t\tconst children = this.hostElement.children;\n\t\tfor (let index = 0; index < children.length; index++) {\n\t\t\tif (contains(children[index], e.target)) {\n\t\t\t\tthis.selectedIndex = index;\n\t\t\t\tconsole.log(\"list_box_selected_index_set\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// handle checkboxes\n\t\t/*if (this.checkedMemberPath && this.selectedIndex > -1) {\n\t\t\tconst cb = this._getCheckbox(this.selectedIndex);\n\t\t\tif (cb == e.target) {\n\t\t\t\tthis.setItemChecked(this.selectedIndex, cb.checked);\n\t\t\t}\n\t\t}*/\n\t}\n\t/**\n\t * Refreshes the list.\n\t */\n\trefresh() {\n\t\t//super.refresh();\n\t\t//this._populateList();\n\t}\n\t//#endregion\nget selectedIndex(): number {\n\t\t//return this._cv ? this._cv.currentPosition : -1;\n\t\treturn 1;\n\t}\n\tset selectedIndex(value: number) {\n\t\tif (this._cv) {\n\t\t\t//this._cv.moveCurrentToPosition(asNumber(value));\n\t\t}\n\t}\n\t//--------------------------------------------------------------------------\n\t//#region ** object model\n\n\t/**\n\t * Gets or sets the array or @see:ICollectionView object that contains the list items.\n\t */\n\tget itemsSource(): any {\n\t\treturn this._items;\n\t}\n\tset itemsSource(value: any) {\n\t\tif (this._items != value) {\n\n\t\t\t// unbind current collection view\n\t\t\tthis._items = value;\n\t\t\tthis._cv = asCollectionView(value);\n\t\t\t// update the list\n\t\t\tthis._populateList();\n\t\t//\tthis.onItemsChanged();\n\t\t//\tthis.onSelectedIndexChanged();\n\t\t}\n\t}\n\t// populate the list from the current itemsSource\n\tprivate _populateList() {\n\n\t\t// get ready to populate\n\t\tconst host = this.hostElement;\n\t\tif (host) {\n\n\t\t\t// remember if we have focus\n\t\t\t//const focus = this.containsFocus();\n\n\t\t\t// fire event so user can clean up any current items\n\t\t//\tthis.onLoadingItems();\n\n\t\t\t// populate\n\t\t\thost.innerHTML = '';\n\t\t\tif (this._cv) {\n\t\t\t\tfor (let i = 0; i < this._cv.items.length; i++) {\n\n\t\t\t\t\t// get item text\n\t\t\t\t\t///let text = this.getDisplayValue(i);\n\t\t\t\t\tlet text = this._cv.items[i].name;\n\t\t\t\t\tif (this._html != true) {\n\t\t\t\t\t//\ttext = escapeHtml(text);\n\t\t\t\t\t}\n\n\t\t\t\t\t// add checkbox (without tabindex attribute: TFS 135857)\n\t\t\t\t\t//if (this.checkedMemberPath) {\n\t\t\t\t\t\t//const checked = this._cv.items[i][this.checkedMemberPath];\n\t\t\t\t\t\t//text          = '<label><input type=\"checkbox\"' + (checked ? ' checked' : '') + '> ' + text + '</label>';\n\t\t\t\t\t//}\n\n\t\t\t\t\t// build item\n\t\t\t\t\tconst item = document.createElement('div');\n\t\t\t\t\titem.innerHTML = text;\n\t\t\t\t\titem.className = 'wj-listbox-item';\n\t\t\t\t\tif (hasClass(<HTMLElement>item.firstChild, 'wj-separator')) {\n\t\t\t\t\t\titem.className += ' wj-separator';\n\t\t\t\t\t}\n\n\t\t\t\t\t// allow custom formatting\n\t\t\t\t\t//if (this.formatItem.hasHandlers) {\n\t\t\t\t\t//\tconst e = new FormatItemEventArgs(i, this._cv.items[i], item);\n\t\t\t\t\t\t//this.onFormatItem(e);\n\t\t\t\t\t//}\n\n\t\t\t\t\t// add item to list\n\t\t\t\t\thost.appendChild(item);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// make sure the list is not totally empty\n\t\t\t// or min-height/max-height won't work properly in IE/Edge\n\t\t\tif (host.children.length == 0) {\n\t\t\t\thost.appendChild(document.createElement('div'));\n\t\t\t}\n\n\t\t\t// restore focus\n\t\t\t//if (focus && !this.containsFocus()) {\n\t\t\t//\tthis.focus();\n\t\t\t//}\n\n\t\t\t// scroll selection into view\n\t\t\t//this.showSelection();\n\n\t\t\t// fire event so user can hook up to items\n\t\t\t//this.onLoadedItems();\n\t\t}\n\t}\n\t/**\n\t * Highlights the selected item and scrolls it into view.\n\t */\n\tshowSelection() {\n\tconsole.log(\"show selection _started\");\n\t\tconst index    = this.selectedIndex,\n              host     = this.hostElement,\n              children = host.children;\n        let e: HTMLElement;\n\n\t\t// highlight\n\t\tfor (let i = 0; i < children.length; i++) {\n\t\t\te = <HTMLElement>children[i];\n\t\t\t//toggleClass(e, 'wj-state-selected', i == index);\n\t\t}\n\n\t\t// scroll into view\n\t\tif (index > -1 && index < children.length) {\n\t\t\te = <HTMLElement>children[index];\n\t\t\tconst rco = e.getBoundingClientRect();\n\t\t\tconst rcc = this.hostElement.getBoundingClientRect();\n\t\t\tif (rco.bottom > rcc.bottom) {\n\t\t\t\thost.scrollTop += rco.bottom - rcc.bottom;\n\t\t\t} else if (rco.top < rcc.top) {\n\t\t\t\thost.scrollTop -= rcc.top - rco.top;\n\t\t\t}\n\t\t}\n\n\t\t// make sure the focus is within the selected element (TFS 135278)\n\t\tif (index > -1 && this.containsFocus()) {\n\t\t\te = <HTMLElement>children[index];\n\t\t\tif (e instanceof HTMLElement && !contains(e, document.activeElement)) {\n\t\t\t\te.focus();\n\t\t\t}\n\t\t}\n\t\tconsole.log(\"show selection _finished\");\n\t}\n}\n","import {isArray} from \"../lang/is-array\";\n//import {ICollectionView} from \"../../../../collections/interface/ICollectionView\";\nimport {tryCast} from \"../../common/global\";\nimport {assert} from \"./assert\";\nimport {CollectionView} from \"../../../../collections-light/CollectionView\";\n/**\n * Asserts that a value is an @see:ICollectionView or an Array.\n *\n * @param value Array or @see:ICollectionView.\n * @param nullOK Whether null values are acceptable.\n * @return The @see:ICollectionView that was passed in or a @see:CollectionView\n * created from the array that was passed in.\n */\nexport function asCollectionView(value: any, nullOK = true): CollectionView {\n    if (value == null && nullOK) {\n        return null;\n    }\n    /*const cv = tryCast(value, 'ICollectionView');\n    if (cv != null) {\n        return cv;\n    }\n    if (!isArray(value)) {\n        assert(false, 'Array or ICollectionView expected.');\n    }\n\t*/\n    return new CollectionView(value);\n}\n\n","\n//import {Color} from '../../core';\nimport {DropDown} from './../DropDown/DropDown'\nimport {ListBox} from './../ListBox/ListBox'\n//import {hasItems} from '../../core';\n//import {setSelectionRange} from  '../../core';\n//import {clamp} from  '../../core';\n//import {ICollectionView} from \"../../collections/interface/ICollectionView\";\n//import {asBoolean} from   '../../core';\n//import {asFunction} from   '../../core';\n//import {EventArgs} from \"../../eventArgs/EventArgs\";\n//import {CancelEventArgs} from \"../../eventArgs/CancelEventArgs\";\n//import {Key} from \"../../enum/Key\";\n//import {asNumber} from   '../../core';\n//import {asString} from   '../../core';\n//import {Event} from \"../../event/Event\";\n\n\n/**\n * The @see:ComboBox control allows users to pick strings from lists.\n *\n * The control automatically completes entries as the user types, and allows users\n * to show a drop-down list with the items available.\n *\n * Use the @see:selectedIndex or the @see:text properties to determine which\n * item is currently selected.\n *\n * The @see:isEditable property determines whether users can enter values that\n * are not present in the list.\n *\n * The example below creates a @see:ComboBox control and populates it with a list\n * of countries. The @see:ComboBox searches for the country as the user types.\n * The <b>isEditable</b> property is set to false, so the user is forced to\n * select one of the items in the list.\n *\n * The example also shows how to create and populate a @see:ComboBox using\n * an HTML <b>&lt;select;&gt</b> element with <b>&lt;option;&gt</b> child\n * elements.\n *\n * @fiddle:8HnLx\n */\nexport class ComboBox extends DropDown {\n\n\t// child elements\n\t_lbx: ListBox;\n\n\t// property storage\n\t_required = true;\n\t_editable = false;\n\n\t// private stuff\n\t_composing = false;\n\t_deleting = false;\n\t_settingText = false;\n\t_cvt: HTMLElement;\n\t_hdrPath: string;\n\n\t/**\n\t * Initializes a new instance of a @see:ComboBox control.\n\t *\n\t * @param element The DOM element that hosts the control, or a selector for the host element (e.g. '#theCtrl').\n\t * @param options The JavaScript object containing initialization data for the control.\n\t */\n\tconstructor(element: any, options?) {\n\t\tsuper(element);\nconsole.log(\"combo_constructor_start\");\n\t\tthis._lbx = new ListBox(this._dropDown);\n\t\t// handle IME\n\t\tthis.addEventListener(this._tbx, 'compositionstart', () => {\n\t\t\tthis._composing = true;\n\t\t});\n\t\tthis.addEventListener(this._tbx, 'compositionend', () => {\n\t\t\tthis._composing = false;\n\t\t\tthis._setText(this.text, true);\n\t\t});\n\t\t\t// initialize control options\n\t\tthis.initialize(options);\n\t\tconsole.log(\"combo_constructor_finish\");\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//#region ** object model\n\n_setText(text: string, fullMatch: boolean) {\n\t\t\tconsole.log(\"combo_box_set_text_start\");\n\t\t// not while composing IME text...\n\t\tif (this._composing) return;\n\n\t\t// prevent reentrant calls while moving CollectionView cursor\n\t\tif (this._settingText) return;\n\t\tthis._settingText = true;\n\n\t\t// make sure we have a string\n\t\tif (text == null) text = '';\n\t\ttext = text.toString();\n\t\tsuper._setText(text, fullMatch);\n\t\tconsole.log(\"combo_box_set_text_finish\");\n\n}\n\t/**\n\t * Gets or sets the array or @see:ICollectionView object that contains the items to select from.\n\t */\n\tget itemsSource(): any {\n\t\treturn this._lbx.itemsSource;\n\t}\n\tset itemsSource(value: any) {\n\t\tthis._lbx.itemsSource = value;\n\t\tthis._updateBtn();\n\t}\n\t// create the drop-down element\n\t_createDropDown() {\n\t\tconsole.log(\"create drop down\");\n\t}\n\n}\n"],"names":["ClarityModule","forChild","ngModule","providers","isArray","value","Array","isDate","Date","isNaN","valueOf","isFunction","assert","condition","msg","Error","isNumber","asFunction","nullOK","asNumber","positive","asBoolean","isBoolean","decorators","type","NgModule","args","imports","CommonModule","FormsModule","declarations","exports","ctorParameters","CollectionView","sourceCollection","this","_idx","_newItem","_edtItem","_pgSz","_pgIdx","_updating","_canFilter","_canGroup","_canSort","_canAddNew","_canCancelEdit","_canRemove","_canChangePage","_trackChanges","_pgView","Object","defineProperty","prototype","get","_itemCreator","_srtCvt","set","implementsInterface","interfaceName","isString","asString","asType","tryCast$1","tryCast","hasClass","e","className","getAttribute","rx","RegExp","test","addClass","setAttribute","cn","contains","parent","child","parentNode","toggleClass","addOrRemove","removeClass","replace","getElement","selector","HTMLElement","document","querySelector","jquery","culture","Globalize","numberFormat","NumberDecimalSeparator","NumberGroupSeparator","CurrencySymbol",".",",","percent","pattern","currency","decimals","symbol","dateTimeFormat","TimeSeparator","DateSeparator","/",":","calendar","firstDay","days","daysAbbr","months","monthsAbbr","am","pm","eras","patterns","d","D","f","F","t","T","M","m","Y","y","g","G","s","o","O","U","fiscalYearOffsets","MultiSelect","itemsSelected","FlexGrid","groupHeaderFormat","FlexGridFilter","ascending","descending","apply","clear","conditions","values","search","selectAll","null","header","and","or","stringOperators","name","op","numberOperators","dateOperators","booleanOperators","DateTime","addDays","getFullYear","getMonth","getDate","addMonths","addYears","years","addHours","hours","getHours","addMinutes","minutes","getMinutes","addSeconds","seconds","getSeconds","sameDate","d1","d2","sameTime","equals","getTime","fromDateTime","date","time","toFiscal","govt","cal","fromFiscal","clone","format","trim","truncate","Math","round","formatNumber","formatDate","toString","result","match","nf","f1","toLowerCase","prec","parseInt","scale","length","curr","dp","ts","pow","abs","toUpperCase","toFixed","decPos","indexOf","substr","parseFloat","idx","asDate","toUTCString","toISOString","_expandFormat","parts","_parseDateFormat","str","i","_formatDatePart","neg","pct","parseDate","setHours","setMinutes","setSeconds","hasDayName","hasDay","hasQuarter","hasMonth","fiscalFmt","cjk","_CJK","rxv","vparts","fparts","offset","year","month","day","hour","min","sec","ms","era","vpi","pval","plen","monthName","j","_getEra","_unquote","start","getFirstDayOfWeek","fdw","getNumberDecimalSeparator","ndc","_dateFomatParts","end","c","push","substring","part","fd","ff","_zeroPad","getDay","_h12","getMilliseconds","floor","tz","fmt","num","places","n","zero","join","h","EventHandler","handler","self","EventArgs","empty","Event$1","_handlers","addHandler","removeHandler","l","splice","removeAllHandlers","raise","sender","call","Control","element","options","invalidateOnResize","_focus","_fullUpdate","gotFocus","Event","lostFocus","console","log","host","hd","_e","_DATA_KEY","_handleDisabled","bind","addEventListener","disabled","preventDefault","stopPropagation","stopImmediatePropagation","enable","removeAttribute","target","fn","capture","_listeners","applyTemplate","classNames","template","namePart","tpl","createElement","html","div","innerHTML","removeChild","firstChild","appendChild","tabIndex","wjPart","att","attributes","getTemplate","getControl","initialize","copy","dst","src","key","_copy","_touching","_updateFocusState","_this","setTimeout","focus","containsFocus","onGotFocus","onLostFocus","parentElement","ctl","getElementsByClassName","_REFRESH_INTERVAL","CancelEventArgs","_super","arguments","cancel","__extends","DropDown","_showBtn","_autoExpand","isDroppedDownChanged","isDroppedDownChanging","textChanged","_tbx","_btn","_dropDown","_elRef","autocomplete","_updateBtn","_setText","text","_expandSelection","dropDown","_btnclick","style","display","_getCharType","pos","chr","tbx","val","selectionStart","selectionEnd","ct","setSelectionRange","isDroppedDown","onIsDroppedDownChanging","dd","minWidth","hostElement","getBoundingClientRect","width","_updateDropDown","isTouching","showDropDownButton","onIsDroppedDownChanged","activeElement","_commitText","HTMLInputElement","body","x","fullMatch","_oldText","onTextChanged","controlTemplate","ListBox","_html","_search","_orgTag","_click","children","index","selectedIndex","refresh","_cv","_items","asCollectionView","_populateList","items","item","showSelection","rco","rcc","bottom","scrollTop","top","ComboBox","_required","_editable","_composing","_deleting","_settingText","_lbx","itemsSource","_createDropDown"],"mappings":"mqBAMAA,EAAA,WAAA,SAAAA,YAuBKA,EAALC,SAhBA,WACQ,MAgBO,CAfHC,SAgBUF,EAfVG,UAgBW,OA1BvB,GCDA,SAAAC,EAJCC,GAKG,OAJOA,aAAiBC,MCG5B,SAAAC,EAJCF,GAKG,OAJOA,aAAiBG,OAAQC,MAAOJ,EAAMK,WCGjD,SAAAC,EAJCN,GAKG,MAJyB,mBAAlB,ECMX,SAAAO,EAFCC,EAAAC,GAGG,IAFKD,EAGD,MAFM,IAAIE,MAAM,iCAAmCD,GCH3D,SAAAE,EAJCX,GAKG,MAJyB,iBAAlB,ECOX,SAAAY,EAACZ,EAAAa,GAEG,YAFJ,IAAAA,IAACA,GAAD,GACIN,EAAQM,GAAmB,MAATb,GAAkBM,EAAWN,GAAQ,sBAChDA,ECDX,SAAAc,EAACd,EAAAa,EAAAE,GAEG,QAFJ,IAAAF,IAACA,GAAD,QAAA,IAAAE,IAACA,GAAD,GACIR,EAAQM,GAAmB,MAATb,GAAkBW,EAASX,GAAQ,oBACjDe,GAAYf,GAASA,EAAQ,EAE7B,MAAM,IAAIU,MAAM,6BAEpB,OAAOV,ECPX,SAAAgB,EAAChB,EAAAa,GAEG,YAFJ,IAAAA,IAACA,GAAD,GACIN,EAAQM,GAAmB,MAATb,GCLtB,SAAAiB,EAJCjB,GAKG,MAJyB,kBAAlB,EDQ6BiB,CAAUjB,GAAQ,qBAC/CA,ERwBJL,EAAPuB,WAA2C,CAf3C,CAgBEC,KAAMC,EAAAA,SAAUC,KAAM,CAAA,CAfpBC,QAgBS,CAfLC,EAAAA,aACAC,EAAAA,aAEJC,aAgBc,GADdC,QAgBS,OAkBZ/B,EAADgC,eAAC,WAAA,MAAA,IUlBD,IAAAC,EAAA,WAqCA,SAAAA,EAIKC,GAjCDC,KAAJC,MAGqB,EACjBD,KAAJE,SAGqB,KAFjBF,KAAJG,SAGqB,KADjBH,KAAJI,MAGqB,EAFjBJ,KAAJK,OAGqB,EAFjBL,KAAJM,UAGqB,EADjBN,KAAJO,YAGqB,EAFjBP,KAAJQ,WAGqB,EAFjBR,KAAJS,UAGqB,EAFjBT,KAAJU,YAGqB,EAFjBV,KAAJW,gBAGqB,EAFjBX,KAAJY,YAGqB,EAFjBZ,KAAJa,gBAGqB,EAFjBb,KAAJc,eAGqB,EAYrBd,KAAKe,QAAUhB,EA8Gf,OA/FAiB,OAAAC,eAIKnB,EAJLoB,UAAA,iBAAA,CAAAC,IAAA,WACQ,OAIOnB,KAAKoB,8CAsBpBJ,OAAAC,eAQKnB,EARLoB,UAAA,gBAAA,CAAAC,IAAA,WACQ,OAQOnB,KAAKqB,SAFpBC,IAAA,SAKKpD,GACgB8B,KAAKqB,yCAK1BvB,EAAAoB,UAAAK,oBAAA,SAOKC,GANG,OAAQA,GACJ,IAOK,kBANL,IAOK,0BANL,IAOK,uBANL,IAOK,2BAND,OAOO,EALf,OAOO,GAFfR,OAAAC,eAICnB,EAJDoB,UAAA,QAAA,CAAAC,IAAA,WACQ,OAIOnB,KAAKe,yCAoBpBC,OAAAC,eAGKnB,EAHLoB,UAAA,eAAA,CAAAC,IAAA,WACQ,OAGOnB,KAAKc,eAGpBQ,IAAA,SAAKpD,qCAKL4B,EAvJA,GCnDA,SAAA2B,EAJCvD,GAKG,MAJyB,iBAAlB,ECOX,SAAAwD,EAACxD,EAAAa,GAEG,YAFJ,IAAAA,IAACA,GAAD,GACIN,EAAQM,GAAmB,MAATb,GAAkBuD,EAASvD,GAAQ,oBAC9CA,ECDX,SAAAyD,EAACzD,EAAAmB,EAAAN,GAGG,YAHJ,IAAAA,IAACA,GAAD,GACIb,ECgBJ,SAAA0D,EAAC1D,EAAAmB,GAGG,OAAa,MAATnB,EACO,KAIPuD,EAASpC,GACFb,EAAWN,EAAMqD,sBAAwBrD,EAAMqD,oBAAoBlC,GAAQnB,EAAQ,KAIvFA,aAAiBmB,EAAOnB,EAAQ,KD7B/B2D,CAAQ3D,EAAOmB,GACvBZ,EAAOM,GAAmB,MAATb,EAAemB,EAAO,cAChCnB,EELX,SAAA4D,EAFCC,EAAAC,GAKG,GAAID,GAFKA,EAAEE,aAAc,CAGrB,IAFMC,EAAK,IAAIC,OAAO,MAAQH,EAAY,OAG1C,OAFOD,GAAKG,EAAGE,KAAKL,EAAEE,aAAa,UAIvC,OAFO,ECLX,SAAAI,EACCN,EAAAC,GAEG,GAAID,GACKA,EAAEO,eAAgBR,EAAUC,EAAGC,GAAY,CAAhD,IACMO,EAAKR,EAAEE,aAAa,SAA1BF,EACEO,aAAa,QAASC,EAAKA,EAAK,IAAMP,EAAYA,ICN5D,SAAAQ,EADCC,EAAAC,GAEG,IAAK,IADIX,EAAA,EAAiBA,EAAGA,EAAIA,EAAEY,WAE/B,GAAIZ,IADMU,EAAQ,OAAO,EAG7B,OADO,ECAX,SAAAG,EACCb,EAAAC,EAAAa,GAAOA,EACAR,EACSN,EAAGC,GCNpB,SAAAc,EACCf,EAAAC,GAEG,GAAID,GACKA,EAAEO,cAAgBR,EAASC,EAAGC,GAAY,CAA/C,IACME,EAAK,IAAIC,OAAO,UAAYH,EAAY,MAAO,KAA/CO,EACKR,EAAEE,aAAa,SAA1BF,EACEO,aAAa,QAASC,EAAGQ,QAAQb,EAAI,MDAvCY,CACYf,EAAGC,GETvB,SAAAgB,EACCC,GAAG,OAAIA,aACoBC,YAAoBD,EAAxCxB,EACSwB,GAA+BE,SAASC,cAAcH,GAA/DA,GACYA,EAASI,OAA4BJ,EAAS,GACvD,KCLX,IACCK,EAAA,CAAGC,UAAW,CACPC,aAAc,CACVC,uBAAwB,IACxBC,qBAAsB,IACtBC,eAAgB,IAChBC,IAAK,IACLC,IAAK,IACLC,QAAS,CAACC,QAAS,CAAC,OAAQ,QAC5BC,SAAU,CAACC,SAAU,EAAGC,OAAQ,IAAKH,QAAS,CAAC,OAAQ,QAE3DI,eAAgB,CACZC,cAAe,IACfC,cAAe,IACfC,IAAK,IACLC,IAAK,KAETC,SAAU,CACNF,IAAK,IACLC,IAAK,IACLE,SAAU,EACVC,KAAM,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YACzEC,SAAU,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACrDC,OAAQ,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YACvHC,WAAY,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAC1FC,GAAI,CAAC,KAAM,KACXC,GAAI,CAAC,KAAM,KACXC,KAAM,CAAC,OAAQ,QACfC,SAAU,CACNC,EAAG,WAAYC,EAAG,sBAClBC,EAAG,8BAA+BC,EAAG,iCACrCC,EAAG,UAAWC,EAAG,aACjBC,EAAG,SAAUC,EAAG,SAChBC,EAAG,aAAcC,EAAG,aACpBC,EAAG,mBAAoBC,EAAG,sBAC1BC,EAAG,gCACHC,EAAG,2CACHC,EAAG,2CACHC,EAAG,kCAEPC,kBAAmB,EAAE,GAAI,KAGjCC,YAAa,CACTC,cAAe,6BAEnBC,SAAU,CACNC,kBAAmB,6CAEvBC,eAAgB,CAGZC,UAAW,cACXC,WAAY,eACZC,MAAO,QACPC,MAAO,QACPC,WAAY,sBACZC,OAAQ,kBAGRC,OAAQ,SACRC,UAAW,aACXC,OAAM,YAGNC,OAAQ,6BACRC,IAAK,MACLC,GAAI,KACJC,gBAAiB,CACb,CAACC,KAAM,YAAaC,GAAI,MACxB,CAACD,KAAM,SAAUC,GAAI,GACrB,CAACD,KAAM,iBAAkBC,GAAI,GAC7B,CAACD,KAAM,cAAeC,GAAI,GAC1B,CAACD,KAAM,YAAaC,GAAI,GACxB,CAACD,KAAM,WAAYC,GAAI,GACvB,CAACD,KAAM,mBAAoBC,GAAI,IAEnCC,gBAAiB,CACb,CAACF,KAAM,YAAaC,GAAI,MACxB,CAACD,KAAM,SAAUC,GAAI,GACrB,CAACD,KAAM,iBAAkBC,GAAI,GAC7B,CAACD,KAAM,kBAAmBC,GAAI,GAC9B,CAACD,KAAM,8BAA+BC,GAAI,GAC1C,CAACD,KAAM,eAAgBC,GAAI,GAC3B,CAACD,KAAM,2BAA4BC,GAAI,IAE3CE,cAAe,CACX,CAACH,KAAM,YAAaC,GAAI,MACxB,CAACD,KAAM,SAAUC,GAAI,GACrB,CAACD,KAAM,YAAaC,GAAI,GACxB,CAACD,KAAM,WAAYC,GAAI,IAE3BG,iBAAkB,CACd,CAACJ,KAAM,YAAaC,GAAI,MACxB,CAACD,KAAM,SAAUC,GAAI,GACrB,CAACD,KAAM,iBAAkBC,GAAI,MCjGzCI,EAAA,WAAA,SAAAA,KAmJA,OA3IKA,EAALC,QAAA,SAAKzJ,EAAAwG,GACG,OAAO,IAAIrG,KAAKH,EAAM0J,cAAe1J,EAAM2J,WAAY3J,EAAM4J,UAAYpD,IAQ5EgD,EAALK,UACA,SADK7J,EAAA0G,GAEG,OADO,IAAIvG,KAAKH,EAAM0J,cAAe1J,EAAM2J,WAAajD,EAAQ1G,EAAM4J,YAQzEJ,EAALM,SAEA,SAFK9J,EAAA+J,GAGG,OAFO,IAAI5J,KAAKH,EAAM0J,cAAgBK,EAAO/J,EAAM2J,WAAY3J,EAAM4J,YAQxEJ,EAALQ,SAGA,SAHKhK,EAAAiK,GAIG,OAHO,IAAI9J,KAAKH,EAAM0J,cAAe1J,EAAM2J,WAAY3J,EAAM4J,UAAW5J,EAAMkK,WAAaD,IAQ9FT,EAALW,WAIA,SAJKnK,EAAAoK,GAKG,OAJO,IAAIjK,KAAKH,EAAM0J,cAAe1J,EAAM2J,WAAY3J,EAAM4J,UAAW5J,EAAMkK,WAAYlK,EAAMqK,aAAeD,IAQlHZ,EAALc,WAKA,SALKtK,EAAAuK,GAMG,OALO,IAAIpK,KAAKH,EAAM0J,cAAe1J,EAAM2J,WAAY3J,EAAM4J,UAAW5J,EAAMkK,WAAYlK,EAAMqK,aAAcrK,EAAMwK,aAAeD,IAQtIf,EAALiB,SAMA,SANKC,EAAAC,GAOG,OANOzK,EAAOwK,IAAOxK,EAAOyK,IAOxBD,EANGhB,eAAiBiB,EAAGjB,eAOvBgB,EANGf,YAAcgB,EAAGhB,YAOpBe,EANGd,WAAae,EAAGf,WAQ1BJ,EAALoB,SAOA,SAPKF,EAAAC,GAQG,OAPOzK,EAAOwK,IAAOxK,EAAOyK,IAQxBD,EAPGR,YAAcS,EAAGT,YAQpBQ,EAPGL,cAAgBM,EAAGN,cAQtBK,EAPGF,cAAgBG,EAAGH,cAQ7BhB,EAALqB,OAQA,SARKH,EAAAC,GASG,OAROzK,EAAOwK,IAAOxK,EAAOyK,IAAOD,EAAGI,WAAaH,EAAGG,WAQzDtB,EAALuB,aASA,SATKC,EAAAC,GAUG,OATKD,GAAQC,GACRD,IAAMA,EAAOC,GACbA,IAAMA,EAAOD,GACX,IAAI7K,KAUP6K,EATKtB,cAAesB,EAAKrB,WAAYqB,EAAKpB,UAU1CqB,EATKf,WAAYe,EAAKZ,aAAcY,EAAKT,eALlB,MAa9BhB,EAAL0B,SAUA,SAVKF,EAAAG,GAWG,IAVMC,EAAMhG,EAAQC,UAAUiB,SAW9B,OAVOvG,EAAQqL,EAAIpD,mBACbwB,EAASK,UAAUmB,GAAMI,EAAKpD,kBAAkBmD,EAAO,EAAI,IAC3DH,GAQTxB,EAAL6B,WAWA,SAXKL,EAAAG,GAYG,IAXMC,EAAMhG,EAAQC,UAAUiB,SAY9B,OAXOvG,EAAQqL,EAAIpD,mBACbwB,EAASK,UAAUmB,GAAMI,EAAKpD,kBAAkBmD,EAAO,EAAI,IAC3DH,GAOTxB,EAAL8B,MAYA,SAZKN,GAaG,OAZOxB,EAASuB,aAAaC,EAAMA,IAc3CxB,EAnJA,GCKAnE,EAAA,WAAA,SAAAA,YAyBKA,EAALkG,OADA,SACKvL,EAAAuL,EAAAC,EAAAC,GAYG,OATKF,IAAG5K,EACSX,GAATuL,EACSvL,GAAS0L,KAAKC,MAAM3L,GAAS,KAAO,KAE5CE,EAAWF,KAAZuL,EACS,MAIb5K,EACSX,GACFqF,EAAUuG,aAAa5L,EAAOuL,EAAQC,EAAMC,GAChDvL,EAAWF,GACPqF,EAAUwG,WAAW7L,EAAOuL,GAEnB,MAATvL,EAAgBA,EAAM8L,WAAa,IAqEjDzG,EAALuG,aADA,SACK5L,EAAAuL,EAAAC,EAAAC,GAGG,IACIM,EAJJjL,EACSd,GAATwD,EACS+H,GAET,IACMhE,EAAMgE,EAASA,EAAOS,MAAM,yBAA2B,KAAzDC,EACQ7G,EAAQC,UAAUC,aAA1B4G,EACQ3E,EAAIA,EAAE,GAAG4E,cAAgB,IAAjCC,EACQ7E,GAAMA,EAAE,GAAM8E,SAAS9E,EAAE,IAAa,KAAP2E,EAAcD,EAAGnG,SAASC,SAAW/F,GAAS0L,KAAKC,MAAM3L,GAAS,EAAI,EAA7GsM,EACQ/E,GAAMA,EAAE,GAAM,EAAIA,EAAE,GAAGgF,OAAS,EAAxCC,EACQjF,GAAMA,EAAE,GAAMA,EAAE,GAAK0E,EAAGnG,SAASE,OAAzCyG,EACQR,EAAG,KAAXS,EACQT,EAAG,KAOf,GALIK,IACAtM,GACS0L,KAAKiB,IAAI,GAAIL,IAIhB,KADNJ,GACmB,KAANA,EAAW,CACxB,IADAH,EACSL,KAAKC,MAAMD,KAAKkB,IAAI5M,IAAQ8L,SAAe,KAANI,EAAY,GAAK,IAAxDH,EACOQ,OAASH,GAAnBL,EACS,IAAMA,EAOnB,OANI/L,EACQ,IAAR+L,EACS,IAAMA,GACfR,GACuB,KAAbA,EAAO,KAAjBQ,EACSA,EAAOc,eAEbd,EA6BX,GAzBU,KADNG,IACAlM,GACS,KAGTyL,IACAzL,ECzJZ,SAAA8M,EAFC9M,EAAAoM,EAAAX,GAGG,GAAIA,EAFU,CAGV,IACIsB,GAHAnF,EAAI5H,EAAM8L,YACCkB,QAAQ,MACV,EAETD,IACAnF,EAFIA,EAAEqF,OAAO,EAAGF,EAAS,EAAIX,GAG7BpM,EAFQkN,WAAWtF,QAEpB,CAGH,IAFIA,EAAI5H,EAAM8M,QAAQV,GAGtBpM,EAFQkN,WAAWtF,GAIvB,OAFO5H,EDgJS8M,CAAQ9M,EAAOoM,GAAM,IAGjCL,EACgB,KAAPG,GAAoB,KAANA,EACjBR,KAAKkB,IAAI5M,GAAO8M,QAAQV,GACxBpM,EAAM8M,QAAQV,IAGfZ,GAAc,KAANU,KAAoC,EAAtBH,EAAOiB,QAAQ,OACtCjB,GADAA,EACSA,EAAOlH,QAAQ,kBAAmB,OAC3BA,QAAQ,MAAO,KAIzB,KADN4H,IACAV,EACSA,EAAOlH,QAAQ,IAAK4H,IAG7BC,IACa,KAAPR,GAAoB,KAANA,GAAmB,KAANA,GAAY,CAA7C,IACMiB,EAAMpB,EAAOiB,QAAQP,GAArBzI,EACM,yBAAZ+H,GACkB,EAANoB,EAAWpB,EAAOkB,OAAO,EAAGE,GAAKtI,QAAQb,EAAI0I,GAAMX,EAAOkB,OAAOE,GAAOpB,EAAOlH,QAAQb,EAAI0I,GAIjG,KADNR,IAEAH,EAAUE,EAAGnG,SAASD,QAAQ7F,EAAQ,EAAI,EAAI,GACjC6E,QAAQ,IAAKkH,GAAQlH,QAAQ,IAAK2H,IAIzC,KADNN,IAEAH,EAAUE,EAAGrG,QAAQC,QAAQ7F,EAAQ,EAAI,EAAI,GAChC6E,QAAQ,IAAKkH,IAG9B,OACOA,GA4BV1G,EAALwG,WADA,SACK7L,EAAAuL,GAGG,OAHAvL,EE7NR,SAAAoN,EAACpN,EAAAa,GAEG,YAFJ,IAAAA,IAACA,GAAD,GACIN,EAAQM,GAAmB,MAATb,GAAkBE,EAAOF,GAAQ,kBAC5CA,EF4NKoN,CAAOpN,GAEPuL,GACJ,IACK,IAAL,IACK,IAAD,OACOvL,EAAMqN,cAAjB,IACK,IAAD,OACOrN,EAAMsN,cAAczI,QAAQ,UAAW,IAGtD0G,EACSlG,EAAUkI,cAAchC,GAIjC,IAFA,IACMiC,EAAQnI,EAAUoI,iBAAiBlC,GACrCmC,EAAU,GACLC,EAAI,EAAGA,EAAIH,EAAMjB,OAAQoB,IAA9BD,GACOrI,EAAUuI,gBAAgB5N,EAAOuL,EAAQiC,EAAMG,IAG1D,OACOD,GAUVrI,EAALgH,SADA,SACKrM,EAAAuL,GAAG,OACOG,KAAKC,MAAMtG,EAAU6H,WAAWlN,EAAOuL,KAUjDlG,EAAL6H,WADA,SACKlN,EAAAuL,GAAG,IACMsC,GAA6B,EAArB7N,EAAMgN,QAAQ,OAAmC,EAAtBhN,EAAOgN,QAAQ,OAAkC,EAArBhN,EAAMgN,QAAQ,MAAa,EAAK,EAA/Fc,GAC6B,EAArB9N,EAAMgN,QAAQ,KAAY,IAAM,EAAxCzF,EACQgE,EAASA,EAAOS,MAAM,MAAQ,KAAtCM,EACQ/E,EAAkB,EAAdA,EAAE,GAAGgF,OAAa,EAEpC,GAAIhB,IACwB,KAAdA,EAAQ,IAA0B,KAAbA,EAAO,IACtC,OADAvL,EACQA,EAAM6E,QAAQ,kBAAmB,IAClCwH,SAASrM,EAAO,IAAM6N,EAAMC,EAAMpC,KAAKiB,IAAI,GAAIL,GAG1D,IACIG,EAAKrH,EAAQC,UAAUC,aAAa,KAApCtB,EACK,IAAIC,OAAO,UAAYwI,EAAK,IAAK,KAAtCzM,EACQA,EAAM6E,QAAQb,EAAI,IAAIa,QAAQ4H,EAAI,KAA9C,OACOS,WAAWlN,GAAS6N,EAAMC,EAAMpC,KAAKiB,IAAI,GAAIL,IAUvDjH,EAAL0I,UADA,SACK/N,EAAAuL,GAGG,KADAvL,EACQwD,EAASxD,IACb,OACO,KAGX,GACc,KADVuL,EACA,OACO,IAAIpL,KAAKH,GAIpB,GACc,KADVuL,GAC2B,KAAVA,EAAe,CAAhC,IACMS,EACQhM,EAAMgM,MADN,sEACd,GAAIA,EACM,IAAMA,EAAM,GAAI,CAAtB,IACIhF,EAAIgF,EAAM,GACR,IAAI7L,KAAKkM,SAASL,EAAM,IAAKK,SAASL,EAAM,IAAM,EAAGK,SAASL,EAAM,KACpE,IAAI7L,KAAN6L,EACM,KAANhF,EACEgH,SAAS3B,SAASL,EAAM,KAA1BhF,EACEiH,WAAW5B,SAASL,EAAM,KAA5BhF,EACEkH,WAAWlC,EAAM,GAAKK,SAASL,EAAM,IAAM,SAEjDhF,EACI,IAAI7G,KAAKH,GACjB,OACOI,MAAO4G,EAAE8D,WAAiB,KAAJ9D,EAGjCuE,EACSlG,EAAUkI,cAAchC,GAAkB,KAMnD,IAaM4C,EACYC,EAAQC,EAAYC,EAAUC,EAb1CnD,EAAsDhG,EAAQC,UAAUiB,SAAxEkI,EACsDnJ,EAAUoJ,KAAhEC,EACsD,IAAIzK,OAAO,MAAQmH,EAAI,KAAO,QAAUA,EAAI,KAAO,cAE9FoD,EAAM,eACNA,EAAM,MAAb,MAGNG,EAAwD3O,EAAMgM,MAAM0C,GAAlEE,EACSvJ,EAAUoI,iBAAiBlC,GAASsD,EAAS,EAAtDC,GACsD,EAAIC,EAAQ,EAAGC,EAAM,EAAGC,EAAO,EAAGC,EAAM,EAEhGC,EAAwD,EAAGC,EAA+C,EAAGC,GAAM,EAGvH,KACKV,GAAUA,EAAQpC,QAAUqC,GAAWA,EAAQrC,QAAhD,OACO,KAGX,IAAK,IACIoB,EAAI,EAAGA,EAAIiB,EAAOrC,QAAUoC,EAAQhB,IAAK,CAA9C,IACM2B,EAAO3B,EAAIkB,EACbU,GAAgB,EAAPD,GAAaA,EAAMX,EAAOpC,OAAUoC,EAAOW,GAAO,GACzDE,EAAOZ,EAAOjB,GAAGpB,OAAvB,OAAQqC,EACOjB,IAEX,IACK,OAAQ,IAAK,MAAO,IAAK,KAAM,IAAK,IAAzC,IACK,OAAQ,IAAK,MAAO,IAAK,KAAM,IAAK,IAAzCY,EACYK,EAAOjB,GACnB,IACK,OAAQ,IAAK,MAAO,IAAK,KAAM,IAAK,IAC9B,EADP6B,GACYD,EAAKhD,OAASiD,IAA1Bb,EACOW,GAAOC,EAAKtC,OAAOuC,GAA1BD,EACOA,EAAKtC,OAAO,EAAGuC,GAAtBX,KAEJC,EACOzC,SAASkD,GAAhB,MAGA,IACK,OAAQ,IAAK,MAAlBjB,GACW,EAAX,IACMmB,EAAYF,EAAKpD,cAAvB4C,GACQ,EAAR,IAAK,IACIW,EAAI,EAAGA,EAAI,GAAIA,IAApB,GACsD,GADlDtE,EACI1E,OAAOgJ,GAAGvD,cAAca,QAAQyC,GAAiB,CAArDV,EACQW,EAAR,MAGR,MACA,IACK,KAAM,IAAK,IACL,EADPF,GACYD,EAAKhD,OAASiD,IAA1Bb,EACOW,GAAOC,EAAKtC,OAAOuC,GAA1BD,EACOA,EAAKtC,OAAO,EAAGuC,GAAtBX,KAEJE,EACQ1C,SAASkD,GAAQ,EAAzBjB,GACW,EAAX,MAGA,IACK,OAAL,IACK,MAADH,GACa,EAAb,MACJ,IACK,KAAM,IAAK,IACL,EADPqB,GACYD,EAAKhD,OAASiD,IAA1Bb,EACOW,GAAOC,EAAKtC,OAAOuC,GAA1BD,EACOA,EAAKtC,OAAO,EAAGuC,GAAtBX,KAEJG,EACM3C,SAASkD,GAAfnB,GACS,EAAT,MAGA,IACK,KAAM,IAAK,IACL,EADPoB,GACYD,EAAKhD,OAASiD,IAA1Bb,EACOW,GAAOC,EAAKtC,OAAOuC,GAA1BD,EACOA,EAAKtC,OAAO,EAAGuC,GAAtBX,KAGJI,EACe,KAFfA,EACO5C,SAASkD,IACI,EAAIN,EAAxB,MACA,IACK,KACU,EADPO,GACYD,EAAKhD,OAASiD,IAA1Bb,EACOW,GAAOC,EAAKtC,OAAOuC,GAA1BD,EACOA,EAAKtC,OAAO,EAAGuC,GAAtBX,KAEJI,EACO5C,SAASkD,GAAhB,MACJ,IACK,IAADN,EACO5C,SAASkD,GAAhB,MAGJ,IACK,KAAM,IAAK,IACL,EADPC,GACYD,EAAKhD,OAASiD,IAA1Bb,EACOW,GAAOC,EAAKtC,OAAOuC,GAA1BD,EACOA,EAAKtC,OAAO,EAAGuC,GAAtBX,KAEJK,EACM7C,SAASkD,GAAf,MAGA,IACK,KAAM,IAAK,IACL,EADPC,GACYD,EAAKhD,OAASiD,IAA1Bb,EACOW,GAAOC,EAAKtC,OAAOuC,GAA1BD,EACOA,EAAKtC,OAAO,EAAGuC,GAAtBX,KAEJM,EACM9C,SAASkD,GAAf,MAGA,IACK,UAAW,IAAK,UAArB,IACK,SAAU,IAAK,SAApB,IACK,QAAS,IAAK,QAAnB,IACK,OAAQ,IAAK,OAAlB,IACK,MAAO,IAAK,MAAjB,IACK,KAAM,IAAK,KAAhB,IACK,IAAK,IAAK,IAAfH,EACK/C,SAASkD,GAAQ7D,KAAKiB,IAAI,GAAI6C,EAAO,GAA1C,MAGA,IACK,KAAM,IAAK,IAAhBD,EACOA,EAAK1C,eACPzB,EAAIvE,GAAG,IAAM0I,GAAQnE,EAAIvE,GAAG,IAAMoI,EAAO,IAAzC7D,EACIvE,GAAG,IAAM0I,GAAQnE,EAAIvE,GAAG,IAAMoI,EAAO,MAA1CA,GACQ,IACZ,MAGA,IACK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAnCZ,GACa,EAAb,MAGA,IACK,MAAO,IAAK,KAAM,IAAK,IAA5BgB,EACwB,EAAlBjE,EAAItE,KAAKyF,OAAalH,EAAUsK,QAAQJ,EAAMnE,IAAO,EAA3D,MAGA,KACKA,EAAI,KAAT,KACKA,EAAI,KAAL,GAAImE,GACQA,GAAQX,EAAOjB,GAAvB,OACO,KACX,MAGJ,IACK,IAAD,MAGJ,QACQtI,EACUuK,SAAShB,EAAOjB,KAAO4B,GAAjCV,KAchB,GAPIP,GACYF,IAARhO,MACM6O,KAAOA,EAAO,GAApB7O,MACM8O,KAAMA,EAAM,GAAlB9O,MACM+O,KAAMA,EAAM,IAGtBJ,EACQ,GAAa,GAARA,GAAc3O,MAAM2O,IAAjCC,EACM,GAAW,GAANA,GAAY5O,MAAM4O,IAA7BC,EACO,GAAY,GAAPA,GAAa7O,MAAM6O,IAA/BC,EACM,GAAW,GAANA,GAAY9O,MAAM8O,IAA7BC,EACM,GAAW,GAANA,GAAY/O,MAAM+O,GAA7B,OACO,KAGX,GAAIZ,EACW,CAAX,IACKD,EAAD,OACO,KACXtH,EACI,IAAI7G,KAAK2O,EAAMC,GACnBD,GADA9H,EACIwC,EAAS6B,WAAWrE,EAAmB,KAAhBuH,EAAU,KAC5B7E,cAATqF,EACQ/H,EAAE2C,WAGd,OAAIwE,IACcC,EACP,KAGPC,IACcC,EACP,MAGPQ,EACO,IAAPA,GACO,IAAI3O,MAAOuJ,gBAIZ,EADN2F,EACAP,EACOA,EAAO1D,EAAItE,KAAKuI,GAAKQ,MAAMnG,cAAgB,EAC/CoF,EAAW,MAAdA,GACgB,IAARA,EAAa,KAAO,KAGhC9H,EACI,IAAI7G,KAAK2O,EAAMC,EAAOC,EAAKC,EAAMC,EAlNuB,EAkNZC,EAAKC,GAC9ChP,MAAM4G,EAAE8D,WAAa,KAAO9D,IAatC3B,EAALyK,kBADA,WACQ,IACMC,EAAM3K,EAAQC,UAAUiB,SAASC,SAAvC,OACOwJ,GAAY,GAKtB1K,EAAL2K,0BAAA,WACQ,IAAMC,EAAM7K,EAAQC,UAAUC,aAAa,KAC3C,OAAO2K,GAAY,KAMtB5K,EAALuK,SAAK,SAAAhI,GACG,OAAe,EAAXA,EAAE2E,QAAc3E,EAAE,IAAMA,EAAEA,EAAE2E,OAAS,KACzB,KAAR3E,EAAE,IAAsB,KAARA,EAAE,IACXA,EAAEqF,OAAO,EAAGrF,EAAE2E,OAAS,GAG/B3E,GAKVvC,EAALoI,iBAAK,SAAAlC,GAKG,GAAIA,KAFUlG,EAAU6K,gBAGpB,OAFO7K,EAAU6K,gBAAgB3E,GAMrC,IAAIsE,EAAOM,EAFL3C,EAAQ,GAKd,IAAKqC,EAFQ,GAAW,EAARA,GAAcA,EAAQtE,EAAOgB,OAAQsD,IAAS,CAG1D,IAFMO,EAAI7E,EAAOsE,GAGjB,IAFS,KAELO,GAFkB,KAALA,KAEH,GACVD,EAFM5E,EAAOyB,QAAQoD,EAAGP,EAAQ,IAI5BrC,EAFM6C,KAAK9E,EAAO+E,UAAUT,EAAOM,EAAM,IAGzCN,EAFQM,MAFhB,CASA,IADAA,EAFMN,EAAQ,EACPM,EAAM5E,EAAOgB,QAGZhB,EAFO4E,IAAQC,EADKD,KAK5B3C,EAFM6C,KAAK9E,EAAO+E,UAAUT,EAAOM,IAGnCN,EAFQM,EAAM,GAOlB,OADA9K,EAFU6K,gBAAgB3E,GAAUiC,GAKvCnI,EAALuI,gBAAK,SAAA5G,EAAAuE,EAAAgF,GAOG,IALkCC,EAD5BpF,EAAOhG,EAAQC,UAAUiB,SAC3B+I,EAAS,EAAGP,EAAO,EAAG2B,EAAK,EACzBjB,EAAOe,EAAKhE,OAOlB,OAAQgE,GAGJ,IANK,OAAQ,IAAK,MAAO,IAAK,KAAM,IAAK,IAOzC,IANK,OAAQ,IAAK,MAAO,IAAK,KAAM,IAAK,IAOzC,IANK,OAAQ,IAAK,MAAO,IAAK,KAAM,IAAK,IAyBzC,OAbAzB,GAHA0B,EANgB,KAAXD,EAAK,GAAY/G,EAAS0B,SAASlE,GAAG,GAC5B,KAMXuJ,EANK,GAAY/G,EAAS0B,SAASlE,GAAG,GAOlCA,GALE0C,cAKY,EAMlB0B,EANItE,KAAKyF,SAAoC,EAAtBhB,EAAOyB,QAAQ,OAE5B,GAKVqC,EANMhK,EAAUsK,QAAQ3I,EAAGoE,MAQvB0D,EANOA,EAAO1D,EAAItE,KAAKuI,GAAKQ,MAAMnG,cAAgB,GAKnDrE,EAAUqL,SAAS5B,EAAM,GAAG7B,OAAO,EAAIsD,EAAKhE,QASnD,IANK,OAOD,OANOnB,EAAI1E,OAAOM,EAAE2C,YAOxB,IANK,MAOD,OANOyB,EAAIzE,WAAWK,EAAE2C,YAO5B,IANK,KAAM,IAAK,IAOhB,OANOtE,EAAUqL,SAAS1J,EAAE2C,WAAa,EAAG6F,GAS5C,IANK,OAOD,OANOpE,EAAI5E,KAAKQ,EAAE2J,UAOtB,IANK,MAOD,OANOvF,EAAI3E,SAASO,EAAE2J,UAO1B,IANK,KAOD,OANOtL,EAAUqL,SAAS1J,EAAE4C,UAAW,GAO3C,IANK,IAOD,OANO5C,EAAE4C,UAAUkC,WASvB,IANK,KAAM,IAAK,IAOhB,OANOzG,EAAUqL,SAASrL,EAAUuL,KAAK5J,GAAIwI,GAO7C,IANK,KAAM,IAAK,IAOhB,OANOnK,EAAUqL,SAAS1J,EAAEkD,WAAYsF,GASxC,IANK,KAAM,IAAK,IAOhB,OANOnK,EAAUqL,SAAS1J,EAAEqD,aAAcmF,GAS1C,IANK,KAAM,IAAK,IAOhB,OANOnK,EAAUqL,SAAS1J,EAAEwD,aAAcgF,GAS1C,IANK,UAAW,IAAK,UAOrB,IANK,SAAU,IAAK,SAOpB,IANK,QAAS,IAAK,QAOnB,IANK,OAAQ,IAAK,OAOlB,IANK,MAAO,IAAK,MAOjB,IANK,KAAM,IAAK,KAOhB,IANK,IAAK,IAAK,IAQf,OADAiB,EANKzJ,EAAE6J,kBAAoBnF,KAAKiB,IAAI,GAAI6C,EAAO,GAC7B,KAAXe,EAAK,GAAYlL,EAAUqL,SAASD,EAAIjB,GAAQiB,EAAG3D,QAAQ,GASlE,IANK,KAOD,OANO9F,EAAEkD,WAAa,GAAKkB,EAAIxE,GAAG,GAAKwE,EAAIvE,GAAG,GAOlD,IANK,IAOD,OANOG,EAAEkD,WAAa,GAAKkB,EAAIxE,GAAG,GAAKwE,EAAIvE,GAAG,GASlD,IANK,IAAK,IAAK,IAOf,OANO6E,KAAMoF,MAAM9J,EAAE2C,WAAa,GAAK,GAAGmC,WAO1C,IANK,IAAK,IAAK,IAQf,OADA0E,EANKhH,EAAS0B,SAASlE,EAAW,KAARuJ,IACnB7E,KAAMoF,MAAMN,EAAG7G,WAAa,GAAK,GAAGmC,WAS3C,IANK,MAAO,IAAK,KAAM,IAAK,IAO5B,OANsB,EAMlBV,EANItE,KAAKyF,SAEC,GAKV8C,EANMhK,EAAUsK,QAAQ3I,EAAGoE,IAER,OAARmF,EAAgBnF,EAAItE,KAAKuI,GAAKlG,KAAe,MAARoH,EAAenF,EAAItE,KAAKuI,GAAKlG,KAAK,GAAKiC,EAAItE,KAAKuI,GAAKrJ,OAGlGoF,EAAItE,KAAK,GAShB,IANK,IAOL,IANK,IAOD,OANOsE,EAAImF,GASf,IANK,IAOD,IANMQ,EAAK/J,EAAE8E,WAAWE,MAAM,yBAO9B,OANO+E,EAAKA,EAAG,GAAKA,EAAG,GAAKA,EAAG,GAAK,GAU5C,OANW,EAMPvB,GANYe,EAAK,IAAMA,EAAKf,EAAO,KACpB,KAMXe,EANK,IAAyB,KAAXA,EAAK,IACjBA,EAAKtD,OAAO,EAAGuC,EAAO,GAK9Be,GAIVlL,EAALsK,QAAK,SAAA3I,EAAAoE,GAUG,GAAIlL,EATO8G,IAUP,IAAK,IATI2G,EAAI,EAAGA,EAAIvC,EAAItE,KAAKyF,OAAQoB,IAUjC,GAAI3G,GATKoE,EAAItE,KAAK6G,GAAGkC,MAUjB,OATOlC,OAGZ,GAAApK,EAAayD,GAUhB,IATS2G,EAAI,EAAGA,EAAIvC,EAAItE,KAAKyF,OAAQoB,IAUjC,GAAIvC,EATItE,KAAK6G,GAAGxE,OACuB,GAS/BiC,EATItE,KAAK6G,GAAGxE,KAAK6D,QAAQhG,IAA4C,GAAjCoE,EAAItE,KAAK6G,GAAG3H,OAAOgH,QAAQhG,IAU/D,OATO2G,EAcvB,OATO,GAIVtI,EAALkI,cAAK,SAAAhC,GAYG,IAXMyF,EAAM5L,EAAQC,UAAUiB,SAASS,SAASwE,GAYhD,OAXOyF,GAAYzF,GAItBlG,EAALqL,SAAK,SAAAO,EAAAC,GAeG,IAdMC,EAAOF,EAAInE,QAAQ,GAenBsE,EAdOF,EAASC,EAAE5E,OAAS,EAejC,OAdc,EAAP6E,EAAWnR,MAAMmR,GAAMC,KAAK,KAAOF,EAAIA,GAIjD9L,EAALuL,KAAK,SAAA5J,GAiBG,IAhBMoE,EAAMhG,EAAQC,UAAUiB,SAC1BgL,EAAQtK,EAAEkD,WAqBd,OAJIkB,EAhBIxE,IAAMwE,EAAIxE,GAAG,IAER,IAeT0K,GAhBQ,MACIA,EAAI,IAEbA,KAlxBf,GA+iBWjM,EAAXoJ,KAAkB,uCAAuC5J,QAAQ,KAAM,OAgCpDQ,EAAnB6K,gBAAqC,GGplBrC,IAAAqB,EAOA,SAAAA,EALKC,EAAmCC,GAMhC3P,KAAK0P,QAAUA,EACf1P,KAAK2P,KAAOA,GCVpBC,EAAA,SAAAA,MAGKA,EAALC,MAAK,IAAAD,ECiCL,IAAAE,EAAA,WAKA,SAAAA,IAJY9P,KAAZ+P,UAAwC,GAwExC,OAxDAD,EAAA5O,UAAA8O,WAAA,SACKN,EAAAC,GAAG7Q,EACW4Q,GAAX1P,KACK+P,UAAUxB,KAAK,IAAIkB,EAAaC,EAASC,KAStDG,EAAA5O,UAAA+O,cAAA,SAAKP,EAAAC,GACG7Q,EAAW4Q,GACX,IAAK,IAAI7D,EAAI,EAAGA,EAAI7L,KAAK+P,UAAUtF,OAAQoB,IAAK,CAC5C,IAAMqE,EAAIlQ,KAAK+P,UAAUlE,GACzB,IAAIqE,EAAER,SAAWA,GAAsB,MAAXA,KACpBQ,EAAEP,MAAQA,GAAgB,MAARA,KAClB3P,KAAK+P,UAAUI,OAAOtE,EAAG,GACrB6D,GAAWC,GACX,QAWxBG,EAAA5O,UAAAkP,kBAAA,WACQpQ,KADK+P,UAAUtF,OAAS,GAWhCqF,EAAA5O,UAAAmP,MAAA,SAFKC,EAAA/Q,QAAL,IAAAA,IAAKA,EAAAqQ,EAAAC,OAGG,IAAK,IAFIhE,EAAI,EAAGA,EAAI7L,KAAK+P,UAAUtF,OAAQoB,IAAK,CAG5C,IAFMqE,EAAIlQ,KAAK+P,UAAUlE,GAGzBqE,EAFER,QAAQa,KAAKL,EAAEP,KAAMW,EAAQ/Q,KAU3CyB,OAAAC,eAHK6O,EAGL5O,UAAA,cAAA,CAAAC,IAAA,WACQ,OAH+B,EAAxBnB,KAAK+P,UAAUtF,wCAK9BqF,EAzEA,GCXAU,EAAA,WAuBA,SAAAA,EAIKC,EAAyBC,EAAgBC,QAA9C,IAAAD,IAA8BA,EAA9B,WAAA,IAAAC,IAA8CA,GAA9C,GAnBY3Q,KAAZ4Q,QAAqB,EACT5Q,KAAZM,UAAwB,EACZN,KAAZ6Q,aAA0B,EA2Q1B7Q,KAAA8Q,SA1BK,IAAAC,EAsCL/Q,KAAAgR,UA5BK,IAAAD,EA7OJE,QAAQC,IAAI,uBAEL,IAAIC,EAAOnO,EAAWyN,GAGrBW,IAFLpR,KAAKqR,GAAKF,GACDX,EAAQc,WAAatR,MACfuR,gBAAgBC,KAAKxR,MACvCA,KAAKyR,iBAAiBN,EAAM,QAASC,GAAI,UAQrCZ,EAALtP,UAAAqQ,gBAAK,SAAAxP,GADO/B,KAEK0R,WADL3P,EAEE4P,iBADF5P,EAEE6P,kBADF7P,EAEE8P,6BAOd7Q,OAAAC,eACKuP,EADLtP,UAAA,WAAA,CAAAC,IAAA,WACQ,OACOnB,KAAKqR,IAA0C,MAApCrR,KAAKqR,GAAGpP,aAAa,aAK/CX,IAAA,SAHKpD,IAIGA,EAHQgB,EAAUhB,GAAO,KACZ8B,KAAK0R,UC5E1B,SAAAI,EAAC/P,EAAA+P,GACOA,EACA/P,EAAEgQ,gBAAgB,YAElBhQ,EAAEO,aAAa,WAAY,QAE/BM,EAAYb,EAAG,qBAAqB+P,GD0E5BA,CAHO9R,KAAKqR,IAAInT,oCAa5BsS,EAAAtP,UAAAuQ,iBAAA,SATGO,EAAA3S,EAAA4S,EAAAC,QAAH,IAAAA,IAAGA,GAAH,GAUgBF,IACAA,EATOP,iBAAiBpS,EAAM4S,EAAIC,GACX,MASnBlS,KATKmS,aAULnS,KATKmS,WAAa,IAWtBnS,KATKmS,WAAW5D,KAAK,CAAEyD,OAAQA,EAAQ3S,KAAMA,EAAM4S,GAAIA,EAAIC,QAASA,MAsCpF1B,EAAAtP,UAAAkR,cAAA,SAVKC,EAAAC,EAAA5G,EAAA6G,GAWHtB,QAVQC,IAAI,wBAWN,IAVMC,EAAOnR,KAAKqR,GAadgB,GACAhQ,EAVS8O,EAAMkB,GAcnB,IAVIG,EAAM,KA2BV,GAhBIF,IACAE,EE1IZ,SAAAC,EADCC,GAEG,IADMC,EAAUxP,SAASsP,cAAc,OAGvC,OADAE,EADIC,UAAYF,EACIC,EAAIE,YAAYF,EAAIG,YF8H1BL,CAAcH,GAWpBE,EAVMrB,EAAK4B,YAAYP,IAmBvBrB,IAVQA,EAAMlP,aAAa,cAW3BkP,EAVK6B,SAAW7B,EAAK/N,cAAc,UAAW,EAAK,GAcnDsI,EACA,IAAK,IAVI+C,KAAQ/C,EAAO,CAWpB,IAVMuH,EAASvH,EAAM+C,GAmBrB,GARAzO,KAVKyO,GAAU+D,EAAIpP,cAAc,aAAe6P,EAAS,MAGvC,MAUdjT,KAVKyO,IAAiB+D,EAAIvQ,aAAa,YAAcgR,IAWrDjT,KAVKyO,GAAQ+D,GAIC,MAUdxS,KAVKyO,GAWL,KAVM,2BAA6BwE,EAAS,IAchD,GAAIA,GAVUV,EAAU,CAcpB,IAVIW,EAAM/B,EAAKgC,WAAY,KAWvBD,GAVOA,EAAIhV,OAWX8B,KAVKyO,GAAMnM,aAAa,OAAQ4Q,EAAIhV,QAcxCgV,EAVM/B,EAAKgC,WAAY,YACZD,EAAIhV,QAWX8B,KAVKyO,GAAMnM,aAAa,YAAa4Q,EAAIhV,OAWzCiT,EAVKY,gBAAgB,eAkBrC,OADNd,QAVQC,IAAI,yBACCsB,GAqBfhC,EAAAtP,UAAAkS,YAAA,WACQ,OALO,MAEX5C,EAAJ6C,WAeA,SAfI5C,GAgBI,IAfM1O,EAAIiB,EAAWyN,GAgBrB,OAfO1O,EAAIJ,EAAOI,EAAEyO,EAAQc,WAAYd,GAAS,GAAQ,MAqBjEA,EAAAtP,UAAAoS,WAAA,SAlBG5C,GAmBSA,GGtNZ,SAAA6C,EACCC,EAAAC,GAAG,IAAK,IACIC,KAAOD,EAAK,CAAjBhV,EACOiV,KAAOF,EAAK,gBAAkBE,EAAM,MAA3C,IACMxV,EAAQuV,EAAIC,GACbF,EAAIG,OAASH,EAAKG,MAAMD,EAAKxV,KAA1BsV,EACIE,aAAgB3C,OAASvS,EAAWN,GAAxCsV,EACIE,GAAK1D,WAAW9R,GCnBhB,OADnBA,EDqB+BA,ICpBY,iBAATA,GAAqBE,EAAQF,IAAUD,EAASC,KDoBzCsV,EAAIE,GAE9BF,EACIE,GAAOxV,EAHXqV,EACKC,EAAIE,GAAMxV,ICnB/B,IAHCA,EJqOWqV,CAlBKvT,KAAM0Q,IAyBvB1P,OAAAC,eArBGuP,EAqBHtP,UAAA,cAAA,CAAAC,IAAA,WACQ,OArBOnB,KAAKqR,oCA0BpBrQ,OAAAC,eAxBKuP,EAwBLtP,UAAA,aAAA,CAAAC,IAAA,WACQ,OAxBOqP,EAAQoD,2CA6BvBpD,EAAAtP,UAAA2S,kBAAA,WAAA,IAAAC,EAAA9T,KAIQ+T,WAzBW,WA4BP,IAzBMC,EAAQF,EAAKG,gBAqCnB,GAXID,GAzBSF,EAAKlD,UA0BdkD,EAzBKlD,OAASoD,GA2BVF,EAzBKI,aA2BLJ,EAzBKK,cA2BTvR,EAzBYkR,EAAKzC,GAAI,mBAAoB2C,IA6BzCF,EAzBKzC,GA0BL,IAAK,IAzBItP,EAAI+R,EAAKzC,GAAG+C,cAAerS,EAAGA,EAAIA,EAAEqS,cAAe,CA0BxD,IAzBMC,EAAM7D,EAAQ6C,WAAWtR,GA0B/B,GAAIsS,EAzBK,CA0BLA,EAzBIR,oBA0BJ,WASxBrD,EAAAtP,UAAA+S,cAAA,WAGQ,IA3BKjU,KAAKqR,GA4BN,OA3BO,EAgCX,IADA,IA3BM/C,EAAItO,KAAKqR,GAAGiD,uBAAuB,cAChCzI,EAAI,EAAGA,EAAIyC,EAAE7D,OAAQoB,IAAK,CA4B/B,IA3BMwI,EAAM7D,EAAQ6C,WAAW/E,EAAEzC,IA4BjC,GAAIwI,GA3BOA,GAAOrU,MAAQqU,EAAIJ,gBA4B1B,OA3BO,EAgCf,OA3BOzR,EAASxC,KAAKqR,GAAiBlO,SAAU,gBAsCxDqN,EAAAtP,UAAAgT,WAAA,SA5BKnS,GA6BG/B,KA5BK8Q,SAAST,MAAMrQ,KAAM+B,IAuClCyO,EAAAtP,UAAAiT,YAAA,SA9BKpS,GA+BG/B,KA9BKgR,UAAUX,MAAMrQ,KAAM+B,MA1QnC,GAGmByO,EAAnBc,UAA+B,aACZd,EAAnB+D,kBAAuC,GK7BvC,IAAAC,EAAA,SAAAC,GAAA,SAAAD,IAAA,IAAAV,EAAAW,EAAA/N,MAAA1G,KAAA0U,YAAA1U,YAIA8T,EAAAa,QACK,IAAL,OAJCC,EAADJ,EAAAC,GAIAD,EALA,CACC5E,GCiBDiF,EAAA,SAAAJ,GAsCA,SAAAI,EACKpE,EAAyBC,GAD9B,IAAAoD,EACQW,EADRlE,KAAAvQ,KACcyQ,GAAU,IADxBzQ,KA7BI8T,EAAJgB,UADkB,EAEdhB,EAAJiB,aADkB,EAyMlBjB,EAAAkB,qBAdK,IAAAjE,EAwDL+C,EAAAmB,sBAzBK,IAAAlE,EAmHL+C,EAAAoB,YA3CK,IAAAnE,EAnQHE,QAAQC,IAAI,sCAiBN4C,EAAK1B,cACD,oCAhBS,+fAgBiC,CACtC+C,KAAW,QACXC,KAAW,MACXC,UAAW,YACZ,SAIPvB,EAAKwB,OAASxB,EAAKqB,KAGnBrB,EAAKqB,KAAKI,aAAe,MAIzBzB,EAAK0B,aAGH1B,EAAKrC,iBACHqC,EAAKuB,UAAW,OAAQ,WACpBvB,EAAKD,sBACN,GAGPC,EAAKrC,iBACDqC,EAAKqB,KAAM,QAAS,WAChBrB,EAAK2B,SAAS3B,EAAK4B,MAAM,KAGtC5B,EAAKrC,iBACIqC,EAAKqB,KAAM,QAAS,WACZrB,EAAKiB,aACLjB,EAAK6B,qBAKjB7B,EAAKrC,iBACDqC,EAAK8B,SAAU,QAAS,WACpB9B,EAAKD,sBAIbC,EAAKrC,iBAAiBqC,EAAKsB,KAAM,QAAStB,EAAK+B,UAAUrE,KAAKsC,IAK9DA,EAAKrC,iBACDqC,EAAKuB,UAAW,QAAS,SAACtT,GACtBA,EAAE6P,oBAGXX,QAAQC,IAAI,yCAhHlB0D,EAADC,EAAAJ,GAuHAzT,OAAAC,eAAK4T,EAAL3T,UAAA,WAAA,CAAAC,IAAA,WACQ,OAAOnB,KAAKqV,2CAKpBR,EAAA3T,UAAAsU,WAAA,WACQxV,KAFKoV,KAAKpC,UAAgB,EAG1BhT,KAFKoV,KAAKU,MAAMC,QAAU/V,KAAK8U,SAAW,GAAK,QASvDD,EAAA3T,UAAA8U,aAAA,SANIN,EAAAO,GAOI,IANMC,EAAMR,EAAKO,GAOjB,MANW,KAMPC,GANcA,GAAO,IAAY,EACzB,KAAPA,GAAcA,GAAO,KAAgB,KAARA,GAAeA,GAAO,IAAa,GAC9D,GAWfrB,EAAA3T,UAAAyU,iBAAA,WACQ,IAPMQ,EAAMnW,KAAKmV,KAQXiB,EAPMD,EAAIjY,MACZ6P,EAAQoI,EAAIE,eAQVhI,EAPM8H,EAAIG,aAQhB,GAAIF,GAPOrI,GAASM,EAAK,CAQrB,IAPMkI,EAAKvW,KAAKgW,aAAaI,EAAKrI,GAQlC,IAPS,EAOLwI,EAPS,CAQT,KAPOlI,EAAM+H,EAAI3L,QAQTzK,KAPKgW,aAAaI,EAAK/H,IAAQkI,EADdlI,KAYzB,KAPe,EAARN,GAQC/N,KAPKgW,aAAaI,EAAKrI,EAAQ,IAAMwI,EAD3BxI,KAYdA,GAPSM,GAQT8H,EAPIK,kBAAkBzI,EAAOM,MAgBjDwG,EAAA3T,UAAA2U,UAAA,SATK9T,GAUG/B,KATKyW,eAAgBzW,KAAMyW,eAcnCzV,OAAAC,eAZE4T,EAYF3T,UAAA,gBAAA,CAAAC,IAAA,WACQ,MAZuC,QAAhCnB,KAAKqV,UAAUS,MAAMC,SAkBpCzU,IAAA,SAdKpD,GAgBG,IADAA,EAdQgB,EAAUhB,KAAU8B,KAAM0R,WACrB1R,KAAKyW,eAAiBzW,KAAK0W,wBAAwB,IAAIlC,GAAoB,CAepF,IAdMmC,EAAK3W,KAAKqV,UAeZnX,GAbKyY,EAAGb,MAAMc,WAeVD,EAdGb,MAAMc,SAAW5W,KAAK6W,YAAYC,wBAAwBC,MAAQ,MAgBzEJ,EAdGb,MAAMC,QAAU,QAenB/V,KAdKgX,oBAgBDhX,KAdKiU,kBACAjU,KAAKiX,YAAcjX,KAAMkX,qBAe3BlX,KAdK+G,YAerBkK,QAdQC,IAAI,gBAkBbyF,EAdGb,MAAMC,QAAQ,QAgBX/V,KAdK6T,oBAeL7T,KAdKmX,2DA0BjBtC,EAAA3T,UAAAiW,uBAAA,SAfKpV,GAgBG/B,KAfKgV,qBAAqB3E,MAAMrQ,KAAM+B,IAoB9C8S,EAAA3T,UAAA8V,gBAAA,WACYhX,KAjBKyW,eAmBbxF,QAjBQC,IAAI,qBAwBhBlQ,OAAAC,eApBG4T,EAoBH3T,UAAA,qBAAA,CAAAC,IAAA,WACQ,OApBOnB,KAAK8U,UA0BpBxT,IAAA,SAvBKpD,GAwBG8B,KAvBK8U,SAAW5V,EAAUhB,GAwB1B8B,KAvBKwV,8CA4BbX,EAAA3T,UAAA+S,cAAA,WACQ,OAzBOQ,EAyBfvT,UAzBqB+S,cAyBrB1D,KAAAvQ,OAzBwCwC,EAASxC,KAAKqV,UAAWlS,SAASiU,gBAoC1EvC,EAAA3T,UAAAwV,wBAAA,SA1BK3U,GA6BG,OAFA/B,KA1BKiV,sBAAsB5E,MAAMrQ,KAAM+B,GA2B7CkP,QA1BQC,IAAI,aACCnP,EAAG4S,QAgClBE,EAAA3T,UAAAiT,YAAA,SA7BKpS,GA8BG/B,KA7BKqX,cACArX,KAAKiU,kBA8BNjU,KA7BKyW,eAAgB,GA+B/BxF,QA7BQC,IAAI,iBA8BNuD,EAARvT,UA7BciT,YA6Bd5D,KAAAvQ,KA7B0B+B,IAkC1B8S,EAAA3T,UAAAmW,YAAA,aAOAxC,EAAA3T,UAAAgT,WAAA,SAlCKnS,GACQ/B,KAAKiX,YAmCNjX,KAlCK+G,YAoCfkK,QAlCQC,IAAI,gBAmCNuD,EAARvT,UAlCcgT,WAkCd3D,KAAAvQ,KAlCyB+B,IAwCzB8S,EAAA3T,UAAA6F,UAAA,WACY/G,KAnCKsV,QAAUtV,KAAKmV,MrBtOhC,SAAAqB,EAiBCzU,EAAAgM,EAAAM,GAfG,QAeJ,IAAAA,IAACA,EAADN,GAhBIhM,EAiBIJ,EAAOI,EAAGuV,kBAhBV9U,EAiBSW,SAASoU,KAAMxV,KAAMA,EAAG2P,UAA+B,QAAnB3P,EAAE+T,MAAMC,QAhBrD,IACIhU,EAiBEyU,kBAAkBxX,EAAS+O,GAAQ/O,EAASqP,IAhB9CtM,EAiBEiS,QACJ,MAAAwD,KqBmPEhB,CAnCkBxW,KAAKmV,KAAM,EAAGnV,KAAK0V,KAAKjL,SA0CtDzJ,OAAAC,eApCK4T,EAoCL3T,UAAA,OAAA,CAAAC,IAAA,WACQ,OApCOnB,KAAKmV,KAAKjX,OA0CzBoD,IAAA,SAvCKpD,GAwCOA,GAvCS8B,KAAK0V,MAwCd1V,KAvCKyV,SAASvX,GAAO,oCA+CjC2W,EAAA3T,UAAAuU,SAAA,SA3CKC,EAAA+B,GAGe,MA2CR/B,IA3CcA,EAAO,KA4CzBA,EA3COA,EAAK1L,aAGAhK,KAAKmV,KAAKjX,QA4ClB8B,KA3CKmV,KAAKjX,MAAQwX,GA+ClBA,GA3CQ1V,KAAK0X,WA4Cb1X,KA3CK0X,SAAWhC,EA4ChB1V,KA3CK2X,kBAuDjB9C,EAAA3T,UAAAyW,cAAA,SA5CK5V,GA6CG/B,KA5CKkV,YAAY7E,MAAMrQ,KAAM+B,MAjTrC,CADCyO,GAkBIqE,EAAL+C,gBAAK,+fCUL,IAAAC,EAAA,SAAApD,GAqBA,SAAAoD,EAAEpH,EAAyBC,GAA3B,IAAAoD,EACEW,EADFlE,KAAAvQ,KACQyQ,IADRzQ,KAZC8T,EAADgE,OADS,EAKRhE,EAADiE,QADW,GAaTjE,EAAK1B,cAAc,mCAAoC,KAAM,MAGzD0B,EAAKkE,QAMT,IAAM7G,EAAO2C,EAAK+C,mBAClB/C,EAAKrC,iBAAiBN,EAAM,QAAS2C,EAAKmE,OAAOzG,KAAKsC,MAsMxD,OA1OCc,EAADiD,EAAApD,GA0DCoD,EAAD3W,UAAA+W,OAAC,SAAAlW,GAECkP,QADQC,IAAI,qBAIZ,IADA,IADMgH,EAAWlY,KAAK6W,YAAYqB,SACzBC,EAAQ,EAAGA,EAAQD,EAASzN,OAAQ0N,IAE5C,GAAI3V,EADS0V,EAASC,GAAQpW,EAAEiQ,QAAS,CAExChS,KADKoY,cAAgBD,EAErBlH,QADQC,IAAI,+BAEZ,QAgBJ2G,EAAA3W,UAAAmX,QAAA,aAOArX,OAAAC,eAJC4W,EAID3W,UAAA,gBAAA,CAAAC,IAAA,WAEE,OAJO,GAUTG,IAAA,SAREpD,GASI8B,KARKsY,qCAgBXtX,OAAAC,eANE4W,EAMF3W,UAAA,cAAA,CAAAC,IAAA,WACE,OANOnB,KAAKuY,QAYdjX,IAAA,SAVEpD,GAWI8B,KAVKuY,QAAUra,IAalB8B,KAVKuY,OAASra,EAWd8B,KAVKsY,IC/IR,SAAAE,EADCta,EAAAa,GAEG,YAFJ,IAAAA,IAACA,GAAD,GACiB,MACTb,GADiBa,EACV,KAUJ,IAAIe,EAAe5B,GDoIhBsa,CAAiBta,GAY5B8B,KAVKyY,kDAMNZ,EAAF3W,UAAAuX,cAAE,WAeA,IAZMtH,EAAOnR,KAAK6W,YAalB,GAAI1F,EAZM,CAsBT,GADAA,EAZKyB,UAAY,GAab5S,KAZKsY,IAaR,IAAK,IAZIzM,EAAI,EAAGA,EAAI7L,KAAKsY,IAAII,MAAMjO,OAAQoB,IAAK,CAgB/C,IAZI6J,EAAO1V,KAAKsY,IAAII,MAAM7M,GAAGxE,KAazBrH,KAZK8X,MAuBT,IAZMa,EAAOxV,SAASsP,cAAc,OAapCkG,EAZK/F,UAAY8C,EAajBiD,EAZK3W,UAAY,kBAabF,EAZsB6W,EAAM,WAAW,kBAa1CA,EAZK3W,WAAa,iBAsBnBmP,EAZK4B,YAAY4F,GAMS,GAYxBxH,EAZK+G,SAASzN,QAajB0G,EAZK4B,YAAY5P,SAASsP,cAAc,UA+B5CoF,EAAA3W,UAAA0X,cAAA,WACC3H,QAbQC,IAAI,2BAoBX,IANA,IAVUnP,EAHJoW,EAAWnY,KAAKoY,cAcVjH,EAbWnR,KAAK6W,YAchBqB,EAbW/G,EAAK+G,SAInBrM,EAAI,EAAGA,EAAIqM,EAASzN,OAAQoB,IAcpC9J,EAbiBmW,EAASrM,GAkB3B,IAbY,EAaRsM,GAbcA,EAAQD,EAASzN,OAAQ,CAe1C,IAbMoO,GAYN9W,EAbiBmW,EAASC,IACZrB,wBACRgC,EAAM9Y,KAAK6W,YAAYC,wBAczB+B,EAbIE,OAASD,EAAIC,OAcpB5H,EAbK6H,WAAaH,EAAIE,OAASD,EAAIC,OAC7BF,EAAQI,IAAMH,EAAIG,MAcxB9H,EAbK6H,WAAaF,EAAIG,IAAMJ,EAAII,MAKtB,EAaRd,GAbcnY,KAAKiU,kBActBlS,EAbiBmW,EAASC,cACTjV,cAAeV,EAAUT,EAAGoB,SAASiU,gBAcrDrV,EAbEiS,QAgBJ/C,QAbQC,IAAI,6BAed2G,EAzOA,CADCrH,GEpBD0I,EAAA,SAAAzE,GAqBA,SAAAyE,EAcEzI,EAAyBC,GAd3B,IAAAoD,EACEW,EADFlE,KAAAvQ,KACQyQ,IADRzQ,YAfC8T,EAADqF,WAaa,EAZZrF,EAADsF,WAaa,EAVZtF,EAADuF,YAac,EAZbvF,EAADwF,WAaa,EAZZxF,EAADyF,cAagB,EAFhBtI,QAAQC,IAAI,2BACV4C,EAAK0F,KAAO,IAAI3B,EAAQ/D,EAAKuB,WAE7BvB,EAAKrC,iBAAiBqC,EAAKqB,KAAM,mBAAoB,WACpDrB,EAAKuF,YAAa,IAEnBvF,EAAKrC,iBAAiBqC,EAAKqB,KAAM,iBAAkB,WAClDrB,EAAKuF,YAAa,EAClBvF,EAAK2B,SAAS3B,EAAK4B,MAAM,KAG1B5B,EAAKR,WAAW5C,GAChBO,QAAQC,IAAI,8BA6Cd,OAnEC0D,EAADsE,EAAAzE,GA6BAyE,EAAAhY,UAAAuU,SAAA,SAaCC,EAAA+B,GAZExG,QAaQC,IAAI,4BAXTlR,KAaKqZ,YAVLrZ,KAaKuZ,eAZTvZ,KAaKuZ,cAAe,EAGR,MAbR7D,IAacA,EAAO,IAZzBA,EAaOA,EAAK1L,WAZZyK,EAAFvT,UAaQuU,SAbRlF,KAAAvQ,KAaiB0V,EAAM+B,GAZrBxG,QAaQC,IAAI,+BANdlQ,OAAAC,eAYEiY,EAZFhY,UAAA,cAAA,CAAAC,IAAA,WACE,OAYOnB,KAAKwZ,KAAKC,aANnBnY,IAAA,SAQEpD,GAPA8B,KAQKwZ,KAAKC,YAAcvb,EAPxB8B,KAQKwV,8CAHP0D,EAAAhY,UAAAwY,gBAAA,WACEzI,QAMQC,IAAI,qBAHdgI,EAhFA,CAaCrE"}
