{"version":3,"file":"ui-components-light.umd.min.js","sources":["~/ui-components-light/src/clarity-light/clarity.module.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/lang/is-array.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/lang/is-date.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/lang/is-function.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/asserts/assert.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/lang/is-number.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/asserts/asFunction.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/asserts/asNumber.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/asserts/asBoolean.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/lang/is-boolean.ts","~/ui-components-light/src/clarity-light/wigfrid-light/eventArgs/EventArgs.ts","~/ui-components-light/src/clarity-light/wigfrid-light/eventArgs/CancelEventArgs.ts","~/ui-components-light/src/clarity-light/wigfrid-light/collections-light/CollectionView.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/asserts/asInt.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/lang/is-int.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/asserts/asArray.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/common/global.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/lang/is-string.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/asserts/asString.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/asserts/asType.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/dom/has-class.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/dom/add-class.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/dom/contains.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/dom/toggle-class.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/dom/remove-class.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/dom/get-element.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/globalization/Localization.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/common/datetime/datetime.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/globalization/Globalize.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/math/to-fixed.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/asserts/asDate.ts","~/ui-components-light/src/clarity-light/wigfrid-light/event/EventHandler.ts","~/ui-components-light/src/clarity-light/wigfrid-light/event/Event.ts","~/ui-components-light/src/clarity-light/wigfrid-light/comp-light/Control.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/dom/enable.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/dom/create-element.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/copy.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/lang/is-object.ts","~/ui-components-light/src/clarity-light/wigfrid-light/comp-light/DropDown/DropDown.ts","~/ui-components-light/src/clarity-light/wigfrid-light/comp-light/ListBox/ListBox.ts","~/ui-components-light/src/clarity-light/wigfrid-light/core/src/util/asserts/asCollectionView.ts","~/ui-components-light/src/clarity-light/wigfrid-light/comp-light/ComboBox/ComboBox.ts"],"sourcesContent":["/*\n * Copyright (c) 2016 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport {CommonModule} from \"@angular/common\";\nimport {FormsModule} from \"@angular/forms\";\nimport { ModuleWithProviders, NgModule } from \"@angular/core\";\n\n//import {ALERT_DIRECTIVES} from \"./alert/index\";\n//import {CHECKBOX_DIRECTIVES} from \"./checkboxes/index\";\n//import {CODE_HIGHLIGHT_DIRECTIVES} from \"./code/index\";\n//import {DATAGRID_DIRECTIVES} from \"./datagrid/index\";\n//import {DROPDOWN_DIRECTIVES} from \"./dropdown/index\";\n//import {LAYOUT_DIRECTIVES} from \"./layout/index\";\n//import {MODAL_DIRECTIVES} from \"./modal/index\";\n//import {NAVIGATION_DIRECTIVES} from \"./nav/index\";\n//import {STACK_VIEW_DIRECTIVES} from \"./stack-view/index\";\n//import {TABS_DIRECTIVES} from \"./tabs/index\";\n//import {TREE_VIEW_DIRECTIVES} from \"./tree-view/index\";\n//import {WIZARD_DIRECTIVES} from \"./wizard/index\";\n//import {ICON_DIRECTIVES} from \"./iconography/index\";\n\n//import {ClrResponsiveNavigationService} from \"./nav/clrResponsiveNavigationService\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule\n    ],\n    declarations: [\n        //ALERT_DIRECTIVES,\n        //CHECKBOX_DIRECTIVES,\n        //CODE_HIGHLIGHT_DIRECTIVES,\n       // DATAGRID_DIRECTIVES,\n       // DROPDOWN_DIRECTIVES,\n       // LAYOUT_DIRECTIVES,\n       // MODAL_DIRECTIVES,\n       // NAVIGATION_DIRECTIVES,\n       // STACK_VIEW_DIRECTIVES,\n       // TABS_DIRECTIVES,\n       // TREE_VIEW_DIRECTIVES,\n       // WIZARD_DIRECTIVES,\n       // ICON_DIRECTIVES\n    ],\n    exports: [\n        //ALERT_DIRECTIVES,\n        //CHECKBOX_DIRECTIVES,\n        //CODE_HIGHLIGHT_DIRECTIVES,\n        //DATAGRID_DIRECTIVES,\n       // DROPDOWN_DIRECTIVES,\n       // LAYOUT_DIRECTIVES,\n       // MODAL_DIRECTIVES,\n       // NAVIGATION_DIRECTIVES,\n       // STACK_VIEW_DIRECTIVES,\n       // TABS_DIRECTIVES,\n       // TREE_VIEW_DIRECTIVES,\n       // WIZARD_DIRECTIVES,\n       // ICON_DIRECTIVES\n    ]\n})\nexport class ClarityModule {\n   \n\n    static forChild(): ModuleWithProviders {\n        return {\n            ngModule: ClarityModule,\n            providers: []\n        };\n    }\n}\n","\nexport function isArray(value: any): boolean {\n    return value instanceof Array;\n}\n","\nexport function isDate(value: any): boolean {\n    return value instanceof Date && !isNaN(value.valueOf());\n}\n","\nexport function isFunction(value: any): boolean {\n    return typeof (value) == 'function';\n}\n","/**\n * Throws an exception if a condition is false.\n *\n * @param condition Condition expected to be true.\n * @param msg Message of the exception if the condition is not true.\n */\nexport function assert(condition: boolean, msg: string) {\n    if (!condition) {\n        throw new Error('** Assertion failed in Wijmo: ' + msg);\n    }\n}\n","\nexport function isNumber(value: any): boolean {\n    return typeof (value) == 'number';\n}\n","import {assert} from \"./assert\";\nimport {isFunction} from \"../lang/is-function\";\n/**\n * Asserts that a value is a function.\n *\n * @param value Value supposed to be a function.\n * @param nullOK Whether null values are acceptable.\n * @return The function passed in.\n */\nexport function asFunction(value: any, nullOK = true): Function {\n    assert((nullOK && value == null) || isFunction(value), 'Function expected.');\n    return value;\n}\n","import {assert} from \"./assert\";\nimport {isNumber} from \"../lang/is-number\";\n/**\n * Asserts that a value is a number.\n *\n * @param value Value supposed to be numeric.\n * @param nullOK Whether null values are acceptable.\n * @param positive Whether to accept only positive numeric values.\n * @return The number passed in.\n */\nexport function asNumber(value: number, nullOK: boolean = false, positive: boolean = false): number {\n    assert((nullOK && value == null) || isNumber(value), 'Number expected.');\n    if (positive && value && value < 0) {\n        debugger;\n        throw new Error('Positive number expected.');\n    }\n    return value;\n}\n","import {assert} from \"./assert\";\nimport {isBoolean} from \"../lang/is-boolean\";\n/**\n * Asserts that a value is a Boolean.\n *\n * @param value Value supposed to be Boolean.\n * @param nullOK Whether null values are acceptable.\n * @return The Boolean passed in.\n */\nexport function asBoolean(value: boolean, nullOK = false): boolean {\n    assert((nullOK && value == null) || isBoolean(value), 'Boolean expected.');\n    return value;\n}\n","\nexport function isBoolean(value: any): boolean {\n    return typeof (value) == 'boolean';\n}\n","/**\n * Base class for event arguments.\n */\nexport class EventArgs {\n    /**\n     * Provides a value to use with events that do not have event data.\n     */\n    static empty = new EventArgs();\n}","import {EventArgs} from \"./EventArgs\";\n\n/**\n * Provides arguments for cancellable events.\n */\nexport class CancelEventArgs extends EventArgs {\n    /**\n     * Gets or sets a value that indicates whether the event should be canceled.\n     */\n    cancel = false;\n}\n","//import {DateTime} from \"../core/index\";\nimport {Event} from \"../event/Event\";\nimport {EventArgs} from \"../eventArgs/EventArgs\";\nimport {CancelEventArgs} from \"../eventArgs/CancelEventArgs\";\nimport {assert, asFunction, asBoolean, clamp, isPrimitive, tryCast, asArray, asInt} from \"../core\";\n//import {ObservableArray} from \"./ObservableArray\";\n//import {IEditableCollectionView} from \"../collections/interface/IEditableCollectionView\";\n//import {IPagedCollectionView} from \"../collections/interface/IPagedCollectionView\";\n//import {INotifyCollectionChanged} from \"../collections/interface/INotifyCollectionChanged\";\n//import {IPredicate} from \"../collections/interface/IPredicate\";\n//import {ICollectionView} from \"./interface/ICollectionView\";\n//import {GroupDescription} from \"./GroupDescription\";\n//import {NotifyCollectionChangedEventArgs} from \"./eventArgs/NotifyCollectionChangedEventArgs\";\n//import {PageChangingEventArgs} from \"./eventArgs/PageChangingEventArgs\";\n//import {SortDescription} from \"./SortDescription\";\n//import {NotifyCollectionChangedAction} from \"../enum/collections/NotifyCollectionChangedAction\";\n//import {CollectionViewGroup} from \"./CollectionViewGroup\";\nimport {EventEmitter} from \"@angular/core\";\n//import {$$observable} from \"rxjs/symbol/observable\";\nimport { of } from 'rxjs/observable/of';\n\n\n//import {Observable, Subscriber} from \"rxjs/Rx\";\n\n/**\n * Class that implements the @see:ICollectionView interface to expose data in\n * regular JavaScript arrays.\n *\n * The @see:CollectionView class implements the following interfaces:\n * <ul>\n *   <li>@see:ICollectionView: provides current record management,\n *       custom sorting, filtering, and grouping.</li>\n *   <li>@see:IEditableCollectionView: provides methods for editing,\n *       adding, and removing items.</li>\n *   <li>@see:IPagedCollectionView: provides paging.</li>\n * </ul>\n *\n * To use the @see:CollectionView class, start by declaring it and passing a\n * regular array as a data source. Then configure the view using the\n * @see:filter, @see:sortDescriptions, @see:groupDescriptions, and\n * @see:pageSize properties. Finally, access the view using the @see:items\n * property. For example:\n *\n * <pre>\n *   // create a new CollectionView\n *   var cv = new wijmo.collections.CollectionView(myArray);\n *   // sort items by amount in descending order\n *   var sd = new wijmo.collections.SortDescription('amount', false);\n *   cv.sortDescriptions.push(sd);\n *   // show only items with amounts greater than 100\n *   cv.filter = function(item) { return item.amount > 100 };\n *   // show the sorted, filtered result on the console\n *   for (var i = 0; i &lt; cv.items.length; i++) {\n     *     var item = cv.items[i];\n     *     console.log(i + ': ' + item.name + ' ' + item.amount);\n     *   }\n * </pre>\n * @deprecated\n */\nexport class CollectionView  {\n    _src: any[];\n   // _ncc: INotifyCollectionChanged;\n    _view: any[];\n    _pgView: any[];\n  //  _groups: CollectionViewGroup[];\n  //  _fullGroups: CollectionViewGroup[];\n    _digest: string;\n    _idx           = -1;\n   // _filter: IPredicate;\n   // _srtDsc        = new ObservableArray();\n   // _grpDesc       = new ObservableArray();\n    _newItem       = null;\n    _edtItem       = null;\n    _edtClone: any;\n    _pgSz          = 0;\n    _pgIdx         = 0;\n    _updating      = 0;\n    _itemCreator: Function;\n    _canFilter     = true;\n    _canGroup      = true;\n    _canSort       = true;\n    _canAddNew     = true;\n    _canCancelEdit = true;\n    _canRemove     = true;\n    _canChangePage = true;\n    _trackChanges  = false;\n   // _chgAdded      = new ObservableArray();\n   // _chgRemoved    = new ObservableArray();\n    //_chgEdited     = new ObservableArray();\n    _srtCvt: Function;\n\n    /**\n     * Initializes a new instance of a @see:CollectionView.\n     *\n     * @param sourceCollection Array that serves as a source for this\n     * @see:CollectionView.\n     */\n    constructor(sourceCollection?: any) {\n\t\tconsole.log(\"collection_view_constructor_started\");\n        // check that sortDescriptions contains SortDescriptions\n       \n\t\tthis._pgView = sourceCollection;\n        // initialize the source collection\n        this.sourceCollection = sourceCollection ;\n\t\tconsole.log(\"collection_view_constructor_finished\");\n    }\n\n    /**\n     * Gets or sets a function that creates new items for the collection.\n     *\n     * If the creator function is not supplied, the @see:CollectionView\n     * will try to create an uninitilized item of the appropriate type.\n     *\n     * If the creator function is supplied, it should be a function that\n     * takes no parameters and returns an initialized object of the proper\n     * type for the collection.\n     */\n    get newItemCreator(): Function {\n        return this._itemCreator;\n    }\n/*\n    set newItemCreator(value: Function) {\n        this._itemCreator = asFunction(value);\n    }\n*/\n    /**\n     * Gets or sets a function used to convert values when sorting.\n     *\n     * If provided, the function should take as parameters a\n     * @see:SortDescription, a data item, and a value to convert,\n     * and should return the converted value.\n     *\n     * This property provides a way to customize sorting. For example,\n     * the @see:FlexGrid control uses it to sort mapped columns by\n     * display value instead of by raw value.\n     *\n     * For example, the code below causes a @see:CollectionView to\n     * sort the 'country' property, which contains country code integers,\n     * using the corresponding country names:\n     *\n     * <pre>var countries = 'US,Germany,UK,Japan,Italy,Greece'.split(',');\n     * collectionView.sortConverter = function (sd, item, value) {\n         *   if (sd.property == 'countryMapped') {\n         *     value = countries[value]; // convert country id into name\n         *   }\n         *   return value;\n         * }</pre>\n     */\n    get sortConverter(): Function {\n        return this._srtCvt;\n    }\n\n    set sortConverter(value: Function) {\n        if (value != this._srtCvt) {\n           // this._srtCvt = asFunction(value, true);\n        }\n    }\n\n    // ** IQueryInterface\n\n    /**\n     * Returns true if the caller queries for a supported interface.\n     *\n     * @param interfaceName Name of the interface to look for.\n     */\n    implementsInterface(interfaceName: string): boolean {\n        switch (interfaceName) {\n            case 'ICollectionView':\n            case 'IEditableCollectionView':\n            case 'IPagedCollectionView':\n            case 'INotifyCollectionChanged':\n                return true;\n        }\n        return false;\n    }\nget items(): any[] {\n        return this._pgView;\n    }\n    /**\n     * Gets or sets a value that determines whether the control should\n     * track changes to the data.\n     *\n     * If @see:trackChanges is set to true, the @see:CollectionView keeps\n     * track of changes to the data and exposes them through the\n     * @see:itemsAdded, @see:itemsRemoved, and @see:itemsEdited collections.\n     *\n     * Tracking changes is useful in situations where you need to to update\n     * the server after the user has confirmed that the modifications are\n     * valid.\n     *\n     * After committing or cancelling changes, use the @see:clearChanges method\n     * to clear the @see:itemsAdded, @see:itemsRemoved, and @see:itemsEdited\n     * collections.\n     *\n     * The @see:CollectionView only tracks changes made when the proper\n     * @see:CollectionView methods are used (@see:editItem/@see:commitEdit,\n     * @see:addNew/@see:commitNew, and @see:remove).\n     * Changes made directly to the data are not tracked.\n     */\n    get trackChanges(): boolean {\n        return this._trackChanges;\n    }\n\n    set trackChanges(value: boolean) {\n       // this._trackChanges = asBoolean(value);\n    }\n\n    /**\n     * Sets the specified item to be the current item in the view.\n     *\n     * @param item Item that will become current.\n     */\n    moveCurrentTo(item: any): boolean {\n\t\tconsole.log(\"collection_view_1\");\n        return this.moveCurrentToPosition(this._pgView.indexOf(item));\n    }\n\n    /**\n     * Sets the first item in the view as the current item.\n     */\n    moveCurrentToFirst(): boolean {\n\tconsole.log(\"collection_view_2\");\n        return this.moveCurrentToPosition(0);\n    }\n\n    /**\n     * Sets the last item in the view as the current item.\n     */\n    moveCurrentToLast(): boolean {\n\t\tconsole.log(\"collection_view_3\");\n        return this.moveCurrentToPosition(this._pgView.length - 1);\n    }\n\n    /**\n     * Sets the item after the current item in the view as the current item.\n     */\n    moveCurrentToNext(): boolean {\n\tconsole.log(\"collection_view_4\");\n        return this.moveCurrentToPosition(this._idx + 1);\n    }\n   moveCurrentToPosition(index: number): boolean {\n        if (index >= -1 && index < this._pgView.length) {\n            const e = new CancelEventArgs();\n            if (this._idx != index && this.onCurrentChanging(e)) {\n\n                // when moving away from current edit/new item, commit\n                if (this._edtItem && this._pgView[index] != this._edtItem) {\n                   // this.commitEdit();\n                }\n                if (this._newItem && this._pgView[index] != this._newItem) {\n                   // this.commitNew();\n                }\n\n                // update currency\n\t\t\t\tconsole.log(\"collection_view_updating_index!!!!!\");\n                this._idx = index;\n                this.onCurrentChanged();\n            }\n        }\n        return this._idx == index;\n    }\n  /**\n     * Occurs after the current item changes.\n     */\n    currentChanged = new EventEmitter();\n\n    /**\n     * Raises the @see:currentChanged event.\n     */\n    onCurrentChanged(e = EventArgs.empty) {\n        this.currentChanged.emit(e);\n    }\n\t\n\tcurrentChanging = new EventEmitter();\n\n    /**\n     * Raises the @see:currentChanging event.\n     *\n     * @param e @see:CancelEventArgs that contains the event data.\n     */\n    onCurrentChanging(e: CancelEventArgs): boolean {\n        this.currentChanging.emit(e);\n        return !e.cancel;\n    }\n /**\n     * Gets or sets the current item in the view.\n     */\n    get currentItem(): any {\n        return this._pgView && this._idx > -1 && this._idx < this._pgView.length\n            ? this._pgView[this._idx]\n            : null;\n    }\n\n    set currentItem(value: any) {\n        this.moveCurrentTo(value);\n    }\n\t\n\t\n    /**\n     * Gets the ordinal position of the current item in the view.\n     */\n    get currentPosition(): number {\n\t\tconsole.log(\"collection_view_current_postion:\"+this._idx);\n        return this._idx;\n    }\n\t\n\t  /**\n     * Removes the item at the specified index from the collection.\n     *\n     * @param index Index of the item to be removed from the collection.\n     * The index is relative to the view, not to the source collection.\n     */\n    removeAt(index: number) {\n        index = asInt(index);\n        this.remove(this._pgView[index]);\n    }\n\t\n\tremove(item: any) {\n\t\tconsole.log(\"collection_view_remove_started\");\n        // handle cases where the user is adding or editing items\n        let pendingNew = (item == this._newItem);\n        if (pendingNew) {\n            this._newItem = null;\n        }\n        if (item == this._edtItem) {\n            //this.cancelEdit();\n\t\t\tconsole.log(\"collection_view_cancel_edit\");\n        }\n\n        // honor canRemove\n\t\t/*\n        if (!this.canRemove) {\n            assert(false, 'cannot remove items (canRemove == false).');\n            return;\n        }\n\t\t*/\n        // find item\n        const index = this._src.indexOf(item);\n        if (index > -1) {\n\n            // get current item to notify later\n            const current = this.currentItem;\n\n            // remove item from source collection\n            this._updating++;\n            this._src.splice(index, 1); // **\n            this._updating--;\n\n            // refresh to update the edited item\n            //var index = this._pgView.indexOf(item);\n            const digest = this._digest;\n\t\t\tconsole.log(\"collection_view_preform_refresh_before_on_remove\");\n\t\t\tthis._performRefresh();\n\t\t\tconsole.log(\"collection_view_preform_refresh_after_on_remove\");\n            // track changes (before notifying)\n            if (this._trackChanges == true) {\n\n                // removing something that was added\n\t\t\t\t/*\n                const idxAdded = this._chgAdded.indexOf(item);\n                if (idxAdded > -1) {\n                    this._chgAdded.removeAt(idxAdded);\n                }\n*/\n                // removing something that was edited\n\t\t\t\t/*\n                const idxEdited = this._chgEdited.indexOf(item);\n                if (idxEdited > -1) {\n                    this._chgEdited.removeAt(idxEdited);\n                }\n*/\n                // add to removed list unless it was pending and not added in this session\n\t\t\t\t/*\n                const idxRemoved = this._chgRemoved.indexOf(item);\n                if (idxRemoved < 0 && !pendingNew && idxAdded < 0) {\n                    //this._chgRemoved.push(item);\n                }\n\t\t\t\t*/\n            }\n\n            // notify (item removed or full refresh) (TFS 85001)\n\t\t\t/*\n            const paged = this.pageSize > 0 && this._pgIdx > -1;\n            if (paged || digest != this._getGroupsDigest(this.groups)) {\n                this._raiseCollectionChanged();\n            } else {\n                this._raiseCollectionChanged();\n            }\n\t\t\t*/\n\t\t\tthis.refresh(); // TODO: optimize\n            // raise currentChanged if needed\n            if (this.currentItem !== current) {\n                this.onCurrentChanged();\n            }\n        }\n\t\tconsole.log(\"collection_view_remove_finished\");\n    }\n\t\n\t  get sourceCollection(): any {\n        return this._src;\n    }\n\t  refresh() {\n\t\tconsole.log(\"collection_view_refresh_started\");\n        // not while updating, adding, or editing\n        /*if (this._updating > 0 || this._newItem || this._edtItem) {\n            return;\n        }\n\t\t*/\n\n        // perform the refresh\n        this._performRefresh();\n\n        // notify listeners\n        this.onCollectionChanged();\n\t\tconsole.log(\"collection_view_refresh_finished\");\n    }\n\t\n\t  _performRefresh() {\n\t\tconsole.log(\"preform_refresh_started\");\n        // benchmark\n        //var start = new Date();\n/*\n        // save current item\n        const current = this.currentItem;\n\n        // create filtered view\n        if (!this._src) {\n            this._view = [];\n        } else if (!this._filter || !this.canFilter) {\n            this._view = (this._srtDsc.length > 0 && this.canSort)\n                ? this._src.slice(0) // clone source array\n                : this._src; // don't waste time cloning\n        } else {\n            this._view = this._performFilter(this._src);\n        }\n\n        // apply sort\n        if (this._srtDsc.length > 0 && this.canSort) {\n            this._performSort(this._view);\n        }\n\n        // apply grouping\n        this._groups     = this.canGroup ? this._createGroups(this._view) : null;\n        this._fullGroups = this._groups;\n        if (this._groups) {\n            this._view = this._mergeGroupItems(this._groups);\n        }\n\n        // apply paging to view\n        this._pgIdx  = clamp(this._pgIdx, 0, this.pageCount - 1);\n        this._pgView = this._getPageView();\n\n        // update groups to take paging into account\n        if (this._groups && this.pageCount > 1) {\n            this._groups = this._createGroups(this._pgView);\n            this._mergeGroupItems(this._groups);\n        }\n\n        // restore current item\n        let index = this._pgView.indexOf(current);\n        if (index < 0) {\n            index = Math.min(this._idx, this._pgView.length - 1);\n        }\n        this._idx = index;\n\n        // save group digest to optimize updates (TFS 109119)\n        this._digest = this._getGroupsDigest(this.groups);\n        // raise currentChanged if needed\n        if (this.currentItem !== current) {\n            this.onCurrentChanged();\n        }\n*/\n        //var now = new Date();\n        //console.log('refreshed in ' + (now.getTime() - start.getTime()) / 1000 + ' seconds');\n\t\tconsole.log(\"preform_refresh_finished\");\n    }/*\n  private _raiseCollectionChanged(action = NotifyCollectionChangedAction.Reset, item?: any, index?: number) {\n        //console.log('** collection changed: ' + NotifyCollectionChangedAction[action] + ' **');\n        const e = new NotifyCollectionChangedEventArgs(action, item, index);\n        this.onCollectionChanged(e);\n    }\n\t*/\n\t  /**\n     * Occurs when the collection changes.\n     */\n    collectionChanged = new EventEmitter();\n\n    /**\n     * Raises the @see:collectionChanged event.\n     *\n     * @param e Contains a description of the change.\n     */\n\t \n    onCollectionChanged() {\n        this.collectionChanged.emit();\n    }\n\t\n    set sourceCollection(sourceCollection: any) {\n\t\t\n        if (sourceCollection != this._src) {\n\n            // keep track of current index\n            const index = this.currentPosition;\n\n            // commit pending changes\n           // this.commitEdit();\n           // this.commitNew();\n\n            // disconnect old source\n            //todo ###remove me###\n            //if (this._ncc != null) {\n            //    this._ncc.collectionChanged.removeHandler(this._sourceChanged);\n            //}\n\n            // connect new source\n            this._src = asArray(sourceCollection, false);\n         //   this._ncc = <INotifyCollectionChanged>tryCast(this._src, 'INotifyCollectionChanged');\n\t\t\t/*\n            if (this._ncc) {\n                this._ncc.collectionChanged.subscribe(this._sourceChanged.bind(this));\n            }\n*/\n            // clear any changes\n           // this.clearChanges();\n\n            // refresh view\n           // this.refresh();\n           // this.moveCurrentToFirst();\n\n            // if we have no items, notify listeners that the current index changed\n            if (this.currentPosition < 0 && index > -1) {\n                this.onCurrentChanged();\n            }\n        }\n    }\n\n}\n","import {assert} from \"./assert\";\nimport {isInt} from \"../lang/is-int\";\n/**\n * Asserts that a value is an integer.\n *\n * @param value Value supposed to be an integer.\n * @param nullOK Whether null values are acceptable.\n * @param positive Whether to accept only positive integers.\n * @return The number passed in.\n */\nexport function asInt(value: number, nullOK = false, positive = false): number {\n    assert((nullOK && value == null) || isInt(value), 'Integer expected.');\n    if (positive && value && value < 0) throw 'Positive integer expected.';\n    return value;\n}\n","import {isNumber} from \"./is-number\";\n\nexport function isInt(value: any): boolean {\n    return isNumber(value) && value == Math.round(value);\n}\n","import {isArray} from \"../lang/is-array\";\nimport {assert} from \"../asserts/assert\";\n/**\n * Asserts that a value is an array.\n *\n * @param value Value supposed to be an array.\n * @param nullOK Whether null values are acceptable.\n * @return The array passed in.\n */\nexport function asArray(value: any, nullOK = true): any[] {\n    assert((nullOK && value == null) || isArray(value), 'Array expected.');\n    return value;\n}\n","import {Binding} from \"./Binding\";\nimport {Rectangle} from \"./ui/Rectangle\";\nimport {isFunction, isString, asType, contains, asNumber, isBoolean, isNumber} from \"../util/util\";\nimport {Aggregate} from \"../../../enum/Aggregate\";\n//import {ICollectionView} from \"../../../collections/interface/ICollectionView\";\nimport {CollectionView} from \"../../../collections-light/CollectionView\";\n\n\n\n\n/**\n * Allows callers to verify whether an object implements an interface.\n */\nexport interface IQueryInterface {\n    /**\n     * Returns true if the object implements a given interface.\n     *\n     * @param interfaceName Name of the interface to look for.\n     */\n    implementsInterface(interfaceName: string): boolean;\n}\n/**\n * Casts a value to a type if possible.\n *\n * @param value Value to cast.\n * @param type Type or interface name to cast to.\n * @return The value passed in if the cast was successful, null otherwise.\n */\nexport function tryCast(value: any, type: any): any {\n\n    // null doesn't implement anything\n    if (value == null) {\n        return null;\n    }\n\n    // test for interface implementation (IQueryInterface)\n    if (isString(type)) {\n        return isFunction(value.implementsInterface) && value.implementsInterface(type) ? value : null;\n    }\n\n    // regular type test\n    return value instanceof type ? value : null;\n}\n\n\n\n/**\n * Checks whether an @see:ICollectionView is defined and not empty.\n *\n * @param value @see:ICollectionView to check.\n */\n \nexport function hasItems(value: CollectionView) {\n    return value && value.items && value.items.length;\n}\n\n\n\n\n\n\n/**\n * Sets the start and end positions of a selection in a text field.\n *\n * This method is similar to the native @see:setSelectionRange method\n * in HTMLInputElement objects, except it checks for conditions that\n * may cause exceptions (element not in the DOM, disabled, or hidden).\n *\n * @param e\n * @param start Offset into the text field for the start of the selection.\n * @param end Offset into the text field for the end of the selection.\n */\nexport function setSelectionRange(e: HTMLInputElement, start: number, end = start) {\n    e = asType(e, HTMLInputElement);\n    if (contains(document.body, e) && !e.disabled && e.style.display != 'none') {\n        try {\n            e.setSelectionRange(asNumber(start), asNumber(end));\n            e.focus(); // needed in Chrome (TFS 124102)\n        } catch (x) { }\n    }\n}\n\n// ** jQuery replacement methods\n\n/**\n * Gets the bounding rectangle of an element in page coordinates.\n *\n * This is similar to the <b>getBoundingClientRect</b> function,\n * except that uses window coordinates, which change when the\n * document scrolls.\n */\nexport function getElementRect(e: Element): Rectangle {\n    const rc = e.getBoundingClientRect();\n    return new Rectangle(rc.left + window.pageXOffset, rc.top + window.pageYOffset, rc.width, rc.height);\n}\n\n\n\n\n\n/**\n * Calculates an aggregate value from the values in an array.\n *\n * @param aggType Type of aggregate to calculate.\n * @param items Array with the items to aggregate.\n * @param binding Name of the property to aggregate on (in case the items are not simple values).\n */\nexport function getAggregate(aggType: Aggregate, items: any[], binding?: string) {\n    let cnt   = 0,\n        cntn  = 0,\n        sum   = 0,\n        sum2  = 0,\n        min   = null,\n        max = null;\n    const bnd = binding ? new Binding(binding) : null;\n\n    // calculate aggregate\n    for (let i = 0; i < items.length; i++) {\n\n        // get item/value\n        let val = items[i];\n        if (bnd) {\n            val = bnd.getValue(val);\n            //assert(!isUndefined(val), 'item does not define property \"' + binding + '\".');\n        }\n\n        // aggregate\n        if (val != null) {\n            cnt++;\n            if (min == null || val < min) {\n                min = val;\n            }\n            if (max == null || val > max) {\n                max = val;\n            }\n            if (isNumber(val) && !isNaN(val)) {\n                cntn++;\n                sum += val;\n                sum2 += val * val;\n            } else if (isBoolean(val)) {\n                cntn++;\n                if (val == true) {\n                    sum++;\n                    sum2++;\n                }\n            }\n        }\n    }\n\n    // return result\n    const avg = cntn == 0 ? 0 : sum / cntn;\n    switch (aggType)\n    {\n        case Aggregate.Avg:\n            return avg;\n        case Aggregate.Cnt:\n            return cnt;\n        case Aggregate.Max:\n            return max;\n        case Aggregate.Min:\n            return min;\n        case Aggregate.Rng:\n            return max - min;\n        case Aggregate.Sum:\n            return sum;\n        case Aggregate.VarPop:\n            return cntn <= 1 ? 0 : sum2 / cntn - avg * avg;\n        case Aggregate.StdPop:\n            return cntn <= 1 ? 0 : Math.sqrt(sum2 / cntn - avg * avg);\n        case Aggregate.Var:\n            return cntn <= 1 ? 0 : (sum2 / cntn - avg * avg) * cntn / (cntn - 1);\n        case Aggregate.Std:\n            return cntn <= 1 ? 0 : Math.sqrt((sum2 / cntn - avg * avg) * cntn / (cntn - 1));\n    }\n\n    // should never get here...\n    throw 'Invalid aggregate type.';\n}\n","\nexport function isString(value: any): boolean {\n    return typeof (value) == 'string';\n}\n","import {assert} from \"./assert\";\nimport {isString} from \"../lang/is-string\";\n/**\n * Asserts that a value is a string.\n *\n * @param value Value supposed to be a string.\n * @param nullOK Whether null values are acceptable.\n * @return The string passed in.\n */\nexport function asString(value: string, nullOK = true): string {\n    assert((nullOK && value == null) || isString(value), 'String expected.');\n    return value;\n}\n","import {tryCast} from \"../../common/Global\";\nimport {assert} from \"./assert\";\n/**\n * Asserts that a value is an instance of a given type.\n *\n * @param value Value to be checked.\n * @param type Type of value expected.\n * @param nullOK Whether null values are acceptable.\n * @return The value passed in.\n */\nexport function asType(value: any, type: any, nullOK = false): any {\n    value = tryCast(value, type);\n    assert(nullOK || value != null, type + ' expected.');\n    return value;\n}\n","/**\n * Checks whether an element has a class.\n *\n * @param e Element to check.\n * @param className Class to check for.\n */\nexport function hasClass(e: HTMLElement, className: string): boolean {\n    // note: using e.getAttribute('class') instead of e.classNames\n    // so this works with SVG as well as regular HTML elements.\n    if (e && e.getAttribute) {\n        const rx = new RegExp('\\\\b' + className + '\\\\b');\n        return e && rx.test(e.getAttribute('class'));\n    }\n    return false;\n}\n","import {hasClass} from \"./has-class\";\n\n\n/**\n * Adds a class to an element.\n *\n * @param e Element that will have the class added.\n * @param className Class to add to the element.\n */\nexport function addClass(e: HTMLElement, className: string) {\n    // note: using e.getAttribute('class') instead of e.classNames\n    // so this works with SVG as well as regular HTML elements.\n    if (e && e.setAttribute && !hasClass(e, className)) {\n        const cn = e.getAttribute('class');\n        e.setAttribute('class', cn ? cn + ' ' + className : className);\n    }\n}\n","/**\n * Checks whether an HTML element contains another.\n *\n * @param parent Parent element.\n * @param child Child element.\n * @return True if the parent element contains the child element.\n */\nexport function contains(parent: any, child: any): boolean {\n    for (let e = <Node>child; e; e = e.parentNode) {\n        if (e === parent) return true;\n    }\n    return false;\n}\n\nexport function containsFocus(e:HTMLElement):boolean{\n  return contains(e, document.activeElement);\n}\n","import {removeClass} from \"./remove-class\";\nimport {addClass} from \"./add-class\";\n\n\n/**\n * Adds or removes a class to or from an element.\n *\n * @param e Element that will have the class added.\n * @param className Class to add or remove.\n * @param addOrRemove Whether to add or remove the class.\n * Use true to add class to element and false to remove class from element.\n */\nexport function toggleClass(e: HTMLElement, className: string, addOrRemove: boolean) {\n    if (addOrRemove) {\n        addClass(e, className);\n    } else {\n        removeClass(e, className);\n    }\n}\n","import {hasClass} from \"./has-class\";\n\n\n/**\n * Removes a class from an element.\n *\n * @param e Element that will have the class removed.\n * @param className Class to remove form the element.\n */\nexport function removeClass(e: HTMLElement, className: string) {\n    // note: using e.getAttribute('class') instead of e.classNames\n    // so this works with SVG as well as regular HTML elements.\n    if (e && e.setAttribute && hasClass(e, className)) {\n        const rx = new RegExp('\\\\s?\\\\b' + className + '\\\\b', 'g'),\n              cn = e.getAttribute('class');\n        e.setAttribute('class', cn.replace(rx, ''));\n    }\n}\n","import {isString} from \"../lang/is-string\";\n\n\n/**\n * Gets an element from a jQuery-style selector.\n *\n * @param selector An element, a query selector string, or a jQuery object.\n */\nexport function getElement(selector: any): HTMLElement {\n    if (selector instanceof HTMLElement) return selector;\n    if (isString(selector)) return <HTMLElement>document.querySelector(selector);\n    if (selector && selector.jquery) return <HTMLElement>selector[0];\n    return null;\n}\n","'use strict';\n\n/**\n * Gets or sets an object that contains all localizable strings in the Wijmo library.\n *\n * The culture selector is a two-letter string that represents an\n * <a href='http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes'>ISO 639 culture</a>.\n */\nexport let culture: any = {\n    Globalize: {\n        numberFormat: {\n            NumberDecimalSeparator: '.',\n            NumberGroupSeparator: ',',\n            CurrencySymbol: '$',\n            '.': '.',\n            ',': ',',\n            percent: {pattern: ['-n %', 'n %']},\n            currency: {decimals: 2, symbol: '$', pattern: ['($n)', '$n']}\n        },\n        dateTimeFormat: {\n            TimeSeparator: '/',\n            DateSeparator: ':',\n            '/': '/',\n            ':': ':',\n        },\n        calendar: {\n            '/': '/',\n            ':': ':',\n            firstDay: 0,\n            days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n            daysAbbr: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n            months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n            monthsAbbr: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n            am: ['AM', 'A'],\n            pm: ['PM', 'P'],\n            eras: ['A.D.', 'B.C.'],\n            patterns: {\n                d: 'M/d/yyyy', D: 'dddd, MMMM dd, yyyy',\n                f: 'dddd, MMMM dd, yyyy h:mm tt', F: 'dddd, MMMM dd, yyyy h:mm:ss tt',\n                t: 'h:mm tt', T: 'h:mm:ss tt',\n                M: 'MMMM d', m: 'MMMM d',\n                Y: 'MMMM, yyyy', y: 'MMMM, yyyy',\n                g: 'M/d/yyyy h:mm tt', G: 'M/d/yyyy h:mm:ss tt',\n                s: 'yyyy\"-\"MM\"-\"dd\"T\"HH\":\"mm\":\"ss',\n                o: 'yyyy\"-\"MM\"-\"dd\"T\"HH\":\"mm\":\"ss\".\"fffffffK',\n                O: 'yyyy\"-\"MM\"-\"dd\"T\"HH\":\"mm\":\"ss\".\"fffffffK',\n                U: 'dddd, MMMM dd, yyyy h:mm:ss tt'\n            },\n            fiscalYearOffsets: [-3, -3]\n        }\n    },\n    MultiSelect: {\n        itemsSelected: '{count:n0} items selected'\n    },\n    FlexGrid: {\n        groupHeaderFormat: '{name}: <b>{value} </b>({count:n0} items)'\n    },\n    FlexGridFilter: {\n\n        // filter\n        ascending: '\\u2191 Ascending',\n        descending: '\\u2193 Descending',\n        apply: 'Apply',\n        clear: 'Clear',\n        conditions: 'Filter by Condition',\n        values: 'Filter by Value',\n\n        // value filter\n        search: 'Search',\n        selectAll: 'Select All',\n        null: '(nothing)',\n\n        // condition filter\n        header: 'Show items where the value',\n        and: 'And',\n        or: 'Or',\n        stringOperators: [\n            {name: '(not set)', op: null},\n            {name: 'Equals', op: 0},\n            {name: 'Does not equal', op: 1},\n            {name: 'Begins with', op: 6},\n            {name: 'Ends with', op: 7},\n            {name: 'Contains', op: 8},\n            {name: 'Does not contain', op: 9}\n        ],\n        numberOperators: [\n            {name: '(not set)', op: null},\n            {name: 'Equals', op: 0},\n            {name: 'Does not equal', op: 1},\n            {name: 'Is Greater than', op: 2},\n            {name: 'Is Greater than or equal to', op: 3},\n            {name: 'Is Less than', op: 4},\n            {name: 'Is Less than or equal to', op: 5}\n        ],\n        dateOperators: [\n            {name: '(not set)', op: null},\n            {name: 'Equals', op: 0},\n            {name: 'Is Before', op: 4},\n            {name: 'Is After', op: 3}\n        ],\n        booleanOperators: [\n            {name: '(not set)', op: null},\n            {name: 'Equals', op: 0},\n            {name: 'Does not equal', op: 1}\n        ]\n    }\n};\n","import {isArray, isDate} from \"../../util/util\";\nimport {culture} from \"../../globalization/Localization\";\n/**\n * Provides date and time utilities.\n */\nexport class DateTime {\n\n    /**\n     * Gets a new Date that adds the specified number of days to a given Date.\n     *\n     * @param value Original date.\n     * @param days Number of days to add to the given date.\n     */\n    static addDays(value: Date, days: number): Date {\n        return new Date(value.getFullYear(), value.getMonth(), value.getDate() + days);\n    }\n    /**\n     * Gets a new Date that adds the specified number of months to a given Date.\n     *\n     * @param value Original date.\n     * @param months Number of months to add to the given date.\n     */\n    static addMonths(value: Date, months: number): Date {\n        return new Date(value.getFullYear(), value.getMonth() + months, value.getDate());\n    }\n    /**\n     * Gets a new Date that adds the specified number of years to a given Date.\n     *\n     * @param value Original date.\n     * @param years Number of years to add to the given date.\n     */\n    static addYears(value: Date, years: number): Date {\n        return new Date(value.getFullYear() + years, value.getMonth(), value.getDate());\n    }\n    /**\n     * Gets a new Date that adds the specified number of hours to a given Date.\n     *\n     * @param value Original date.\n     * @param hours Number of hours to add to the given date.\n     */\n    static addHours(value: Date, hours: number): Date {\n        return new Date(value.getFullYear(), value.getMonth(), value.getDate(), value.getHours() + hours);\n    }\n    /**\n     * Gets a new Date that adds the specified number of minutes to a given Date.\n     *\n     * @param value Original date.\n     * @param minutes Number of minutes to add to the given date.\n     */\n    static addMinutes(value: Date, minutes: number): Date {\n        return new Date(value.getFullYear(), value.getMonth(), value.getDate(), value.getHours(), value.getMinutes() + minutes);\n    }\n    /**\n     * Gets a new Date that adds the specified number of seconds to a given Date.\n     *\n     * @param value Original date.\n     * @param seconds Number of seconds to add to the given date.\n     */\n    static addSeconds(value: Date, seconds: number): Date {\n        return new Date(value.getFullYear(), value.getMonth(), value.getDate(), value.getHours(), value.getMinutes(), value.getSeconds() + seconds);\n    }\n    /**\n     * Returns true if two Date objects refer to the same date (ignoring time).\n     *\n     * @param d1 First date.\n     * @param d2 Second date.\n     */\n    static sameDate(d1: Date, d2: Date): boolean {\n        return isDate(d1) && isDate(d2) &&\n            d1.getFullYear() == d2.getFullYear() &&\n            d1.getMonth() == d2.getMonth() &&\n            d1.getDate() == d2.getDate();\n    }\n    /**\n     * Returns true if two Date objects refer to the same time (ignoring date).\n     *\n     * @param d1 First date.\n     * @param d2 Second date.\n     */\n    static sameTime(d1: Date, d2: Date): boolean {\n        return isDate(d1) && isDate(d2) &&\n            d1.getHours() == d2.getHours() &&\n            d1.getMinutes() == d2.getMinutes() &&\n            d1.getSeconds() == d2.getSeconds();\n    }\n    /**\n     * Returns true if two Date objects refer to the same date and time.\n     *\n     * @param d1 First date.\n     * @param d2 Second date.\n     */\n    static equals(d1: Date, d2: Date): boolean {\n        return isDate(d1) && isDate(d2) && d1.getTime() == d2.getTime();\n    }\n    /**\n     * Gets a Date object with the date and time set on two Date objects.\n     *\n     * @param date Date object that contains the date (day/month/year).\n     * @param time Date object that contains the time (hour:minute:second).\n     */\n    static fromDateTime(date: Date, time: Date): Date {\n        if (!date && !time) return null;\n        if (!date) date = time;\n        if (!time) time = date;\n        return new Date(\n            date.getFullYear(), date.getMonth(), date.getDate(),\n            time.getHours(), time.getMinutes(), time.getSeconds());\n    }\n    /**\n     * Converts a calendar date to a fiscal date using the current culture.\n     *\n     * @param date Calendar date.\n     * @param govt Whether to use the government or corporate fiscal year.\n     */\n    static toFiscal(date: Date, govt: boolean) {\n        const cal = culture.Globalize.calendar;\n        return isArray(cal.fiscalYearOffsets)\n            ? DateTime.addMonths(date, -cal.fiscalYearOffsets[govt ? 0 : 1])\n            : date;\n    }\n    /**\n     * Converts a fiscal year date to a calendar date using the current culture.\n     *\n     * @param date Fiscal year date.\n     * @param govt Whether to use the government or corporate fiscal year.\n     */\n    static fromFiscal(date: Date, govt: boolean) {\n        const cal = culture.Globalize.calendar;\n        return isArray(cal.fiscalYearOffsets)\n            ? DateTime.addMonths(date, +cal.fiscalYearOffsets[govt ? 0 : 1])\n            : date;\n    }\n    /**\n     * Creates a copy of a given Date object.\n     *\n     * @param date Date object to copy.\n     */\n    static clone(date: Date): Date {\n        return DateTime.fromDateTime(date, date);\n    }\n}\n","import {asDate, asNumber, asString, isDate, isString, isNumber, toFixed} from \"../util/util\";\nimport {culture} from \"./Localization\";\nimport {DateTime} from \"../common/datetime/datetime\";\n/**\n * Class that implements formatting and parsing of numbers and Dates.\n *\n * By default, @see:Globalize uses the American English culture.\n * To switch cultures, include the appropriate <b>wijmo.culture.*.js</b>\n * file after the wijmo files.\n */\nexport class Globalize {\n\n    /**\n     * Formats a number or a date.\n     *\n     * The format strings used with the @see:format function are similar to\n     * the ones used by <b>Globalize.js</b> and by the .NET Globalization\n     * library. The tables below contains links that describe the formats\n     * available:\n     *\n     * <ul>\n     * <li><a href=\"http://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx\">\n     *      Standard Numeric Format Strings</a></li>\n     * <li><a href=\"http://msdn.microsoft.com/en-us/library/az4se3k1(v=vs.110).aspx\">\n     *      Standard Date and Time Format Strings</a></li>\n     * <li><a href=\"http://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx\">\n     *      Custom Date and Time Format Strings</a></li>\n     * </ul>\n     *\n     * @param value Number or Date to format (all other types are converted to strings).\n     * @param format Format string to use when formatting numbers or dates.\n     * @param trim Whether to remove trailing zeros from numeric results.\n     * @param truncate Whether to truncate the numeric values rather than round them.\n     * @return A string representation of the given value.\n     */\n    static format(value: any, format: string, trim?: boolean, truncate?: boolean): string {\n\n        // if a format was not provided, create one\n        if (!format) {\n            if (isNumber(value)) {\n                format = value == Math.round(value) ? 'n0' : 'n2';\n            }\n            else if (isDate(value)) {\n                format = 'd';\n            }\n        }\n\n        // format numbers and dates, convert others to string\n        if (isNumber(value)) {\n            return Globalize.formatNumber(value, format, trim, truncate);\n        } else if (isDate(value)) {\n            return Globalize.formatDate(value, format);\n        } else {\n            return value != null ? value.toString() : '';\n        }\n    }\n    /**\n     * Formats a number using the current culture.\n     *\n     * The @see:formatNumber method accepts most .NET-style\n     * <a href=\"http://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx\">\n     * Standard Numeric Format Strings</a>, except for the 'e' and 'x' formats\n     * (scientific notation and hexadecimal) which are not supported.\n     *\n     * Numeric format strings takes the form <i>Axxccss</i>, where:\n     * <ul>\n     * <li>\n     *  <i>A</i> is a single case-insensitive alphabetic character called the\n     *  format specifier.</i>\n     * <li>\n     *  <i>xx</i> is an optional integer called the precision specifier.\n     *  The precision specifier affects the number of digits in the result.</li>\n     * <li>\n     *  <i>cc</i> is an optional string used to override the currency symbol\n     *  when formatting currency values. This is useful when formatting\n     *  currency values for cultures different than the current default\n     *  (for example, when formatting Euro or Yen values in applications\n     *  that use the English culture).</li>\n     * <li>\n     *  <i>ss</i> is an optional string used to scale the number. If provided,\n     *  it must consist of commas. The number is divided by 1000 for each comma\n     *  specified.</li>\n     * </ul>\n     *\n     * The following table describes the standard numeric format specifiers and\n     * displays sample output produced by each format specifier for the default\n     * culture.\n     *\n     * <b>n</b> Number: <code>formatNumber(1234.5, 'n2') => '1,234.50'</code><br/>\n     * <b>f</b> Fixed-point: <code>formatNumber(1234.5, 'f2') => '1234.50'</code><br/>\n     * <b>g</b> General (no trailing zeros): <code>formatNumber(1234.5, 'g2') => '1,234.5'</code><br/>\n     * <b>d</b> Decimal (integers): <code>formatNumber(-1234, 'd6') => '-001234'</code><br/>\n     * <b>x</b> Hexadecimal (integers): <code>formatNumber(1234, 'x6') => '0004d2'</code><br/>\n     * <b>c</b> Currency: <code>formatNumber(1234, 'c') => '$ 1,234.00'</code><br/>\n     * <b>p</b> Percent: <code>formatNumber(0.1234, 'p2') => '12.34 %'</code>\n     *\n     * The scaling specifier is especially useful when charting large values. For\n     * example, the markup below creates a chart that plots population versus GDP.\n     * The raw data expresses the population is units and the GDP in millions.\n     * The scaling specified in the axes formats causes the chart to show population\n     * in millions and GDP in trillions:\n     *\n     * <pre>&lt;wj-flex-chart\n     *   items-source=\"countriesGDP\" binding-x=\"pop\" chart-type=\"Scatter\"&gt;\n     *   &lt;wj-flex-chart-series\n     *     name=\"GDP\" binding=\"gdp\"&gt;&lt;/wj-flex-chart-series&gt;\n     *   &lt;wj-flex-chart-axis\n     *     wj-property=\"axisX\" title=\"Population (millions)\"\n     *     format=\"n0,,\"&gt;\n     *   &lt;/wj-flex-chart-axis&gt;\n     *   &lt;wj-flex-chart-axis\n     *     wj-property=\"axisY\" title=\"GDP (US$ trillions)\"\n     *     format=\"c0,,\"&gt;\n     *   &lt;/wj-flex-chart-axis&gt;\n     * &lt;/wj-flex-chart&gt;</pre>\n     *\n     * @param value Number to format.\n     * @param format .NET-style standard numeric format string (e.g. 'n2', 'c4', 'p0', 'g2', 'd2').\n     * @param trim Whether to remove trailing zeros from the result.\n     * @param truncate Whether to truncate the value rather than round it.\n     * @return A string representation of the given number.\n     */\n    static formatNumber(value: number, format: string, trim?: boolean, truncate?: boolean): string {\n        asNumber(value);\n        asString(format);\n\n        let result;\n        const m   = format ? format.match(/([a-z])(\\d*)(,*)(.*)/i) : null,\n            nf    = culture.Globalize.numberFormat,\n            f1    = m ? m[1].toLowerCase() : 'n',\n            prec  = (m && m[2]) ? parseInt(m[2]) : (f1 == 'c') ? nf.currency.decimals : value == Math.round(value) ? 0 : 2,\n            scale = (m && m[3]) ? 3 * m[3].length : 0,\n            curr  = (m && m[4]) ? m[4] : nf.currency.symbol,\n            dp    = nf['.'],\n            ts    = nf[','];\n\n        // scale (,:thousands ,,:millions ,,,:billions)\n        if (scale) {\n            value /= Math.pow(10, scale);\n        }\n\n        // d, x: integers/hexadecimal\n        if (f1 == 'd' || f1 == 'x') {\n            result = Math.round(Math.abs(value)).toString(f1 == 'd' ? 10 : 16);\n            while (result.length < prec) {\n                result = '0' + result;\n            }\n            if (value < 0) {\n                result = '-' + result;\n            }\n            if (format && format[0] == 'X') {\n                result = result.toUpperCase();\n            }\n            return result;\n        }\n\n        // p: percentage\n        if (f1 == 'p') {\n            value *= 100;\n        }\n\n        // truncate value\n        if (truncate) {\n            value = toFixed(value, prec, true);\n        }\n\n        // get result\n        result = (f1 == 'c' || f1 == 'p')\n            ? Math.abs(value).toFixed(prec)\n            : value.toFixed(prec);\n\n        // g: remove trailing zeros\n        if ((trim || f1 == 'g') && result.indexOf('.') > -1) {\n            result = result.replace(/(\\.[0-9]*?)0+$/g, '$1');\n            result = result.replace(/\\.$/, '');\n        }\n\n        // replace decimal point\n        if (dp != '.') {\n            result = result.replace('.', dp);\n        }\n\n        // n, c, p: thousand separators\n        if (ts && (f1 == 'n' || f1 == 'c' || f1 == 'p')) {\n            const idx = result.indexOf(dp),\n                  rx  = /\\B(?=(\\d\\d\\d)+(?!\\d))/g;\n            result    = idx > -1 ? result.substr(0, idx).replace(rx, ts) + result.substr(idx) : result.replace(rx, ts);\n        }\n\n        // c: currency pattern\n        if (f1 == 'c') {\n            var pat = nf.currency.pattern[value < 0 ? 0 : 1];\n            result = pat.replace('n', result).replace('$', curr);\n        }\n\n        // p: percentage pattern\n        if (f1 == 'p') {\n            var pat = nf.percent.pattern[value < 0 ? 0 : 1];\n            result = pat.replace('n', result);\n        }\n\n        // done\n        return result;\n    }\n    /**\n     * Formats a date using the current culture.\n     *\n     * The @see:format parameter contains a .NET-style\n     * <a href=\"http://msdn.microsoft.com/en-us/library/8kb3ddd4(v=vs.110).aspx\">Date format string</a>\n     * with the following additions:\n     * <ul>\n     * <li>\n     *  <i>Q, q</i> Calendar quarter.</li>\n     *  <i>U</i> Fiscal quarter (government).</li>\n     *  <i>u</i> Fiscal quarter (private sector).</li>\n     *  <i>EEEE, EEE, EE, E</i> Fiscal year (government).</li>\n     *  <i>eeee, eee, ee, e</i> Fiscal year (private sector).</li>\n     * </ul>\n     *\n     * For example:\n     * <code>\n     * var d = new Date(2015, 9, 1); // Oct 1, 2015\n     * console.log(wijmo.Globalize.format(d, '\"FY\"EEEE\"Q\"U') + ' (US culture)');\n     * &gt; <b>FY2016Q1 (US culture)</b>\n     * </code>\n     *\n     * @param value Number or Date to format.\n     * @param format .NET-style Date format string</a>.\n     * @return A string representation of the given date.\n     */\n    static formatDate(value: Date, format: string): string {\n        value = asDate(value);\n\n        // culture-invariant formats\n        switch (format) {\n            case 'r':\n            case 'R':\n                return value.toUTCString();\n            case 'u':\n                return value.toISOString().replace(/\\.\\d{3}/, '');\n        }\n\n        // expand pre-defined formats\n        format = Globalize._expandFormat(format);\n\n        // parse the format string and build return value\n        const parts = Globalize._parseDateFormat(format);\n        let str     = '';\n        for (let i = 0; i < parts.length; i++) {\n            str += Globalize._formatDatePart(value, format, parts[i]);\n        }\n\n        // all done\n        return str;\n    }\n    /**\n     * Parses a string into an integer.\n     *\n     * @param value String to convert to an integer.\n     * @param format Format to use when parsing the number.\n     * @return The integer represented by the given string,\n     * or <b>NaN</b> if the string cannot be parsed into an integer.\n     */\n    static parseInt(value: string, format?: string): number {\n        return Math.round(Globalize.parseFloat(value, format));\n    }\n    /**\n     * Parses a string into a floating point number.\n     *\n     * @param value String to convert to a number.\n     * @param format Format to use when parsing the number.\n     * @return The floating point number represented by the given string,\n     * or <b>NaN</b> if the string cannot be parsed into a floating point number.\n     */\n    static parseFloat(value: string, format?: string): number {\n        const neg   = value.indexOf('-') > -1 || (value.indexOf('(') > -1 && value.indexOf(')') > -1) ? -1 : +1,\n              pct   = value.indexOf('%') > -1 ? .01 : 1,\n              m     = format ? format.match(/,+/) : null,\n              scale = m ? m[0].length * 3 : 0;\n\n        // hex\n        if (format && (format[0] == 'x' || format[0] == 'X')) {\n            value = value.replace(/[^0-9a-f]+.*$/gi, ''); // truncate at first invalid char\n            return parseInt(value, 16) * neg * pct * Math.pow(10, scale);\n        }\n\n        // decimal\n        var dp = culture.Globalize.numberFormat['.'],\n            rx = new RegExp('[^\\\\d\\\\' + dp + ']', 'g'),\n            value = value.replace(rx, '').replace(dp, '.'); // remove non-digits, replace decimal point\n        return parseFloat(value) * neg * pct * Math.pow(10, scale);\n    }\n    /**\n     * Parses a string into a Date.\n     *\n     * @param value String to convert to a Date.\n     * @param format Format string used to parse the date.\n     * @return The date represented by the given string, or null if the string\n     * cannot be parsed into a Date.\n     */\n    static parseDate(value: string, format: string): Date {\n\n        // make sure we have a value\n        value = asString(value);\n        if (!value) {\n            return null;\n        }\n\n        // culture-invariant formats\n        if (format == 'u') {\n            return new Date(value);\n        }\n\n        // parse using RFC 3339 pattern ([yyyy-MM-dd] [hh:mm[:ss]])\n        var d: Date;\n        if (format == 'R' || format == 'r') {\n            const rx    = /(([0-9]+)\\-([0-9]+)\\-([0-9]+))?\\s?(([0-9]+):([0-9]+)(:([0-9]+))?)?/,\n                  match = value.match(rx);\n            if (match[1] || match[5]) {\n                var d = match[1] // parse date\n                    ? new Date(parseInt(match[2]), parseInt(match[3]) - 1, parseInt(match[4]))\n                    : new Date();\n                if (match[5]) { // parse time\n                    d.setHours(parseInt(match[6]));\n                    d.setMinutes(parseInt(match[7]));\n                    d.setSeconds(match[8] ? parseInt(match[9]) : 0);\n                }\n            } else {\n                d = new Date(value);\n            }\n            return !isNaN(d.getTime()) ? d : null;\n        }\n\n        // expand the format\n        format = Globalize._expandFormat(format ? format : 'd');\n\n        // get format parts and data parts\n        //\n        // cjk: chars, http://www.rikai.com/library/kanjitables/kanji_codes.unicode.shtml\n        // rxf: format (no dots in strings: 'mm.dd.yyyy' => ['mm', 'dd', 'yyyy']).\n        // rxv: value (dots OK in strings: 'A.D' => 'A.D', but not by themselves)\n        const cal                                                 = culture.Globalize.calendar,\n              cjk                                                 = Globalize._CJK,\n              rxv                                                 = new RegExp('(\\\\' + cal['/'] + ')|(\\\\' + cal[':'] + ')|' + // date/time separators\n                  '(\\\\d+)|' + // digits\n                  '([' + cjk + '\\\\.]{2,})|' + // strings with dots\n                  '([' + cjk + ']+)', // strings with no dots\n                  'gi'\n              );\n        let vparts                                                = value.match(rxv),\n              fparts = Globalize._parseDateFormat(format), offset = 0,\n              year                                                = -1, month = 0, day = 1, hour = 0, min = 0;\n        const tzm                                                 = 0;\n        let sec                                                   = 0, ms                                           = 0, era = -1,\n              hasDayName, hasDay, hasQuarter, hasMonth, fiscalFmt;\n\n        // basic validation (TFS 81465, 128359)\n        if (!vparts || !vparts.length || !fparts || !fparts.length) {\n            return null;\n        }\n\n        // parse each element\n        for (let i = 0; i < fparts.length && vparts; i++) {\n            const vpi  = i - offset;\n            let pval   = (vpi > -1 && vpi < vparts.length) ? vparts[vpi] : '';\n            const plen = fparts[i].length;\n            switch (fparts[i]) {\n\n                // ** year\n                case 'EEEE': case 'EEE': case 'EE': case 'E': // fiscal (govt)\n                case 'eeee': case 'eee': case 'ee': case 'e': // fiscal (corp)\n                fiscalFmt = fparts[i];\n                // ** fall through **\n                case 'yyyy': case 'yyy': case 'yy': case 'y': // calendar\n                if (plen > 1 && pval.length > plen) {\n                    vparts[vpi] = pval.substr(plen);\n                    pval = pval.substr(0, plen);\n                    offset++;\n                }\n                year = parseInt(pval);\n                break;\n\n                // ** month\n                case 'MMMM': case 'MMM':\n                hasMonth = true;\n                const monthName = pval.toLowerCase();\n                month = -1;\n                for (let j = 0; j < 12; j++) {\n                    if (cal.months[j].toLowerCase().indexOf(monthName) == 0) {\n                        month = j;\n                        break;\n                    }\n                }\n                break;\n                case 'MM': case 'M':\n                if (plen > 1 && pval.length > plen) {\n                    vparts[vpi] = pval.substr(plen);\n                    pval = pval.substr(0, plen);\n                    offset++;\n                }\n                month = parseInt(pval) - 1;\n                hasMonth = true;\n                break;\n\n                // ** day\n                case 'dddd':\n                case 'ddd':\n                    hasDayName = true;\n                    break; // skip day names\n                case 'dd': case 'd':\n                if (plen > 1 && pval.length > plen) {\n                    vparts[vpi] = pval.substr(plen);\n                    pval = pval.substr(0, plen);\n                    offset++;\n                }\n                day = parseInt(pval);\n                hasDay = true;\n                break;\n\n                // ** hour\n                case 'hh': case 'h':\n                if (plen > 1 && pval.length > plen) {\n                    vparts[vpi] = pval.substr(plen);\n                    pval = pval.substr(0, plen);\n                    offset++;\n                }\n                hour = parseInt(pval);\n                hour = hour == 12 ? 0 : hour; // 0-12, 12 == midnight\n                break;\n                case 'HH':\n                    if (plen > 1 && pval.length > plen) {\n                        vparts[vpi] = pval.substr(plen);\n                        pval = pval.substr(0, plen);\n                        offset++;\n                    }\n                    hour = parseInt(pval); // 0-24\n                    break;\n                case 'H':\n                    hour = parseInt(pval); // 0-24\n                    break;\n\n                // ** minute\n                case 'mm': case 'm':\n                if (plen > 1 && pval.length > plen) {\n                    vparts[vpi] = pval.substr(plen);\n                    pval = pval.substr(0, plen);\n                    offset++;\n                }\n                min = parseInt(pval);\n                break;\n\n                // ** second\n                case 'ss': case 's':\n                if (plen > 1 && pval.length > plen) {\n                    vparts[vpi] = pval.substr(plen);\n                    pval = pval.substr(0, plen);\n                    offset++;\n                }\n                sec = parseInt(pval);\n                break;\n\n                // ** millisecond\n                case 'fffffff': case 'FFFFFFF':\n                case 'ffffff': case 'FFFFFF':\n                case 'fffff': case 'FFFFF':\n                case 'ffff': case 'FFFF':\n                case 'fff': case 'FFF':\n                case 'ff': case 'FF':\n                case 'f': case 'F':\n                ms = parseInt(pval) / Math.pow(10, plen - 3);\n                break;\n\n                // ** am/pm\n                case 'tt': case 't':\n                pval = pval.toUpperCase();\n                if ((cal.pm[0] && pval == cal.pm[0] && hour < 12) ||\n                    (cal.pm[1] && pval == cal.pm[1] && hour < 12)) {\n                    hour += 12;\n                }\n                break;\n\n                // ** quarter\n                case 'q': case 'Q': case 'u': case 'U':\n                hasQuarter = true;\n                break;\n\n                // ** era\n                case 'ggg': case 'gg': case 'g':\n                era = cal.eras.length > 1 ? Globalize._getEra(pval, cal) : -1;\n                break;\n\n                // ** localized separators (TFS 131320)\n                case cal['/']:\n                case cal[':']:\n                    if (pval && pval != fparts[i]) {\n                        return null; // present and wrong separator\n                    }\n                    break;\n\n                // ** time zone (skip )\n                case 'K':\n                    break;\n\n                // ** all else: if not a match, keep using the same pval\n                default:\n                    if (Globalize._unquote(fparts[i]) != pval) {\n                        offset++;\n                    }\n                    break;\n            }\n        }\n\n        // allow dates with no times even if the format requires times\n        if (hasMonth && hasDay) {\n            if (isNaN(hour)) hour = 0;\n            if (isNaN(min)) min = 0;\n            if (isNaN(sec)) sec = 0;\n        }\n\n        // basic validation\n        if (month < 0 || month > 11 || isNaN(month) ||\n            day < 0 || day > 31 || isNaN(day) ||\n            hour < 0 || hour > 24 || isNaN(hour) ||\n            min < 0 || min > 60 || isNaN(min) ||\n            sec < 0 || sec > 60 || isNaN(sec)) {\n            return null;\n        }\n\n        // convert fiscal year/month to calendar\n        if (fiscalFmt) {\n            if (!hasMonth) { // need year and month to convert fiscal to calendar\n                return null;\n            }\n            d = new Date(year, month);\n            d = DateTime.fromFiscal(d, fiscalFmt[0] == 'E');\n            year = d.getFullYear();\n            month = d.getMonth();\n        }\n\n        // if the day name was specified but the day wasn't, the result is meaningless\n        if (hasDayName && !hasDay) {\n            return null;\n        }\n\n        // if the quarter was specified but the month wasn't, the result is meaningless\n        if (hasQuarter && !hasMonth) {\n            return null;\n        }\n\n        // if year not found, use current (as Globalize.js)\n        if (year < 0) {\n            year = new Date().getFullYear();\n        }\n\n        // apply era offset if any, or adjust for two-digit years (see Calendar.TwoDigitYearMax)\n        if (era > -1) {\n            year = year + cal.eras[era].start.getFullYear() - 1;\n        } else if (year < 100) {\n            year += year >= 30 ? 1900 : 2000;\n        }\n\n        // return result\n        d = new Date(year, month, day, hour, min + tzm, sec, ms);\n        return isNaN(d.getTime()) ? null : d;\n    }\n\n    // Chinese/Japanese/Korean characters\n    // http://www.rikai.com/library/kanjitables/kanji_codes.unicode.shtml\n    // NOTE: using 'replace' to keep minifier from switching the escaped Unicode chars into real Unicode.\n    static _CJK = 'a-zu00C0-u017Fu3000-u30ffu4e00-u9faf'.replace(/u/g, '\\\\u');\n\n    /**\n     * Gets the first day of the week according to the current culture.\n     *\n     * The value returned is between zero (Sunday) and six (Saturday).\n     */\n    static getFirstDayOfWeek(): number {\n        const fdw = culture.Globalize.calendar.firstDay;\n        return fdw ? fdw : 0;\n    }\n    /**\n     * Gets the symbol used as a decimal separator in numbers.\n     */\n    static getNumberDecimalSeparator(): string {\n        const ndc = culture.Globalize.numberFormat['.'];\n        return ndc ? ndc : '.';\n    }\n\n    // ** implementation\n\n    // unquotes a string\n    private static _unquote(s: string): string {\n        if (s.length > 1 && s[0] == s[s.length - 1]) {\n            if (s[0] == '\\'' || s[0] == '\\\"') {\n                return s.substr(1, s.length - 2);\n            }\n        }\n        return s;\n    }\n\n    // parse a date format string into its parts\n    private static _dateFomatParts = {};\n    private static _parseDateFormat(format: string): string[] {\n\n        // use cache whenever possible\n        if (format in Globalize._dateFomatParts) {\n            return Globalize._dateFomatParts[format];\n        }\n\n        // parse the format\n        const parts = [],\n              str   = '';\n        let start, end;\n        for (start = 0; start > -1 && start < format.length; start++) {\n            const c = format[start];\n            if (c == '\\'' || c == '\"') { // handle quoted parts\n                end = format.indexOf(c, start + 1); // keep quotes to distinguish from regular date parts\n                if (end > -1) {\n                    parts.push(format.substring(start, end + 1));\n                    start = end;\n                    continue;\n                }\n            }\n            end = start + 1;\n            for (; end < format.length; end++) {\n                if (format[end] != c) break;\n            }\n            parts.push(format.substring(start, end));\n            start = end - 1;\n        }\n\n        // cache and return\n        Globalize._dateFomatParts[format] = parts;\n        return parts;\n    }\n\n    // format a date part into a string\n    private static _formatDatePart(d: Date, format: string, part: string): string {\n        const cal  = culture.Globalize.calendar;\n        let era    = 0, year = 0, ff = 0, fd;\n        const plen = part.length;\n        switch (part) {\n\n            // ** year\n            case 'yyyy': case 'yyy': case 'yy': case 'y': // calendar year\n            case 'EEEE': case 'EEE': case 'EE': case 'E': // fiscal year (govt)\n            case 'eeee': case 'eee': case 'ee': case 'e': // fiscal year (corporate)\n\n            // get the year (calendar or fiscal)\n            fd = part[0] == 'E' ? DateTime.toFiscal(d, true) :\n                part[0] == 'e' ? DateTime.toFiscal(d, false) :\n                    d;\n            year = fd.getFullYear();\n\n            // if the calendar has multiple eras and the format specifies an era,\n            // then adjust the year to count from the start of the era.\n            // if the format has no era, then use the regular (Western) year.\n            if (cal.eras.length > 1 && format.indexOf('g') > -1) {\n                era = Globalize._getEra(d, cal);\n                if (era > -1) {\n                    year = year - cal.eras[era].start.getFullYear() + 1;\n                }\n            }\n\n            // adjust number of digits\n            return Globalize._zeroPad(year, 4).substr(4 - part.length);\n\n            // ** month\n            case 'MMMM':\n                return cal.months[d.getMonth()];\n            case 'MMM':\n                return cal.monthsAbbr[d.getMonth()];\n            case 'MM': case 'M':\n            return Globalize._zeroPad(d.getMonth() + 1, plen);\n\n            // ** day\n            case 'dddd':\n                return cal.days[d.getDay()];\n            case 'ddd':\n                return cal.daysAbbr[d.getDay()];\n            case 'dd':\n                return Globalize._zeroPad(d.getDate(), 2);\n            case 'd':\n                return d.getDate().toString();\n\n            // ** hour\n            case 'hh': case 'h':\n            return Globalize._zeroPad(Globalize._h12(d), plen);\n            case 'HH': case 'H':\n            return Globalize._zeroPad(d.getHours(), plen);\n\n            // ** minute\n            case 'mm': case 'm':\n            return Globalize._zeroPad(d.getMinutes(), plen);\n\n            // ** second\n            case 'ss': case 's':\n            return Globalize._zeroPad(d.getSeconds(), plen);\n\n            // ** millisecond\n            case 'fffffff': case 'FFFFFFF':\n            case 'ffffff': case 'FFFFFF':\n            case 'fffff': case 'FFFFF':\n            case 'ffff': case 'FFFF':\n            case 'fff': case 'FFF':\n            case 'ff': case 'FF':\n            case 'f': case 'F':\n            ff = d.getMilliseconds() * Math.pow(10, plen - 3);\n            return part[0] == 'f' ? Globalize._zeroPad(ff, plen) : ff.toFixed(0);\n\n            // ** am/pm\n            case 'tt':\n                return d.getHours() < 12 ? cal.am[0] : cal.pm[0];\n            case 't':\n                return d.getHours() < 12 ? cal.am[1] : cal.pm[1];\n\n            // ** quarter\n            case 'q': case 'Q': // calendar\n            return (Math.floor(d.getMonth() / 3) + 1).toString();\n            case 'u': case 'U': // quarter (U: govt; u: corp)\n            fd = DateTime.toFiscal(d, part == 'U');\n            return (Math.floor(fd.getMonth() / 3) + 1).toString();\n\n            // ** era\n            case 'ggg': case 'gg': case 'g':\n            if (cal.eras.length > 1) {\n                era = Globalize._getEra(d, cal);\n                if (era > -1) {\n                    return part == 'ggg' ? cal.eras[era].name : part == 'gg' ? cal.eras[era].name[0] : cal.eras[era].symbol;\n                }\n            }\n            return cal.eras[0];\n\n            // ** localized separators\n            case ':':\n            case '/':\n                return cal[part];\n\n            // ** time zone\n            case 'K':\n                const tz = d.toString().match(/(\\+|\\-)(\\d{2})(\\d{2})/);\n                return tz ? tz[1] + tz[2] + tz[3] : '';\n        }\n\n        // unquote part\n        if (plen > 1 && part[0] == part[plen - 1]) {\n            if (part[0] == '\\\"' || part[0] == '\\'') {\n                return part.substr(1, plen - 2);\n            }\n        }\n\n        // return part\n        return part;\n    }\n\n    // get a date's era (used only in Japanese locales)\n    private static _getEra(d: any, cal: any): number {\n        if (isDate(d)) { // find era by start date\n            for (var i = 0; i < cal.eras.length; i++) {\n                if (d >= cal.eras[i].start) {\n                    return i;\n                }\n            }\n        } else if (isString(d)) { // find era by name or symbol\n            for (var i = 0; i < cal.eras.length; i++) {\n                if (cal.eras[i].name) {\n                    if (cal.eras[i].name.indexOf(d) == 0 || cal.eras[i].symbol.indexOf(d) == 0) {\n                        return i;\n                    }\n                }\n            }\n        }\n        return -1; // not found\n    }\n\n    // expand date pattern into full date format\n    private static _expandFormat(format: string): string {\n        const fmt = culture.Globalize.calendar.patterns[format];\n        return fmt ? fmt : format;\n    }\n\n    // format a number with leading zeros\n    private static _zeroPad(num: number, places: number) {\n        const n    = num.toFixed(0),\n              zero = places - n.length + 1;\n        return zero > 0 ? Array(zero).join('0') + n : n;\n    }\n\n    // format an hour to 12 or 24 hour base depending on the calendar\n    private static _h12(d: Date) {\n        const cal = culture.Globalize.calendar;\n        let h     = d.getHours();\n        if (cal.am && cal.am[0]) {\n            h = h % 12;\n            if (h == 0) h = 12;\n        }\n        return h;\n    }\n}\n","/**\n * Rounds or truncates a number to a specified precision.\n *\n * @param value Value to round or truncate.\n * @param prec Number of decimal digits for the result.\n * @param truncate Whether to truncate or round the original value.\n */\nexport function toFixed(value: number, prec: number, truncate: boolean): number {\n    if (truncate) {\n        var s = value.toString(),\n            decPos = s.indexOf('.');\n        if (decPos > -1) {\n            s = s.substr(0, decPos + 1 + prec);\n            value = parseFloat(s);\n        }\n    } else {\n        var s = value.toFixed(prec);\n        value = parseFloat(s);\n    }\n    return value;\n}","import {assert} from \"./assert\";\nimport {isDate} from \"../lang/is-date\";\n/**\n * Asserts that a value is a Date.\n *\n * @param value Value supposed to be a Date.\n * @param nullOK Whether null values are acceptable.\n * @return The Date passed in.\n */\nexport function asDate(value: Date, nullOK = false): Date {\n    assert((nullOK && value == null) || isDate(value), 'Date expected.');\n    return value;\n}\n","/*\n * Represents an event handler (private class)\n */\nimport {IEventHandler} from \"./IEventHandler\";\nexport class EventHandler {\n    handler: IEventHandler;\n    self: any;\n    constructor(handler: IEventHandler, self: any) {\n        this.handler = handler;\n        this.self = self;\n    }\n}","\nimport {asFunction} from \"../core/index\";\nimport {EventHandler} from \"./EventHandler\";\nimport {IEventHandler} from \"./IEventHandler\";\nimport {EventArgs} from \"../eventArgs/EventArgs\";\n/**\n * Represents an event.\n *\n * Wijmo events are similar to .NET events. Any class may define events by\n * declaring them as fields. Any class may subscribe to events using the\n * event's @see:addHandler method and unsubscribe using the @see:removeHandler\n * method.\n *\n * Wijmo event handlers take two parameters: <i>sender</i> and <i>args</i>.\n * The first is the object that raised the event, and the second is an object\n * that contains the event parameters.\n *\n * Classes that define events follow the .NET pattern where for every event\n * there is an <i>on[EVENTNAME]</i> method that raises the event. This pattern\n * allows derived classes to override the <i>on[EVENTNAME]</i> method and\n * handle the event before and/or after the base class raises the event.\n * Derived classes may even suppress the event by not calling the base class\n * implementation.\n *\n * For example, the TypeScript code below overrides the <b>onValueChanged</b>\n * event for a control to perform some processing before and after the\n * <b>valueChanged</b> event fires:\n * <pre>\n *   // override base class\n *   onValueChanged(e: EventArgs) {\n     *   // execute some code before the event fires\n     *   console.log('about to fire valueChanged');\n     *   // optionally, call base class to fire the event\n     *   super.onValueChanged(e);\n     *   // execute some code after the event fired\n     *   console.log('valueChanged event just fired');\n     * }\n * </pre>\n * @deprecated\n */\nexport class Event {\n    private _handlers: EventHandler[] = [];\n\n    /**\n     * @deprecated\n     */\n    constructor(){\n\n    }\n\n    /**\n     * Adds a handler to this event.\n     *\n     * @param handler Function invoked when the event is raised.\n     * @param self Object that defines the event handler\n     * (accessible as 'this' from the handler code).\n     * @deprecated\n     */\n    addHandler(handler: IEventHandler, self?: any) {\n        asFunction(handler);\n        this._handlers.push(new EventHandler(handler, self));\n    }\n    /**\n     * Removes a handler from this event.\n     *\n     * @param handler Function invoked when the event is raised.\n     * @param self Object that defines the event handler (accessible as 'this' from the handler code).\n     * @deprecated\n     */\n    removeHandler(handler: IEventHandler, self?: any) {\n        asFunction(handler);\n        for (let i = 0; i < this._handlers.length; i++) {\n            const l = this._handlers[i];\n            if (l.handler == handler || handler == null) {\n                if (l.self == self || self == null) {\n                    this._handlers.splice(i, 1);\n                    if (handler && self) {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Removes all handlers associated with this event.\n     * @deprecated\n     */\n    removeAllHandlers() {\n        this._handlers.length = 0;\n    }\n    /**\n     * Raises this event, causing all associated handlers to be invoked.\n     *\n     * @param sender Source object.\n     * @param args Event parameters.\n     * @deprecated use EventEmitter.emit() instead\n     */\n    raise(sender: any, args = EventArgs.empty) {\n        for (let i = 0; i < this._handlers.length; i++) {\n            const l = this._handlers[i];\n            l.handler.call(l.self, sender, args);\n        }\n    }\n    /**\n     * Gets a value that indicates whether this event has any handlers.\n     * @deprecated\n     */\n    get hasHandlers(): boolean {\n        return this._handlers.length > 0;\n    }\n}\n","import {Size} from \"./../core/index\";\nimport {EventArgs} from \"../eventArgs/EventArgs\";\nimport {Event} from \"../event/Event\";\nimport {CollectionView} from \"../collections-light/CollectionView\";\nimport {\n    assert,\n    getElement,\n    addClass,\n    createElement,\n    asType,\n    contains,\n    asBoolean,\n    enable,\n    copy,\n    toggleClass\n} from \"../core\";\nimport {isPresent} from  '../core';\n\n\n/**\n * Base class for all Wijmo controls.\n *\n * The @see:Control class handles the association between DOM elements and the\n * actual control. Use the @see:hostElement property to get the DOM element\n * that is hosting a control, or the @see:getControl method to get the control\n * hosted in a given DOM element.\n *\n * The @see:Control class also provides a common pattern for invalidating and\n * refreshing controls, for updating the control layout when its size changes,\n * and for handling the HTML templates that define the control structure.\n */\nexport class Control {\n    private static _DATA_KEY = 'wj-Control';    // key used to store control reference in host element\n    private static _REFRESH_INTERVAL = 10;      // interval between invalidation and refresh\n    private static _wme: HTMLElement;           // watermark element\n    static _touching: boolean;                  // the current event is a touch event\n\n    private _focus = false;                     // whether the control currently contains the focus\n    private _updating = 0;                      // update count (no refreshes while > 0)\n    private _fullUpdate = false;                // in case there are multiple calls to invalidate(x)\n    private _toInv: number;                     // invalidation timeOut\n    private _szCtl: Size;                       // current control size\n    private _e: HTMLElement;                    // host element\n    private _orgOuter: string;                  // host element's original outerHTML\n    private _orgInner: string;                  // host element's original innerHTML\n    private _listeners;                         // list of event listeners attached to this control\n    _orgTag: string;                            // host element's original tag (if not DIV)\n    _orgAtts: NamedNodeMap;                     // host element's original attributes\n\n    /**\n     * Initializes a new instance of a @see:Control and attaches it to a DOM element.\n     *\n     * @param element The DOM element that will host the control, or a selector for the host element (e.g. '#theCtrl').\n     * @param options JavaScript object containing initialization data for the control.\n     * @param invalidateOnResize Whether the control should be invalidated when it is resized.\n     */\n    constructor(element: any, options = null, invalidateOnResize = false) {\n\t//console.log(\"control_constructor\");\n        // get the host element\n        let host = getElement(element);\n\t\t  this._e = host;\n        host[Control._DATA_KEY] = this;\n\t\t const hd = this._handleDisabled.bind(this);\n this.addEventListener(host, 'click', hd, true);\n    }\n\n      // suppress mouse and keyboard events if the control is disabled\n    private _handleDisabled(e: any) {\n        if (this.disabled) {\n            e.preventDefault();\n            e.stopPropagation();\n            e.stopImmediatePropagation();\n        }\n    }\n\t /**\n     * Gets or sets whether the control is disabled.\n     *\n     * Disabled controls cannot get mouse or keyboard events.\n     */\n    get disabled(): boolean {\n        return this._e && this._e.getAttribute('disabled') != null;\n    }\n    set disabled(value: boolean) {\n        value = asBoolean(value, true);\n        if (value != this.disabled) {\n            enable(this._e, !value);\n        }\n    }\n\t\n\t addEventListener(target: EventTarget, type: string, fn: any, capture = false) {\n            if (target) {\n                target.addEventListener(type, fn, capture);\n                if (this._listeners == null) {\n                    this._listeners = [];\n                }\n                this._listeners.push({ target: target, type: type, fn: fn, capture: capture });\n            }\n        }\n    /**\n     * Applies the template to a new instance of a control, and returns the root element.\n     *\n     * This method should be called by constructors of templated controls.\n     * It is responsible for binding the template parts to the\n     * corresponding control members.\n     *\n     * For example, the code below applies a template to an instance\n     * of an @see:InputNumber control. The template must contain elements\n     * with the 'wj-part' attribute set to 'input', 'btn-inc', and 'btn-dec'.\n     * The control members '_tbx', '_btnUp', and '_btnDn' will be assigned\n     * references to these elements.\n     *\n     * <pre>this.applyTemplate('wj-control wj-inputnumber', template, {\n         *   _tbx: 'input',\n         *   _btnUp: 'btn-inc',\n         *   _btnDn: 'btn-dec'\n         * }, 'input');</pre>\n     *\n     * @param classNames Names of classes to add to the control's host element.\n     * @param template An HTML string that defines the control template.\n     * @param parts A dictionary of part variables and their names.\n     * @param namePart Name of the part to be named after the host element. This\n     * determines how the control submits data when used in forms.\n     */\n    applyTemplate(classNames: string, template: string, parts: Object, namePart?: string): HTMLElement {\n\t\t//console.log(\"apply_template_start\");\n        const host = this._e;\n\n        // apply standard classes to host element\n        if (classNames) {\n            addClass(host, classNames);\n        }\n\n        // convert string into HTML template and append to host\n        let tpl = null;\n        if (template) {\n            tpl = createElement(template);\n            tpl = host.appendChild(tpl);\n        }\n\n        // make sure the control can get the focus\n        // this is a little tricky:\n        // - Chrome won't give divs the focus unless we set tabIndex to something > -1\n        // - But if we do set it and the control contains input elements, the back-tab key won't work\n        // so we set the tabIndex to -1 or zero depending on whether the control contains input elements.\n        // http://wijmo.com/topic/shift-tab-not-working-for-input-controls-in-ff-and-chrome/, TFS 123457\n        if (host && !host.getAttribute('tabindex')) {\n            host.tabIndex = host.querySelector('input') ? -1 : 0;\n        }\n\n        // bind control variables to template parts\n        if (parts) {\n            for (let part in parts) {\n                const wjPart = parts[part];\n                this[part]   = tpl.querySelector('[wj-part=\"' + wjPart + '\"]');\n\n                // look in the root as well (querySelector doesn't...)\n                if (this[part] == null && tpl.getAttribute('wj-part') == wjPart) {\n                    this[part] = tpl;\n                }\n\n                // make sure we found the part\n                if (this[part] == null) {\n                    throw 'Missing template part: \"' + wjPart + '\"';\n                }\n\n                // copy/move attributes from host to input element\n                if (wjPart == namePart) {\n\n                    // copy parent element's name attribute to the namePart element\n                    // (to send data when submitting forms).\n                    let att = host.attributes['name'];\n                    if (att && att.value) {\n                        this[part].setAttribute('name', att.value);\n                    }\n\n                    // transfer access key\n                    att = host.attributes['accesskey'];\n                    if (att && att.value) {\n                        this[part].setAttribute('accesskey', att.value);\n                        host.removeAttribute('accesskey');\n                    }\n                }\n            }\n        }\n\n        // return template\n\t\t//console.log(\"apply_template_finish\");\n        return tpl;\n    }\n    /**\n     * Gets the HTML template used to create instances of the control.\n     *\n     * This method traverses up the class hierarchy to find the nearest ancestor that\n     * specifies a control template. For example, if you specify a prototype for the\n     * @see:ComboBox control, it will override the template defined by the @see:DropDown\n     * base class.\n     */\n    getTemplate(): string {\n        for (let p = Object.getPrototypeOf(this); p; p = Object.getPrototypeOf(p)) {\n\n            const tpl = \"sssss\";\n\n        }\n\n        return null;\n    }\n\t  static getControl(element: any): Control {\n        const e = getElement(element);\n        return e ? asType(e[Control._DATA_KEY], Control, true) : null;\n    }\n\t\n\t initialize(options: any) {\n        if (options) {\n         //   this.beginUpdate();\n            copy(this, options);\n          //  this.endUpdate();\n        }\n    }\n\t get hostElement(): HTMLElement {\n        return this._e;\n    }\n\t   get isTouching(): boolean {\n        return Control._touching;\n    }\n\t\n\t  // update focus state and raise got/lost focus events\n    _updateFocusState() {\n\n        // use a timeOut since Chrome and FF sometimes move the focus to the body\n        // before moving it to the new focused element\n        setTimeout(() => {\n\n            // update state for this control\n            const focus = this.containsFocus();\n            if (focus != this._focus) {\n                this._focus = focus;\n                if (focus) {\n                    this.onGotFocus();\n                } else {\n                    this.onLostFocus();\n                }\n                toggleClass(this._e, 'wj-state-focused', focus);\n            }\n\n            // update state for any parent controls as well\n            if (this._e) {\n                for (let e = this._e.parentElement; e; e = e.parentElement) {\n                    const ctl = Control.getControl(e);\n                    if (ctl) {\n                        ctl._updateFocusState();\n                        break;\n                    }\n                }\n            }\n        });\n    }\n\t\n\t containsFocus(): boolean {\n\n        // test for disposed controls\n        if (!this._e) {\n            return false;\n        }\n\n        // scan child controls (they may have popups, TFS 112676)\n        const c = this._e.getElementsByClassName('wj-control');\n        for (let i = 0; i < c.length; i++) {\n            const ctl = Control.getControl(c[i]);\n            if (ctl && ctl != this && ctl.containsFocus()) {\n                return true;\n            }\n        }\n\n        // check for actual HTML containment\n        return contains(this._e, <HTMLElement>document.activeElement);\n    }\n\t\n\t /**\n     * Occurs when the control gets the focus.\n     */\n    gotFocus = new Event();\n    /**\n     * Raises the @see:gotFocus event.\n     */\n    onGotFocus(e?: EventArgs) {\n        this.gotFocus.raise(this, e);\n    }\n    /**\n     * Occurs when the control loses the focus.\n     */\n    lostFocus = new Event();\n    /**\n     * Raises the @see:lostFocus event.\n     */\n    onLostFocus(e?: EventArgs) {\n        this.lostFocus.raise(this, e);\n    }\n}\n","import {toggleClass} from \"./toggle-class\";\n\n/**\n * Enables or disables an element.\n *\n * @param e Element to enable or disable.\n * @param enable Whether to enable or disable the element.\n */\nexport function enable(e: HTMLElement, enable: boolean) {\n    if (enable) {\n        e.removeAttribute('disabled');\n    } else {\n        e.setAttribute('disabled', 'true');\n    }\n    toggleClass(e, 'wj-state-disabled', !enable);\n}\n","/**\n * Creates an element from an HTML string.\n *\n * @param html HTML fragment to convert into an HTMLElement.\n * @return The new element.\n */\nexport function createElement(html: string) : HTMLElement {\n    const div     = document.createElement('div');\n    div.innerHTML = html;\n    return <HTMLElement>div.removeChild(div.firstChild);\n}\n","import {isObject} from \"./lang/is-object\";\nimport {isFunction} from \"./lang/is-function\";\nimport {assert} from \"./asserts/assert\";\n\n\n/**\n * Copies properties from an object to another.\n *\n * This method is typically used to initialize controls and other Wijmo objects\n * by setting their properties and assigning event handlers.\n *\n * The destination object must define all the properties defined in the source,\n * or an error will be thrown.\n *\n * @param dst The destination object.\n * @param src The source object.\n */\nexport function copy(dst: any, src: any) {\n    for (let key in src) {\n        assert(key in dst, 'Unknown key \"' + key + '\".');\n        const value = src[key];\n        if (!dst._copy || !dst._copy(key, value)) { // allow overrides\n            if (dst[key] instanceof Event && isFunction(value)) {\n                dst[key].addHandler(value); // add event handler\n            } else if (isObject(value) && dst[key]) {\n                copy(dst[key], value); // copy sub-objects\n            } else {\n                dst[key] = value; // assign values\n            }\n        }\n    }\n}\n","import {isArray} from \"./is-array\";\nimport {isDate} from \"./is-date\";\n\nexport function isObject(value: any): boolean {\n    return value != null && typeof value == 'object' && !isDate(value) && !isArray(value);\n}\n","//import {Color} from '../../core';\nimport {Control} from '../Control'\n//import {showPopup, hidePopup} from '../../core/popup'\nimport {setSelectionRange} from  '../../core';\nimport {CancelEventArgs} from \"../../eventArgs/CancelEventArgs\";\nimport {asBoolean} from  '../../core';\nimport {EventArgs} from \"../../eventArgs/EventArgs\";\nimport {contains} from '../../core';\n//import {Key} from \"../../enum/Key\";\nimport {Event} from \"../../event/Event\"\n\n\n/**\n * DropDown control (abstract).\n *\n * Contains an input element and a button used to show or hide the drop-down.\n *\n * Derived classes must override the _createDropDown method to create whatever\n * editor they want to show in the drop down area (a list of items, a calendar,\n * a color editor, etc).\n */\nexport class DropDown extends Control {\n\n    // child elements\n    _tbx: HTMLInputElement;\n    _elRef: HTMLElement;\n    _btn: HTMLElement;\n    _dropDown: HTMLElement;\n\n    // property storage\n    _showBtn    = true;\n    _autoExpand = true;\n\n    // private stuff\n    _oldText: string;\n\n    /**\n     * Gets or sets the template used to instantiate @see:DropDown controls.\n     */\n    static controlTemplate = '<div style=\"position:relative\" class=\"wj-template\">' +\n        '<div class=\"wj-input\">' +\n        '<div class=\"wj-input-group wj-input-btn-visible\">' +\n        '<input wj-part=\"input\" type=\"text\" class=\"wj-form-control\" />' +\n        '<span wj-part=\"btn\" class=\"wj-input-group-btn\" tabindex=\"-1\">' +\n        '<button class=\"wj-btn wj-btn-default\" type=\"button\" tabindex=\"-1\">' +\n        '<span class=\"wj-glyph-down\"></span>' +\n        '</button>' +\n        '</span>' +\n        '</div>' +\n        '</div>' +\n        '<div wj-part=\"dropdown\" class=\"wj-content wj-dropdown-panel\" ' +\n        'style=\"display:none;position:absolute;z-index:100;width:auto\">' +\n        '</div>' +\n        '</div>';\n\n    /**\n     * Initializes a new instance of a @see:DropDown control.\n     *\n     * @param element The DOM element that hosts the control, or a selector for the host element (e.g. '#theCtrl').\n     * @param options The JavaScript object containing initialization data for the control.\n     */\n    constructor(element: any, options?) {\n        super(element,  true);\n\t\t//console.log(\"drop_down_constructor_start\");\n        // instantiate and apply template\n        const tpl =  '<div style=\"position:relative\" class=\"wj-template\">' +\n        '<div class=\"wj-input\">' +\n        '<div class=\"wj-input-group wj-input-btn-visible\">' +\n        '<input wj-part=\"input\" type=\"text\" class=\"wj-form-control\" />' +\n        '<span wj-part=\"btn\" class=\"wj-input-group-btn\" tabindex=\"-1\">' +\n        '<button class=\"wj-btn wj-btn-default\" type=\"button\" tabindex=\"-1\">' +\n        '<span class=\"wj-glyph-down\"></span>' +\n        '</button>' +\n        '</span>' +\n        '</div>' +\n        '</div>' +\n        '<div wj-part=\"dropdown\" class=\"wj-content wj-dropdown-panel\" ' +\n        'style=\"display:none;position:absolute;z-index:100;width:auto\">' +\n        '</div>' +\n        '</div>';\n        this.applyTemplate(\n            'wj-control wj-dropdown wj-content', tpl, {\n                _tbx     : 'input',\n                _btn     : 'btn',\n                _dropDown: 'dropdown'\n            }, 'input'\n        );\n\n        // set reference element (used for positioning the drop-down)\n        this._elRef = this._tbx;\n\n        // disable autocomplete (important for mobile browsers including Chrome/Android)\n        this._tbx.autocomplete = 'off';\n\n        // create drop-down element, update button display\n        this._createDropDown();\n        this._updateBtn();\n\n        // update focus state when the drop-down loses focus\n          this.addEventListener(\n            this._dropDown, 'blur', () => {\n                this._updateFocusState();\n            }, true\n        );\n  // textbox events\n        this.addEventListener(\n            this._tbx, 'input', () => {\n                this._setText(this.text, false);\n            }\n        );\n\t\t this.addEventListener(\n            this._tbx, 'click', () => {\n                if (this._autoExpand) {\n                    this._expandSelection(); // expand the selection to the whole number/word that was clicked\n                }\n            }\n        );\n\t\t // in case the drop-down is shown but the control is not (e.g. context menu)\n        this.addEventListener(\n            this.dropDown, 'focus', () => {\n                this._updateFocusState();\n            }\n        );\n // handle clicks on the drop-down button\n        this.addEventListener(this._btn, 'click', this._btnclick.bind(this));\n\n        // stop propagation of clicks on the drop-down element\n        // (since they are not children of the hostElement, which can confuse\n        // elements such as Bootstrap menus)\n        this.addEventListener(\n            this._dropDown, 'click', (e) => {\n                e.stopPropagation();\n            }\n        );\n     //  console.log(\"drop_down_constructor_finish\");\n    }\n\t\n\t\n\t // create the drop-down element\n    _createDropDown() {\n        // override in derived classes\n    }\n\t /**\n     * Gets the drop down element shown when the @see:isDroppedDown\n     * property is set to true.\n     */\n    get dropDown(): HTMLElement {\n        return this._dropDown;\n    }\n  // update drop-down button visibility\n    _updateBtn() {\n        this._btn.tabIndex      = -1;\n        this._btn.style.display = this._showBtn ? '' : 'none';\n    }\n\t\n\t  _getCharType(text: string, pos: number) {\n        const chr = text[pos];\n        if (chr >= '0' && chr <= '9') return 0;\n        if ((chr >= 'a' && chr <= 'z') || (chr >= 'A' && chr <= 'Z')) return 1;\n        return -1;\n    }\n\n\t\t // expand the current selection to the entire number/string that was clicked\n    _expandSelection() {\n        const tbx = this._tbx,\n              val = tbx.value;\n        let start = tbx.selectionStart,\n              end = tbx.selectionEnd;\n        if (val && start == end) {\n            const ct = this._getCharType(val, start);\n            if (ct > -1) {\n                for (; end < val.length; end++) {\n                    if (this._getCharType(val, end) != ct) {\n                        break;\n                    }\n                }\n                for (; start > 0; start--) {\n                    if (this._getCharType(val, start - 1) != ct) {\n                        break;\n                    }\n                }\n                if (start != end) {\n                    tbx.setSelectionRange(start, end);\n                }\n            }\n        }\n    }\n\t\t\n    // handle clicks on the drop-down button\n    _btnclick(e: MouseEvent) {\n        this.isDroppedDown = !this.isDroppedDown;\n    }\n get isDroppedDown(): boolean {\n        return this._dropDown.style.display != 'none';\n    }\n\t\n\t\n    set isDroppedDown(value: boolean) {\n        value = asBoolean(value) && !this.disabled;\n        if (value != this.isDroppedDown && this.onIsDroppedDownChanging(new CancelEventArgs())) {\n            const dd = this._dropDown;\n            if (value) {\n                if (!dd.style.minWidth) {\n                    dd.style.minWidth = this.hostElement.getBoundingClientRect().width + 'px';\n                }\n                dd.style.display = 'block';\n                this._updateDropDown();\n            } else {\n                if (this.containsFocus()) {\n                    if (!this.isTouching || !this.showDropDownButton) {\n                       this.selectAll();\n\t\t\t\t\t//  console.log(\"select_all\");\n                    }\n                }\n               // hidePopup(dd);\n\t\t\t   dd.style.display='none';\n            }\n            this._updateFocusState();\n            this.onIsDroppedDownChanged();\n        }\n    }\n\t /**\n     * Occurs after the drop down is shown or hidden.\n     */\n    isDroppedDownChanged = new Event();\n\n    /**\n     * Raises the @see:isDroppedDownChanged event.\n     */\n    onIsDroppedDownChanged(e?: EventArgs) {\n        this.isDroppedDownChanged.raise(this, e);\n    }\n\n\t _updateDropDown() {\n        if (this.isDroppedDown) {\n          //  this._commitText();\n\t\t//  console.log(\"update_drop_down\");\n          //  showPopup(this._dropDown, this.hostElement);\n        }\n    }\n\t get showDropDownButton(): boolean {\n        return this._showBtn;\n    }\n\n    set showDropDownButton(value: boolean) {\n        this._showBtn = asBoolean(value);\n        this._updateBtn();\n    }\n\t // check whether this control or its drop-down contain the focused element.\n    containsFocus(): boolean {\n        return super.containsFocus() || contains(this._dropDown, document.activeElement);\n    }\n  /**\n     * Occurs before the drop down is shown or hidden.\n     */\n    isDroppedDownChanging = new Event();\n\n    /**\n     * Raises the @see:isDroppedDownChanging event.\n     */\n    onIsDroppedDownChanging(e: CancelEventArgs): boolean {\n        this.isDroppedDownChanging.raise(this, e);\n\t\t//console.log(\"changing\");\n        return !e.cancel;\n    }\n\t// close the drop-down when losing focus\n    onLostFocus(e?: EventArgs) {\n        this._commitText();\n        if (!this.containsFocus()) {\n            this.isDroppedDown = false;\n        }\n\t\t//console.log(\"on_lost_focus\");\n        super.onLostFocus(e);\n    }\n\t _commitText() {\n        // override in derived classes\n    }\n\t// transfer focus from control to textbox\n    // (but don't show the soft keyboard when the user touches the drop-down button)\n    onGotFocus(e?: EventArgs) {\n        if (!this.isTouching) {\n            this.selectAll();\n        }\n\t\t//console.log(\"on_got_focus\");\n        super.onGotFocus(e);\n    }\n\t /**\n     * Sets the focus to the control and selects all its content.\n     */\n    selectAll() {\n        if (this._elRef == this._tbx) {\n            setSelectionRange(this._tbx, 0, this.text.length);\n        }\n    }\n /**\n     * Gets or sets the text shown on the control.\n     */\n    get text(): string {\n        return this._tbx.value;\n    }\n\n    set text(value: string) {\n        if (value != this.text) {\n            this._setText(value, true);\n        }\n    }\n\t // update text in textbox\n    _setText(text: string, fullMatch: boolean) {\n\n        // make sure we have a string\n        if (text == null) text = '';\n        text = text.toString();\n\n        // update element\n        if (text != this._tbx.value) {\n            this._tbx.value = text;\n        }\n\n        // fire change event\n        if (text != this._oldText) {\n            this._oldText = text;\n            this.onTextChanged();\n        }\n    }\n  /**\n     * Occurs when the value of the @see:text property changes.\n     */\n    textChanged = new Event();\n\n    /**\n     * Raises the @see:textChanged event.\n     */\n    onTextChanged(e?: EventArgs) {\n        this.textChanged.raise(this, e);\n    }\n}\n","\n//import {Color} from '../../core';\nimport {Control} from '../Control';\n//import {FormatItemEventArgs} from './../FormatItemEventArgs';\nimport {asCollectionView} from '../../core';\n//import {asFunction} from '../../core';\nimport {asString} from '../../core';\nimport {hasItems} from '../../core';\nimport {asNumber} from '../../core';\nimport {toggleClass} from '../../core';\nimport {contains} from '../../core';\n//import {isObject} from '../../core';\n//import {asArray} from '../../core';\nimport {EventArgs} from \"../../eventArgs/EventArgs\";\n//import {escapeHtml} from '../../core';\nimport {hasClass} from '../../core';\n//import {Key} from \"../../enum/Key\";\n//import {tryCast} from '../../core';\nimport {Event} from \"../../event/Event\";\nimport {asBoolean} from '../../core';\n//import { Subscription } from 'rxjs';\n//import {ICollectionView} from \"../../collections-light/interface/ICollectionView\";\nimport {CollectionView} from \"../../collections-light/CollectionView\";\n//import {IEditableCollectionView} from \"../../collections/interface/IEditableCollectionView\";\n//import {NotifyCollectionChangedEventArgs}  from \"../../collections/eventArgs/NotifyCollectionChangedEventArgs\";\n\n\n/**\n * The @see:ListBox control displays a list of items which may contain\n * plain text or HTML, and allows users to select items with the mouse or\n * the keyboard.\n *\n * Use the @see:selectedIndex property to determine which item is currently\n * selected.\n *\n * You can populate a @see:ListBox using an array of strings or you can use\n * an array of objects, in which case the @see:displayPath property determines\n * which object property is displayed on the list.\n *\n * To display HTML rather than plain text, set the @see:isContentHtml property\n * to true.\n *\n * The example below creates a @see:ListBox control and populates it using\n * a 'countries' array. The control updates its @see:selectedIndex and\n * @see:selectedItem properties as the user moves the selection.\n *\n * @fiddle:8HnLx\n */\nexport class ListBox extends Control {\n\n\t// property storage\n\t_items: any; // any[] or ICollectionView\n\t_cv: CollectionView;\n\t_itemFormatter: Function;\n\t_pathDisplay: string;\n\t_pathValue: string;\n\t_pathChecked: string;\n\t_html = false;\n\n\t// work variables\n\t_checking: boolean;\n\t_search = '';\n\t_toSearch: number;\n//private subscription : Subscription;\n\t/**\n\t * Initializes a new instance of a @see:ListBox.\n\t *\n\t * @param element The DOM element that hosts the control, or a selector for the host element (e.g. '#theCtrl').\n\t * @param options The JavaScript object containing initialization data for the control.\n\t */\n\tconstructor(element: any, options?) {\n\t\tsuper(element);\n\n\t\t// instantiate and apply template\n\t\tthis.applyTemplate('wj-control wj-listbox wj-content', null, null);\n\n\t\t// initializing from <select> tag\n\t\tif (this._orgTag == 'SELECT') {\n\t\t\t//this._copyOriginalAttributes(this.hostElement);\n\t\t\t//this._populateSelectElement(this.hostElement);\n\t\t}\n\n\t\t// handle mouse and keyboard\n\t\tconst host = this.hostElement;\n\t\tthis.addEventListener(host, 'click', this._click.bind(this));\n\t\t//this.addEventListener(host, 'keydown', this._keydown.bind(this));\n\t\t//this.addEventListener(host, 'keypress', this._keypress.bind(this));\n\n\t\t// prevent wheel from propagating to parent elements\n\t\t/*this.addEventListener(host, 'onmousewheel' in document ? 'mousewheel' : 'DOMMouseScroll', (e: MouseWheelEvent) => {\n\t\t\tif (host.scrollHeight > host.clientHeight) {\n\t\t\t\tif ((e.wheelDelta > 0 && host.scrollTop == 0) ||\n\t\t\t\t\t(e.wheelDelta < 0 && host.scrollTop + host.clientHeight >= host.scrollHeight)) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\te.stopPropagation();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t*/\n\n\t\t// initialize control options\n\t\t//this.initialize(options);\n\t}\nget isContentHtml(): boolean {\n\t\treturn this._html;\n\t}\n\tset isContentHtml(value: boolean) {\n\t\tif (value != this._html) {\n\t\t\tthis._html = asBoolean(value);\n\t\t\tthis._populateList();\n\t\t}\n\t}\n\t\n\tgetDisplayText(index: number): string {\n\t\tconst children = this.hostElement.children,\n              item     = index > -1 && index < children.length\n                  ? <HTMLElement>children[index]\n                  : null;\n\t\treturn item != null ? item.textContent : '';\n\t}\n\t//--------------------------------------------------------------------------\n\t//#region ** overrides\nprivate _click(e: MouseEvent) {\n\t\tconsole.log(\"click on list box\");\n\t\t// select the item that was clicked\n\t\tconst children = this.hostElement.children;\n\t\tfor (let index = 0; index < children.length; index++) {\n\t\t\tif (contains(children[index], e.target)) {\n\t\t\t\tthis.selectedIndex = index;\n\t\t\t\tthis._cv.removeAt(index);\n\t\t\t\t//console.log(\"list_box_selected_index_set:\"+this.selectedIndex);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// handle checkboxes\n\t\t/*if (this.checkedMemberPath && this.selectedIndex > -1) {\n\t\t\tconst cb = this._getCheckbox(this.selectedIndex);\n\t\t\tif (cb == e.target) {\n\t\t\t\tthis.setItemChecked(this.selectedIndex, cb.checked);\n\t\t\t}\n\t\t}*/\n\t}\n\t/**\n\t * Refreshes the list.\n\t */\n\trefresh() {\n\t\tconsole.log(\"list_box_refresh_csalled\");\n\t\t//super.refresh();\n\t\t//this._populateList();\n\t}\n\t\n\tget collectionView(): CollectionView {\n\t\treturn this._cv;\n\t}\n\t//#endregion\n\tget selectedIndex(): number {\n\t\tconsole.log(\"list_box_get_selected_index\");\n\t\tconsole.log(\"list_box_cv_current_position:\"+this._cv.currentPosition);\n\t\treturn this._cv ? this._cv.currentPosition : -1;\n\t\t\n\t}\n\tset selectedIndex(value: number) {\n\t\t//console.log(\"list_box_set_selected_index\");\n\t\tif (this._cv) {\n\t\t\tthis._cv.moveCurrentToPosition(asNumber(value));\n\t\t}\n\t}\n\t//--------------------------------------------------------------------------\n\t//#region ** object model\n\n\t/**\n\t * Gets or sets the array or @see:ICollectionView object that contains the list items.\n\t */\n\tget itemsSource(): any {\n\t\treturn this._items;\n\t}\n\tset itemsSource(value: any) {\n\t\tif (this._items != value) {\n\n\t\t\t// unbind current collection view\n\t\t\tthis._items = value;\n\t\t\tthis._cv = asCollectionView(value);\n\t\t\t\n\t\t\tif (this._cv != null) {\n\t\t\t\tthis._cv.currentChanged.subscribe(this._cvCurrentChanged.bind(this));\n\t\t\t\tthis._cv.collectionChanged.subscribe(this._cvCollectionChanged.bind(this));\n\t\t\t}\n\t\t\t// update the list\n\t\t\tthis._populateList();\n\t\t//\tthis.onItemsChanged();\n\t\t//\tthis.onSelectedIndexChanged();\n\t\t}\n\t}\n\tprivate _cvCollectionChanged() {\n\t\t//if (!this._checking) {\n\t\tconsole.log(\"list_box_cv_collection_view_changed_started\");\n\t\t\tthis._populateList();\n\t\t\tthis.onItemsChanged();\n\t\t\tconsole.log(\"list_box_cv_collection_view_changed_finished\");\n\t\t//}\n\t}\n\tprivate _cvCurrentChanged(sender: any, e: EventArgs) {\n\t\tconsole.log(\"list_box_current_changed\");\n\t\tthis.showSelection();\n\t\tthis.onSelectedIndexChanged();\n\t}\n\n\t/**\n\t * Occurs when the list of items changes.\n\t */\n\titemsChanged = new Event();\n\t/**\n\t * Raises the @see:itemsChanged event.\n\t */\n\tonItemsChanged(e?: EventArgs) {\n\t\tthis.itemsChanged.raise(this, e);\n\t}\n\t\n\tget selectedItem(): any {\n\t\treturn this._cv ? this._cv.currentItem: null;\n\t}\n\tset selectedItem(value: any) {\n\t\tif (this._cv) {\n\t\t\tthis._cv.moveCurrentTo(value);\n\t\t}\n\t}\n\t// populate the list from the current itemsSource\n\tprivate _populateList() {\n\t\tconsole.log(\"populate_list_start\");\n\t\t// get ready to populate\n\t\tconst host = this.hostElement;\n\t\tif (host) {\n\n\t\t\t// remember if we have focus\n\t\t\tconst focus = this.containsFocus();\n\n\t\t\t// fire event so user can clean up any current items\n\t\t//\tthis.onLoadingItems();\n\n\t\t\t// populate\n\t\t\thost.innerHTML = '';\n\t\t\tif (this._cv) {\n\t\t\t\tfor (let i = 0; i < this._cv.items.length; i++) {\n\n\t\t\t\t\t// get item text\n\t\t\t\t\t///let text = this.getDisplayValue(i);\n\t\t\t\t\tlet text = this.getDisplayValue(i);\n\t\t\t\t\tif (this._html != true) {\n\t\t\t\t\t//\ttext = escapeHtml(text);\n\t\t\t\t\t}\n\n\t\t\t\t\t// add checkbox (without tabindex attribute: TFS 135857)\n\t\t\t\t\t//if (this.checkedMemberPath) {\n\t\t\t\t\t\t//const checked = this._cv.items[i][this.checkedMemberPath];\n\t\t\t\t\t\t//text          = '<label><input type=\"checkbox\"' + (checked ? ' checked' : '') + '> ' + text + '</label>';\n\t\t\t\t\t//}\n\n\t\t\t\t\t// build item\n\t\t\t\t\tconst item = document.createElement('div');\n\t\t\t\t\titem.innerHTML = text;\n\t\t\t\t\titem.className = 'wj-listbox-item';\n\t\t\t\t\tif (hasClass(<HTMLElement>item.firstChild, 'wj-separator')) {\n\t\t\t\t\t\titem.className += ' wj-separator';\n\t\t\t\t\t}\n\n\t\t\t\t\t// allow custom formatting\n\t\t\t\t\t//if (this.formatItem.hasHandlers) {\n\t\t\t\t\t//\tconst e = new FormatItemEventArgs(i, this._cv.items[i], item);\n\t\t\t\t\t\t//this.onFormatItem(e);\n\t\t\t\t\t//}\n\n\t\t\t\t\t// add item to list\n\t\t\t\t\thost.appendChild(item);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// make sure the list is not totally empty\n\t\t\t// or min-height/max-height won't work properly in IE/Edge\n\t\t\tif (host.children.length == 0) {\n\t\t\t\thost.appendChild(document.createElement('div'));\n\t\t\t}\n\n\t\t\t// restore focus\n\t\t\t//if (focus && !this.containsFocus()) {\n\t\t\t//\tthis.focus();\n\t\t\t//}\n\n\t\t\t// scroll selection into view\n\t\t\tthis.showSelection();\n\n\t\t\t// fire event so user can hook up to items\n\t\t\t//this.onLoadedItems();\n\t\t}\n\t\tconsole.log(\"populate_list_finish\");\n\t}\n\t\t/**\n\t * Occurs when the value of the @see:selectedIndex property changes.\n\t */\n\tselectedIndexChanged = new Event();\n\t/**\n\t * Raises the @see:selectedIndexChanged event.\n\t */\n\tonSelectedIndexChanged(e?: EventArgs) {\n\t\tthis.selectedIndexChanged.raise(this, e);\n\t}\n\t\n\tgetDisplayValue(index: number): string {\n\n\t\t// get the text or html\n\t\tlet item = null;\n\t\tif (index > -1 && hasItems(this._cv)) {\n\t\t\titem = this._cv.items[index];\n\t\t\tif (this.displayMemberPath) {\n\t\t\t\titem = item[this.displayMemberPath];\n\t\t\t}\n\t\t}\n\t\tlet text = item != null ? item.toString() : '';\n\n\t\t// allow caller to override/modify the text or html\n\t\t/*\n\t\tif (this.itemFormatter) {\n\t\t\ttext = this.itemFormatter(index, text);\n\t\t}\n*/\n\t\t// return the result\n\t\treturn text;\n\t}\n\t/**\n\t * Gets or sets the name of the property to use as the visual representation of the items.\n\t */\n\tget displayMemberPath(): string {\n\t\treturn this._pathDisplay;\n\t}\n\tset displayMemberPath(value: string) {\n\t\tif (value != this._pathDisplay) {\n\t\t\tthis._pathDisplay = asString(value);\n\t\t\tthis._populateList();\n\t\t}\n\t}\n\t/**\n\t * Highlights the selected item and scrolls it into view.\n\t */\n\tshowSelection() {\n\t\tconsole.log(\"list_box_show_selection_started\");\n\t\tconst index    = this.selectedIndex,\n              host     = this.hostElement,\n              children = host.children;\n\t\tconsole.log(\"list_box_selected_index:\"+index);\n        let e: HTMLElement;\n\n\t\t// highlight\n\t\tfor (let i = 0; i < children.length; i++) {\n\t\t\te = <HTMLElement>children[i];\n\t\t\ttoggleClass(e, 'wj-state-selected', i == index);\n\t\t}\n\n\t\t// scroll into view\n\t\tif (index > -1 && index < children.length) {\n\t\t\te = <HTMLElement>children[index];\n\t\t\tconst rco = e.getBoundingClientRect();\n\t\t\tconst rcc = this.hostElement.getBoundingClientRect();\n\t\t\tif (rco.bottom > rcc.bottom) {\n\t\t\t\thost.scrollTop += rco.bottom - rcc.bottom;\n\t\t\t} else if (rco.top < rcc.top) {\n\t\t\t\thost.scrollTop -= rcc.top - rco.top;\n\t\t\t}\n\t\t}\n\n\t\t// make sure the focus is within the selected element (TFS 135278)\n\t\tif (index > -1 && this.containsFocus()) {\n\t\t\te = <HTMLElement>children[index];\n\t\t\tif (e instanceof HTMLElement && !contains(e, document.activeElement)) {\n\t\t\t\te.focus();\n\t\t\t}\n\t\t}\n\t\tconsole.log(\"list_box_show_selection_finished\");\n\t}\n\t\n\t\n\tget selectedValue(): any {\n\t\tlet item = this.selectedItem;\n\t\tif (item && this.selectedValuePath) {\n\t\t\titem = item[this.selectedValuePath];\n\t\t}\n\t\treturn item;\n\t}\n\tset selectedValue(value: any) {\n\t\tlet path  = this.selectedValuePath,\n            index = -1;\n\t\tif (this._cv) {\n\t\t\tfor (let i = 0; i < this._cv.items.length; i++) {\n\t\t\t\tconst item = this._cv.items[i];\n\t\t\t\tif ((path && item[path] == value) || (!path && item == value)) {\n\t\t\t\t\tindex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.selectedIndex = index;\n\t\t}\n\t}\n\t\n\t/**\n\t * Gets or sets the name of the property used to get the @see:selectedValue\n\t * from the @see:selectedItem.\n\t */\n\tget selectedValuePath(): string {\n\t\treturn this._pathValue;\n\t}\n\tset selectedValuePath(value: string) {\n\t\tthis._pathValue = asString(value);\n\t}\n}\n","import {isArray} from \"../lang/is-array\";\n//import {ICollectionView} from \"../../../../collections/interface/ICollectionView\";\nimport {tryCast} from \"../../common/global\";\nimport {assert} from \"./assert\";\nimport {CollectionView} from \"../../../../collections-light/CollectionView\";\n/**\n * Asserts that a value is an @see:ICollectionView or an Array.\n *\n * @param value Array or @see:ICollectionView.\n * @param nullOK Whether null values are acceptable.\n * @return The @see:ICollectionView that was passed in or a @see:CollectionView\n * created from the array that was passed in.\n */\nexport function asCollectionView(value: any, nullOK = true): CollectionView {\n    if (value == null && nullOK) {\n        return null;\n    }\n    /*const cv = tryCast(value, 'ICollectionView');\n    if (cv != null) {\n        return cv;\n    }\n    if (!isArray(value)) {\n        assert(false, 'Array or ICollectionView expected.');\n    }\n\t*/\n    return new CollectionView(value);\n}\n\n","\n//import {Color} from '../../core';\nimport {DropDown} from './../DropDown/DropDown'\nimport {ListBox} from './../ListBox/ListBox'\nimport {hasItems} from '../../core';\n//import {setSelectionRange} from  '../../core';\n//import {clamp} from  '../../core';\nimport {CollectionView} from \"../../collections-light/CollectionView\";\nimport {asBoolean} from   '../../core';\n//import {asFunction} from   '../../core';\nimport {EventArgs} from \"../../eventArgs/EventArgs\";\n//import {CancelEventArgs} from \"../../eventArgs/CancelEventArgs\";\n//import {Key} from \"../../enum/Key\";\n//import {asNumber} from   '../../core';\nimport {asString} from   '../../core';\nimport {Event} from \"../../event/Event\";\n\n\n/**\n * The @see:ComboBox control allows users to pick strings from lists.\n *\n * The control automatically completes entries as the user types, and allows users\n * to show a drop-down list with the items available.\n *\n * Use the @see:selectedIndex or the @see:text properties to determine which\n * item is currently selected.\n *\n * The @see:isEditable property determines whether users can enter values that\n * are not present in the list.\n *\n * The example below creates a @see:ComboBox control and populates it with a list\n * of countries. The @see:ComboBox searches for the country as the user types.\n * The <b>isEditable</b> property is set to false, so the user is forced to\n * select one of the items in the list.\n *\n * The example also shows how to create and populate a @see:ComboBox using\n * an HTML <b>&lt;select;&gt</b> element with <b>&lt;option;&gt</b> child\n * elements.\n *\n * @fiddle:8HnLx\n */\nexport class ComboBox extends DropDown {\n\n\t// child elements\n\t_lbx: ListBox;\n\n\t// property storage\n\t_required = true;\n\t_editable = false;\n\n\t// private stuff\n\t_composing = false;\n\t_deleting = false;\n\t_settingText = false;\n\t_cvt: HTMLElement;\n\t_hdrPath: string;\n\n\t/**\n\t * Initializes a new instance of a @see:ComboBox control.\n\t *\n\t * @param element The DOM element that hosts the control, or a selector for the host element (e.g. '#theCtrl').\n\t * @param options The JavaScript object containing initialization data for the control.\n\t */\n\tconstructor(element: any, options?) {\n\t\tsuper(element);\n//console.log(\"combo_constructor_start\");\n\t\t\n\t\t// handle IME\n\t\t/*\n\t\tthis.addEventListener(this._tbx, 'compositionstart', () => {\n\t\t\tthis._composing = true;\n\t\t});\n\t\tthis.addEventListener(this._tbx, 'compositionend', () => {\n\t\t\tthis._composing = false;\n\t\t\tthis._setText(this.text, true);\n\t\t});\n\t\t*/\n\t\t\t// initialize control options\n\t\tthis.initialize(options);\n\t\t//console.log(\"combo_constructor_finish\");\n\t}\n\n\t//--------------------------------------------------------------------------\n\t//#region ** object model\nget displayMemberPath(): string {\n\t\treturn this._lbx.displayMemberPath;\n\t}\n\tset displayMemberPath(value: string) {\n\t\tthis._lbx.displayMemberPath = value;\n\t\tconst text = this.getDisplayText();\n\t\tif (this.text != text) {\n\t\t\tthis._setText(text, true);\n\t\t}\n\t}\n_setText(text: string, fullMatch: boolean) {\n\t\t\t//console.log(\"combo_box_set_text_start\");\n\t\t// not while composing IME text...\n\t\tif (this._composing) return;\n\n\t\t// prevent reentrant calls while moving CollectionView cursor\n\t\tif (this._settingText) return;\n\t\tthis._settingText = true;\n\n\t\t// make sure we have a string\n\t\tif (text == null) text = '';\n\t\ttext = text.toString();\n\t\tsuper._setText(text, fullMatch);\n\t\t//console.log(\"combo_box_set_text_finish\");\n\t\t\n\t\tthis._settingText = false;\n\n}\n\t/**\n\t * Gets or sets the array or @see:ICollectionView object that contains the items to select from.\n\t */\n\tget itemsSource(): any {\n\t\treturn this._lbx.itemsSource;\n\t}\n\tset itemsSource(value: any) {\n\t\tthis._lbx.itemsSource = value;\n\t\tthis._updateBtn();\n\t}\n\t// create the drop-down element\n\t_createDropDown() {\n\t\t//console.log(\"create drop down\");\n\t\tthis._lbx = new ListBox(this._dropDown);\n\t\t\tthis._lbx.selectedIndexChanged.addHandler(() => {\n\t\t\tthis._updateBtn();\n\t\t\tthis.selectedIndex = this._lbx.selectedIndex;\n\t\t\tthis.onSelectedIndexChanged();\n\t\t});\n\n\t\t// update button display when item list changes\n\t\tthis._lbx.itemsChanged.addHandler(() => {\n\t\t\tthis._updateBtn();\n\t\t});\n\n\t\t// close the drop-down when the user clicks to select an item\n\t\tthis.addEventListener(this._dropDown, 'click', (e: MouseEvent) => {\n\t\t\tif (e.target != this._dropDown) { // an item, not the list itself...\n\t\t\t\tthis.isDroppedDown = false;\n\t\t\t}\n\t\t});\n\t}\n\tget headerPath(): string {\n\t\treturn this._hdrPath;\n\t}\n\tset headerPath(value: string) {\n\t\tthis._hdrPath = asString(value);\n\t\tconst text = this.getDisplayText();\n\t\tif (this.text != text) {\n\t\t\tthis._setText(text, true);\n\t\t}\n\t}\n\t\tselectedIndexChanged = new Event();\n\t/**\n\t * Raises the @see:selectedIndexChanged event.\n\t */\n\tonSelectedIndexChanged(e?: EventArgs) {\n\t\tthis._updateBtn();\n\t\tthis.selectedIndexChanged.raise(this, e);\n\t}\n\t/**\n\t * Gets or sets the index of the currently selected item in the drop-down list.\n\t */\n\tget selectedIndex(): number {\n\t\treturn this._lbx.selectedIndex;\n\t}\n\tset selectedIndex(value: number) {\n\t\tif (value != this.selectedIndex) {\n\t\t\tthis._lbx.selectedIndex = value;\n\t\t}\n\t\tconst text = this.getDisplayText(value);\n\t\tif (this.text != text) {\n\t\t\tthis._setText(text, true);\n\t\t}\n\t}\n\tget collectionView(): CollectionView {\n\t\treturn this._lbx.collectionView;\n\t}\n\t\n\tgetDisplayText(index = this.selectedIndex): string {\n\n\t\t// get display text directly from the headerPath if that was specified\n\t\tif (this.headerPath && index > -1 && hasItems(this.collectionView)) {\n\t\t\tconst item = this.collectionView.items[index][this.headerPath];\n            let text   = item != null ? item.toString() : '';\n\t\t\tif (this.isContentHtml) {\n\t\t\t\tif (!this._cvt) {\n\t\t\t\t\tthis._cvt = document.createElement('div');\n\t\t\t\t}\n\t\t\t\tthis._cvt.innerHTML = text;\n\t\t\t\ttext = this._cvt.textContent;\n\t\t\t}\n\t\t\treturn text;\n\t\t}\n\n\t\t// headerPath not specified, get text straight from the ListBox\n\t\treturn this._lbx.getDisplayText(index);\n\t}\n\t\n\t\n\tget isContentHtml(): boolean {\n\t\treturn this._lbx.isContentHtml;\n\t}\n\tset isContentHtml(value: boolean) {\n\t\tif (value != this.isContentHtml) {\n\t\t\tthis._lbx.isContentHtml = asBoolean(value);\n\t\t\tlet text = this.getDisplayText();\n\t\t\tif (this.text != text) {\n\t\t\t\tthis._setText(text, true);\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Gets or sets the item that is currently selected in the drop-down list.\n\t */\n\tget selectedItem(): any {\n\t\treturn this._lbx.selectedItem;\n\t}\n\tset selectedItem(value: any) {\n\t\tthis._lbx.selectedItem = value;\n\t}\n\t/**\n\t * Gets or sets the value of the @see:selectedItem, obtained using the @see:selectedValuePath.\n\t */\n\tget selectedValue(): any {\n\t\treturn this._lbx.selectedValue;\n\t}\n\tset selectedValue(value: any) {\n\t\tthis._lbx.selectedValue = value;\n\t}\n\n}\n"],"names":["ClarityModule","forChild","ngModule","providers","isArray","value","Array","isDate","Date","isNaN","valueOf","isFunction","assert","condition","msg","Error","isNumber","asFunction","nullOK","asNumber","positive","asBoolean","isBoolean","decorators","type","NgModule","args","imports","CommonModule","FormsModule","declarations","exports","ctorParameters","EventArgs","empty","CancelEventArgs","_super","_this","apply","this","arguments","cancel","__extends","CollectionView","sourceCollection","_idx","_newItem","_edtItem","_pgSz","_pgIdx","_updating","_canFilter","_canGroup","_canSort","_canAddNew","_canCancelEdit","_canRemove","_canChangePage","_trackChanges","currentChanged","EventEmitter","currentChanging","collectionChanged","console","log","_pgView","Object","defineProperty","prototype","get","_itemCreator","_srtCvt","set","implementsInterface","interfaceName","moveCurrentTo","item","moveCurrentToPosition","indexOf","moveCurrentToFirst","moveCurrentToLast","length","moveCurrentToNext","index","e","onCurrentChanging","onCurrentChanged","emit","removeAt","asInt","isInt","Math","round","remove","_src","current","currentItem","splice","_digest","_performRefresh","refresh","currentPosition","asArray","onCollectionChanged","hasItems","items","isString","asString","asType","tryCast$1","tryCast","hasClass","className","getAttribute","rx","RegExp","test","addClass","setAttribute","cn","contains","parent","child","parentNode","toggleClass","addOrRemove","removeClass","replace","getElement","selector","HTMLElement","document","querySelector","jquery","culture","Globalize","numberFormat","NumberDecimalSeparator","NumberGroupSeparator","CurrencySymbol",".",",","percent","pattern","currency","decimals","symbol","dateTimeFormat","TimeSeparator","DateSeparator","/",":","calendar","firstDay","days","daysAbbr","months","monthsAbbr","am","pm","eras","patterns","d","D","f","F","t","T","M","m","Y","y","g","G","s","o","O","U","fiscalYearOffsets","MultiSelect","itemsSelected","FlexGrid","groupHeaderFormat","FlexGridFilter","ascending","descending","clear","conditions","values","search","selectAll","null","header","and","or","stringOperators","name","op","numberOperators","dateOperators","booleanOperators","DateTime","addDays","getFullYear","getMonth","getDate","addMonths","addYears","years","addHours","hours","getHours","addMinutes","minutes","getMinutes","addSeconds","seconds","getSeconds","sameDate","d1","d2","sameTime","equals","getTime","fromDateTime","date","time","toFiscal","govt","cal","fromFiscal","clone","format","trim","truncate","formatNumber","formatDate","toString","result","match","nf","f1","toLowerCase","prec","parseInt","scale","curr","dp","ts","pow","abs","toUpperCase","toFixed","decPos","substr","parseFloat","idx","asDate","toUTCString","toISOString","_expandFormat","parts","_parseDateFormat","str","i","_formatDatePart","neg","pct","parseDate","setHours","setMinutes","setSeconds","hasDayName","hasDay","hasQuarter","hasMonth","fiscalFmt","cjk","_CJK","rxv","vparts","fparts","offset","year","month","day","hour","min","sec","ms","era","vpi","pval","plen","monthName","j","_getEra","_unquote","start","getFirstDayOfWeek","fdw","getNumberDecimalSeparator","ndc","_dateFomatParts","end","c","push","substring","part","fd","ff","_zeroPad","getDay","_h12","getMilliseconds","floor","tz","fmt","num","places","n","zero","join","h","EventHandler","handler","self","Event$1","_handlers","addHandler","removeHandler","l","removeAllHandlers","raise","sender","call","Control","element","options","invalidateOnResize","_focus","_fullUpdate","gotFocus","Event","lostFocus","host","hd","_e","_DATA_KEY","_handleDisabled","bind","addEventListener","disabled","preventDefault","stopPropagation","stopImmediatePropagation","enable","removeAttribute","target","fn","capture","_listeners","applyTemplate","classNames","template","namePart","tpl","createElement","html","div","innerHTML","removeChild","firstChild","appendChild","tabIndex","wjPart","att","attributes","getTemplate","getControl","initialize","copy","dst","src","key","_copy","_touching","_updateFocusState","setTimeout","focus","containsFocus","onGotFocus","onLostFocus","parentElement","ctl","getElementsByClassName","_REFRESH_INTERVAL","DropDown","_showBtn","_autoExpand","isDroppedDownChanged","isDroppedDownChanging","textChanged","_tbx","_btn","_dropDown","_elRef","autocomplete","_createDropDown","_updateBtn","_setText","text","_expandSelection","dropDown","_btnclick","style","display","_getCharType","pos","chr","tbx","val","selectionStart","selectionEnd","ct","setSelectionRange","isDroppedDown","onIsDroppedDownChanging","dd","minWidth","hostElement","getBoundingClientRect","width","_updateDropDown","isTouching","showDropDownButton","onIsDroppedDownChanged","activeElement","_commitText","HTMLInputElement","body","x","fullMatch","_oldText","onTextChanged","controlTemplate","ListBox","_html","_search","itemsChanged","selectedIndexChanged","_orgTag","_click","_populateList","getDisplayText","children","textContent","selectedIndex","_cv","_items","asCollectionView","subscribe","_cvCurrentChanged","_cvCollectionChanged","onItemsChanged","showSelection","onSelectedIndexChanged","getDisplayValue","displayMemberPath","_pathDisplay","rco","rcc","bottom","scrollTop","top","selectedItem","selectedValuePath","path","_pathValue","ComboBox","_required","_editable","_composing","_deleting","_settingText","_lbx","itemsSource","_hdrPath","collectionView","headerPath","isContentHtml","_cvt","selectedValue"],"mappings":"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"}
